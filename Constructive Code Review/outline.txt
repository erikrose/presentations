- Splash screen
    - PR screenshot: “Your code is bad and you are bad. Have a bad day.”
- Importance
    - Who's done code review before?
    - All code at Mozilla gets reviewed before it gets merged.
        - It's a great way to…
            - Improve the code
                - I like to think I'm good at this, but people still
                  find improvements to make in my stuff almost every
                  time.
            - Also ensures it's understandable, not just executable
            - Learn the codebase and the craft
                - It informs other people what's going on in the
                  codebase so you're not stuck with the sole
                  responsibility of maintaining it.
                - It's as much about teaching as fixing. It's a major
                  way we bring junior people up the ladder.
            - In fact, other things can get reviewed as well! Thanks to
              the reviewers of this talk, willkg and rhelmer.
    - But open source runs on enthusiasm
        - Even when you're getting paid to do it
            - There's a lot of intrinsic motivation around here.
    - “Crisitunity”
        - If we beat people up in code reviews
            - we can drive the desire to contribute out of people
            - even drive out the people themselves
        - Or we can magnify our power through teaching and
          encouragement.
        - This talk is about how to do reviews that result in an
          excellent product, excellent programmers, and good use of
          time.
        - For example…
              …then continue on to goods/bads.
- Good/bads
      These will be a series of before/after PR screenshots with
      discussion.
    - Clarity
          Most important. After all, our first duty is to the truth,
          since nature cannot be fooled. “This makes frob() buggy.” vs.
          “Now if we call frob(), there will be a mem leak as we
          allocate the whatzit.”
        - Example code snippets, REPL sessions, links to relevant
          documentation, etc.
            - Help bridge gaps when English isn't a first language
            - When people don't know each other well
            - When someone's new to the project
            - When someone hasn't had their morning prosthetic
              neurotransmitters
        - If you're talking past each other, try Vidyo.
            - Be sure to write down the result.
            - Be considerate of the other person's time
                - Timezone
                - Offer to make an appointment; don't expect them to
                  drop everything right now.
        - Clear expectations
            - Sometimes I say "Hey, it would be cool if X, but it
              doesn't block the merge."
            - One step more is "We should X eventually. I think we
              should either do it now or else open a bug about it for
              later."
                - Unless it's trivial, lean toward doing it later so
                  the PR doesn't go on forever, with nobody enjoying
                  its benefits.
            - A big "That's all I see. With those changes, I think it's
              ready to merge." lets them (and you!) know you're done
              and ends with a note of encouragement.
    - Softeners
          When you have to point out something bad
        - A spoonful of sugar
        - The question mark
              Dr. Evil pic: "My father…would make outrageous claims
              like he invented the question mark."
            - Cheap, easy sugar
            - Because maybe you missed something, after all (saves
              face!)
            - “There's no point returning path results when there is
              more than one term.” vs. “Can you remind me of some use
              cases for returning path results when there is more than
              one term?”
            - “If I do this, it crashes. Do you get that as well?”
            - Activates the Socratic method: great for teaching because
              it makes people think along with you, not just get
              battered with assertions
        - You/we
              “Why are you showing the number when it's tiny [you
              idiot]?” vs. “Why are we showing the number when it's
              tiny? The user can count 3 things, so it's not really
              necessary.”
            - Or "this". "This code does X." It's always safe to keep
              it about the code.
        - Give compliments! Always say one good thing about the code.
            - I like to write something encouraging as a top-level
              comment about the patch in general, while I'm still
              excited about the actual feature it delivers, before I
              dig in and discover the code is terrible. "Aw, man, I
              can't wait to land this. I'm going to love being able to
              close Flash tabs without reaching for the mouse. [Now
              let's get the problems fixed so we can merge it.]"
            - "Good catch!"
                  These comments would make a good visual, as actual
                  line comments on a PR.
                - Also makes a good reply back to the reviewer
            - "Thank you so much for refactoring this scary mess."
        - Emoticons
        - GIFs
    - TLDR;LGTM
          A 1000-line review gets 2 comments. A 10-line one gets 5.
        - Feel free to ask for a more reviewable commit structure,
          better commit messages, more comments, a couple of paragraphs
          of prose explaining the approach. If you can't understand it
          now (with somebody around to answer questions), just imagine
          the trouble in a year.
            - When you submit a patch, structure it so you'd be happy
              to review it.
            - And definitely read your diffs first before submitting.
                - Hugely worth it to get a diff viewer you like
            - This is also a good time to make sure you've addressed
              all the review comments.
        - Consider not burning yourself out on it; some studies have
          found a decrease in review effectiveness after about an hour.
    - Fix the rest of this file while you're at it.
        - Don't expect them to fix the whole module if they touch part
          of it.
            - The idea is for the codebase to be GettingBetter, not
              BeingPerfect. You can always come back and fix other
              parts later, and it's okay to point that out, but make
              clear that it doesn't block the merge (and shouldn't
              distract them).
    - Nitpicks
        - Having a style guide or a linter smooths things along, saves
          back-and-forth.
            - But overzealous linters the hurt the understandability of
              code just make me angry. Code is for humans.
        - We have a bunch of decent style guides at Mozilla; you should
          just adopt them when possible and save everybody work and
          make it easy to move code and people from project to project.
        - The webdev ones are just in a GH repo. If you don't like 'em,
          submit a PR.
        - Style: consistency within a function, then within a file,
          then within a module, then within a project. Try not to be
          adaptable. You can always do your favorite style on your
          personal stuff.
        - Remember what it costs per hour to have you sit there, and
          throttle accordingly.
    - Sooner is better
        - Even if you aren't comprehensive
            - You can say “I'm not going to have the time to look at
              the rest of this for a week. Someone else can feel free
              to step in.” Don't feel like you married the patch.
        - Stuff falls out of working memory pretty fast, and it's
          expensive to load back in.
        - It's energizing to get your patches turned around quickly.
        - If you have to say "no" completely or ask someone to rethink
          their approach, better to do it quickly so they don't waste
          their time building more castles on the sand.
- Emotional issues
    - Insecurity
          a kind of fear
        - Who in the room has ever secretly felt (or feared) they're
          not as competent as the engineers around you?
              (If they don't put up their hands: "Of course you don't.
              It's a secret.")
        - Almost everybody does. It doesn't really go away. Realize
          nobody's judging you; they're too busy worrying about people
          judging them.
        - Realize you've already made it.
            - If you're hired, congratulations. We don't have an easy
              hiring process. You're competent to do this job.
            - Sometimes somebody will find a problem in your PR because
              they know something you don't. Sometimes it's just having
              a fresh set of eyes.
        - Who's afraid their imposter syndrome isn't as good as
          everybody else's?
        - It's been a help to me to notice when I'm feeling defensive
          or angry.
            - Why am I feeling that way? Sometimes that reveals things
              I believe that aren't true or things I need to think
              about.
            - I generally make bad decisions and say things I regret
              when feeling that way.
            - It's a good time to talk a break and come back with a
              clear head.
    - Feeling short on time
          There will always be more to review than can be reviewed. So
          we have to learn to adapt to that reality: lower standards,
          never sleep, or just go at a sustainable pace. It can do a
          lot for a contrib's peace of mind just to know you've seen
          that the patch is there and that you haven't forgotten about
          it. Sometimes I even let people know "It's next in my queue."
        - Consider: what's the risk if there's something wrong with it?
            - Will it cause a lot of damage?
            - Will it be easy to fix, or is there, say, a data-exchange
              format being defined?
        - Dealing with newcomers
            - One time I often feel like I'm getting a bad ROI is with
              newcomers.
            - We’ve all got to start where we’re at. Don’t make fun of
              scrawny people weightlifting.
                - And we must embrace newcomers unless we plan to live
                  forever.
                - It's flattering when someone new wants to contribute
                  to your project.
            - But I don't spend much time new contribs the moment they
              show up.
                - But my investment parallels theirs.
            - Leveling up
                - They don't know where to start
                    - Links to dev docs, a few sentences of explanation
                      and ideas where to start
                    - Links to resources to learn skills if they don't
                      have them
                - First I will fix their patch (geared for one-timers
                  so patches don't rot)
                    - "Polish-up" commits
                        - So their name still gets into the commit log
                          and they feel good
                - Next, I just comment and request fixes
                - Then I require tests
    - Interpersonal issues
        - When you're in person with your team, make a point of
          establishing good relations with them.
            - Then when you have to critique each other or talk on a
              low-bandwidth medium like IRC, you'll know how to take
              each other. You'll have some built-up offense-buffering.
    - Other feelings
        - When you can't decide what to say (something feels too bad to
          merge), you can always fall back to articulating your
          emotions: "I’m worried that if we make the destination param
          optional, people will write to the global datastore by
          default, and a mess will ensue."
        - You don't have to be definitive, decisive, or an authority
          all the time. Just treat everybody like adults and articulate
          your feelings. I've said "I'm happy you want to work on that,
          but I'm afraid that you'll end up in merge hell if I land the
          elasticsearch stuff first." Inviting them into the tradeoff
          is a heckuva lot better than "no!". (If they don't mine merge
          hell, they can go for it!)
- Call to action

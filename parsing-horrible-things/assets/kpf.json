{"slideHeight":768,
"filename":"Parsing Horrible Things",
"navigatorEvents":[{"eventName":"Slide 1",
"eventIndex":0}
,{"eventName":"Slide 2",
"eventIndex":1}
,{"eventName":"Slide 3",
"eventIndex":2}
,{"eventName":"Slide 4",
"eventIndex":3}
,{"eventName":"Slide 5",
"eventIndex":4}
,{"eventName":"Slide 6",
"eventIndex":5}
,{"eventName":"Slide 7",
"eventIndex":10}
,{"eventName":"Slide 8",
"eventIndex":11}
,{"eventName":"Slide 9",
"eventIndex":12}
,{"eventName":"Slide 10",
"eventIndex":13}
,{"eventName":"Slide 11",
"eventIndex":17}
,{"eventName":"Slide 12",
"eventIndex":18}
,{"eventName":"Slide 13",
"eventIndex":20}
,{"eventName":"Slide 14",
"eventIndex":21}
,{"eventName":"Slide 15",
"eventIndex":22}
,{"eventName":"Slide 16",
"eventIndex":23}
,{"eventName":"Slide 17",
"eventIndex":27}
,{"eventName":"Slide 18",
"eventIndex":36}
,{"eventName":"Slide 19",
"eventIndex":40}
,{"eventName":"Slide 20",
"eventIndex":41}
,{"eventName":"Slide 21",
"eventIndex":42}
,{"eventName":"Slide 22",
"eventIndex":46}
,{"eventName":"Slide 23",
"eventIndex":51}
,{"eventName":"Slide 24",
"eventIndex":54}
,{"eventName":"Slide 25",
"eventIndex":65}
,{"eventName":"Slide 26",
"eventIndex":66}
,{"eventName":"Slide 27",
"eventIndex":67}
]
,
"textures":{"s16.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.1.1.1.dynamic":{"url":"images-1/s17.1.1.1.dynamic.png",
"width":123,
"height":59}
,
"s17.6.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s17.6.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s24.7.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s11.b":{"url":"images-1/s11.b.jpeg",
"width":1024,
"height":768}
,
"s17.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s4.a":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s27.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s24.2.1.2.dynamic":{"url":"images-1/s24.2.1.2.dynamic.png",
"width":167,
"height":38}
,
"s20.b":{"url":"images-1/s20.b.jpeg",
"width":1024,
"height":768}
,
"s24.3.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s6.1.5.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s22.3.7.1.fixed":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s16.1.1.1.dynamic":{"url":"images-1/s16.1.1.1.dynamic.png",
"width":491,
"height":51}
,
"s4.b":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s17.8.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s10.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.10.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s17.7.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.3.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s17.6.1.1.dynamic":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s17.5.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s27.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.2.6.1.fixed":{"url":"images-1/s22.1.6.1.fixed.png",
"width":760,
"height":213}
,
"s10.3.4.1.fixed":{"url":"images-1/s10.1.4.1.fixed.png",
"width":555,
"height":103}
,
"s17.7.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s10.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s21.3.5.1.fixed":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s17.7.2.1.dynamic":{"url":"images-1/s17.7.2.1.dynamic.png",
"width":123,
"height":59}
,
"s21.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.4.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s16.a":{"url":"images-1/s16.a.jpeg",
"width":1024,
"height":768}
,
"s17.1.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s16.2.1.2.dynamic":{"url":"images-1/s16.2.1.2.dynamic.png",
"width":474,
"height":52}
,
"s18.3.1.2.dynamic":{"url":"images-1/s18.3.1.2.dynamic.png",
"width":760,
"height":51}
,
"s17.3.5.1.fixed":{"url":"images-1/s17.1.5.1.fixed.png",
"width":111,
"height":59}
,
"s17.7.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s10.3.1.1.dynamic":{"url":"images-1/s10.1.6.1.fixed.png",
"width":734,
"height":288}
,
"s10.2.3.1.fixed":{"url":"images-1/s10.1.3.1.fixed.png",
"width":800,
"height":82}
,
"s17.7.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s21.3.7.1.fixed":{"url":"images-1/s21.1.7.1.fixed.png",
"width":162,
"height":128}
,
"s17.6.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s22.1.5.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s24.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s21.2.4.1.fixed":{"url":"images-1/s21.1.4.1.fixed.png",
"width":526,
"height":53}
,
"s24.3.1.2.dynamic":{"url":"images-1/s24.3.1.2.dynamic.png",
"width":418,
"height":46}
,
"s2.a":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s16.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s21.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s25.a":{"url":"images-1/s24.b.jpeg",
"width":1024,
"height":768}
,
"thumbnail":{"url":"images-2/thumbnail.jpeg",
"width":458,
"height":344}
,
"s17.3.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s24.8.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s27.1.1.1.dynamic":{"url":"images-1/s27.1.1.1.dynamic.png",
"width":525,
"height":716}
,
"s17.2.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s17.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s16.3.3.1.fixed":{"url":"images-1/s16.1.3.1.fixed.png",
"width":921,
"height":100}
,
"s2.b":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s21.1.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s16.b":{"url":"images-1/s16.b.jpeg",
"width":1024,
"height":768}
,
"s17.2.6.1.fixed":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s24.7.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.1.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s25.b":{"url":"images-1/s25.b.jpeg",
"width":1024,
"height":768}
,
"s24.10.1.1.static":{"url":"images-1/s24.10.1.1.static.png",
"width":786,
"height":527}
,
"s16.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.2.3.1.fixed":{"url":"images-1/s6.1.1.1.dynamic.png",
"width":231,
"height":176}
,
"s24.7.4.1.fixed":{"url":"images-1/s24.6.1.1.static.png",
"width":786,
"height":385}
,
"s17.2.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s17.2.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s17.8.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s17.5.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s12.a":{"url":"images-1/s12.a.jpeg",
"width":1024,
"height":768}
,
"s24.6.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.8.5.1.fixed":{"url":"images-1/s17.5.2.1.dynamic.png",
"width":111,
"height":59}
,
"s24.6.1.1.static":{"url":"images-1/s24.6.1.1.static.png",
"width":786,
"height":385}
,
"s21.a":{"url":"images-1/s21.a.jpeg",
"width":1024,
"height":768}
,
"s10.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s22.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s24.2.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s6.3.3.1.fixed":{"url":"images-1/s6.1.1.1.dynamic.png",
"width":231,
"height":176}
,
"s22.4.1.1.dynamic":{"url":"images-1/s22.1.4.1.fixed.png",
"width":262,
"height":20}
,
"s22.2.7.1.fixed":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s17.8.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s10.3.5.1.fixed":{"url":"images-1/s10.1.5.1.fixed.png",
"width":483,
"height":34}
,
"s17.7.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s10.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s21.3.6.1.fixed":{"url":"images-1/s21.1.6.1.fixed.png",
"width":1045,
"height":429}
,
"s17.6.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.4.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.2.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s12.b":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s17.4.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.5.1.1.dynamic":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s10.3.7.1.fixed":{"url":"images-1/s10.1.1.1.dynamic.png",
"width":162,
"height":128}
,
"s22.1.6.1.fixed":{"url":"images-1/s22.1.6.1.fixed.png",
"width":760,
"height":213}
,
"s10.2.4.1.fixed":{"url":"images-1/s10.1.4.1.fixed.png",
"width":555,
"height":103}
,
"s21.b":{"url":"images-1/s21.b.jpeg",
"width":1024,
"height":768}
,
"s23.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.6.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s10.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.4.3.1.fixed":{"url":"images-1/s22.1.3.1.fixed.png",
"width":225,
"height":20}
,
"s21.2.5.1.fixed":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s24.8.4.2.fixed":{"url":"images-1/s24.6.1.2.dynamic.png",
"width":584,
"height":46}
,
"s9.a":{"url":"images-2/s8.b.jpeg",
"width":1024,
"height":768}
,
"s21.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.3.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s17.6.2.1.dynamic":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s12.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s17.3.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s17.2.5.1.fixed":{"url":"images-1/s17.1.5.1.fixed.png",
"width":111,
"height":59}
,
"s22.1.8.1.fixed":{"url":"images-1/s22.1.8.1.fixed.png",
"width":66,
"height":20}
,
"s24.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s10.2.1.1.dynamic":{"url":"images-1/s10.1.5.1.fixed.png",
"width":483,
"height":34}
,
"s10.1.3.1.fixed":{"url":"images-1/s10.1.3.1.fixed.png",
"width":800,
"height":82}
,
"s18.2.1.2.dynamic":{"url":"images-1/s18.2.1.2.dynamic.png",
"width":512,
"height":51}
,
"s24.8.4.1.fixed":{"url":"images-1/s24.6.1.1.static.png",
"width":786,
"height":385}
,
"s17.5.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.4.1.1.static":{"url":"images-1/s24.4.1.1.static.png",
"width":418,
"height":188}
,
"s9.b":{"url":"images-2/s9.b.jpeg",
"width":1024,
"height":768}
,
"s21.1.4.1.fixed":{"url":"images-1/s21.1.4.1.fixed.png",
"width":526,
"height":53}
,
"s16.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.2.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s24.7.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s17.1.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s6.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.10.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s17.a":{"url":"images-1/s17.a.jpeg",
"width":1024,
"height":768}
,
"s16.2.3.1.fixed":{"url":"images-1/s16.1.3.1.fixed.png",
"width":921,
"height":100}
,
"s17.1.6.1.fixed":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s26.a":{"url":"images-1/s25.b.jpeg",
"width":1024,
"height":768}
,
"s24.6.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.4.1.1.dynamic":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s17.8.6.1.fixed":{"url":"images-1/s17.7.2.1.dynamic.png",
"width":123,
"height":59}
,
"s6.4.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s16.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s21.2.1.1.dynamic":{"url":"images-1/s21.1.7.1.fixed.png",
"width":162,
"height":128}
,
"s27.1.3.1.fixed":{"url":"images-1/s27.1.3.1.fixed.png",
"width":669,
"height":303}
,
"s17.1.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s17.4.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s17.8.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s6.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s17.b":{"url":"images-1/s17.b.jpeg",
"width":1024,
"height":768}
,
"s7.a":{"url":"images-2/s6.b.jpeg",
"width":1024,
"height":768}
,
"s17.7.5.1.fixed":{"url":"images-1/s17.5.2.1.dynamic.png",
"width":111,
"height":59}
,
"s17.8.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s17.4.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s24.5.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.5.1.1.static":{"url":"images-1/s24.5.1.1.static.png",
"width":752,
"height":315}
,
"s22.4.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s26.b":{"url":"images-1/s26.b.jpeg",
"width":1024,
"height":768}
,
"s6.3.5.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s24.1.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s7.b":{"url":"images-2/s7.b.jpeg",
"width":1024,
"height":768}
,
"s23.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s22.3.1.1.dynamic":{"url":"images-1/s22.1.3.1.fixed.png",
"width":225,
"height":20}
,
"s17.6.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s10.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s16.3.1.1.static":{"url":"images-1/s16.3.1.1.static.png",
"width":491,
"height":135}
,
"s16.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s17.5.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s13.a":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s22.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.1.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s10.2.7.1.fixed":{"url":"images-1/s10.1.1.1.dynamic.png",
"width":162,
"height":128}
,
"s22.a":{"url":"images-1/s22.a.jpeg",
"width":1024,
"height":768}
,
"s23.2.4.1.fixed":{"url":"images-1/s23.1.4.1.fixed.png",
"width":1301,
"height":223}
,
"s6.4.5.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s10.1.4.1.fixed":{"url":"images-1/s10.1.4.1.fixed.png",
"width":555,
"height":103}
,
"s17.4.1.1.dynamic":{"url":"images-1/s17.1.5.1.fixed.png",
"width":111,
"height":59}
,
"s18.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.5.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s23.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.7.4.2.fixed":{"url":"images-1/s24.6.1.2.dynamic.png",
"width":584,
"height":46}
,
"s17.2.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s18.3.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s18.2.1.1.static":{"url":"images-1/s18.1.1.1.dynamic.png",
"width":461,
"height":54}
,
"s17.1.5.1.fixed":{"url":"images-1/s17.1.5.1.fixed.png",
"width":111,
"height":59}
,
"s17.5.2.1.dynamic":{"url":"images-1/s17.5.2.1.dynamic.png",
"width":111,
"height":59}
,
"s13.b":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s5.a":{"url":"images-1/s4.b.jpeg",
"width":1024,
"height":768}
,
"s21.1.7.1.fixed":{"url":"images-1/s21.1.7.1.fixed.png",
"width":162,
"height":128}
,
"s17.4.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s10.1.1.1.dynamic":{"url":"images-1/s10.1.1.1.dynamic.png",
"width":162,
"height":128}
,
"s24.3.1.1.static":{"url":"images-1/s24.3.1.1.static.png",
"width":167,
"height":109}
,
"s16.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.b":{"url":"images-1/s22.b.jpeg",
"width":1024,
"height":768}
,
"s17.1.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s24.6.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s5.b":{"url":"images-1/s5.b.jpeg",
"width":1024,
"height":768}
,
"s16.1.3.1.fixed":{"url":"images-1/s16.1.3.1.fixed.png",
"width":921,
"height":100}
,
"s24.10.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.6.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s27.1.4.1.fixed":{"url":"images-1/s27.1.4.1.fixed.png",
"width":104,
"height":104}
,
"s17.8.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.5.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.4.3.1.fixed":{"url":"images-1/s6.1.1.1.dynamic.png",
"width":231,
"height":176}
,
"s21.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s6.1.2.1.fixed":{"url":"images-1/s6.1.2.1.fixed.png",
"width":983,
"height":597}
,
"s17.3.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s18.a":{"url":"images-1/s18.a.jpeg",
"width":1024,
"height":768}
,
"s18.3.1.1.static":{"url":"images-1/s18.3.1.1.static.png",
"width":512,
"height":132}
,
"s21.1.1.1.dynamic":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s17.7.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s10.2.6.1.fixed":{"url":"images-1/s10.1.6.1.fixed.png",
"width":734,
"height":288}
,
"s17.7.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s17.6.5.1.fixed":{"url":"images-1/s17.5.2.1.dynamic.png",
"width":111,
"height":59}
,
"s22.4.5.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s23.2.3.1.fixed":{"url":"images-1/s23.1.3.1.fixed.png",
"width":240,
"height":100}
,
"s24.4.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.6.1.2.dynamic":{"url":"images-1/s24.6.1.2.dynamic.png",
"width":584,
"height":46}
,
"s22.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s3.a":{"url":"images-1/s2.b.jpeg",
"width":1024,
"height":768}
,
"s27.a":{"url":"images-1/s27.a.jpeg",
"width":1024,
"height":768}
,
"s12.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s21.2.2.1.dynamic":{"url":"images-1/s21.1.6.1.fixed.png",
"width":1045,
"height":429}
,
"s23.2.5.1.fixed":{"url":"images-1/s23.1.1.1.dynamic.png",
"width":774,
"height":42}
,
"s18.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s10.1.5.1.fixed":{"url":"images-1/s10.1.5.1.fixed.png",
"width":483,
"height":34}
,
"s17.6.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s6.2.2.1.fixed":{"url":"images-1/s6.1.2.1.fixed.png",
"width":983,
"height":597}
,
"s17.5.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s6.2.1.1.dynamic":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s16.2.1.1.static":{"url":"images-1/s16.1.1.1.dynamic.png",
"width":491,
"height":51}
,
"s21.1.6.1.fixed":{"url":"images-1/s21.1.6.1.fixed.png",
"width":1045,
"height":429}
,
"s3.b":{"url":"images-1/s3.b.jpeg",
"width":1024,
"height":768}
,
"s17.4.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.4.3.1.dynamic":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s18.b":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s22.2.1.1.dynamic":{"url":"images-1/s22.1.8.1.fixed.png",
"width":66,
"height":20}
,
"s22.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.3.4.1.fixed":{"url":"images-1/s22.1.4.1.fixed.png",
"width":262,
"height":20}
,
"s23.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.10.1.2.dynamic":{"url":"images-1/s24.10.1.2.dynamic.png",
"width":534,
"height":46}
,
"s23.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s23.1.4.1.fixed":{"url":"images-1/s23.1.4.1.fixed.png",
"width":1301,
"height":223}
,
"s17.5.6.1.fixed":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s18.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s27.b":{"url":"images-1/s27.b.png",
"width":1024,
"height":768}
,
"s17.4.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s22.2.3.1.fixed":{"url":"images-1/s22.1.3.1.fixed.png",
"width":225,
"height":20}
,
"s17.3.1.1.dynamic":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s6.1.6.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s17.1.12.1.fixed":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s18.2.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s14.a":{"url":"images-1/s13.b.jpeg",
"width":1024,
"height":768}
,
"s17.8.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s24.9.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.4.2.1.dynamic":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s17.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.2.1.1.static":{"url":"images-1/s24.1.1.1.dynamic.png",
"width":135,
"height":38}
,
"s23.a":{"url":"images-1/s23.a.jpeg",
"width":1024,
"height":768}
,
"s24.8.1.1.dynamic":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s6.2.6.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s1.a":{"url":"images-1/s1.a.jpeg",
"width":1024,
"height":768}
,
"s24.5.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s17.8.1.1.dynamic":{"url":"images-1/s17.1.12.1.fixed.png",
"width":55,
"height":59}
,
"s14.b":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s1.b":{"url":"images-1/s1.b.jpeg",
"width":1024,
"height":768}
,
"s24.5.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s17.7.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.4.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s22.4.6.1.fixed":{"url":"images-1/s22.1.6.1.fixed.png",
"width":760,
"height":213}
,
"s23.b":{"url":"images-1/s23.b.jpeg",
"width":1024,
"height":768}
,
"s6.1.4.1.fixed":{"url":"images-2/s6.1.4.1.fixed.png",
"width":583,
"height":187}
,
"s12.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.2.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s17.6.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s10.1.6.1.fixed":{"url":"images-1/s10.1.6.1.fixed.png",
"width":734,
"height":288}
,
"s10.a":{"url":"images-1/s10.a.jpeg",
"width":1024,
"height":768}
,
"s22.4.8.1.fixed":{"url":"images-1/s22.1.8.1.fixed.png",
"width":66,
"height":20}
,
"s17.6.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s23.1.3.1.fixed":{"url":"images-1/s23.1.3.1.fixed.png",
"width":240,
"height":100}
,
"s22.3.5.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s23.1.1.1.dynamic":{"url":"images-1/s23.1.1.1.dynamic.png",
"width":774,
"height":42}
,
"s24.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.5.1.2.dynamic":{"url":"images-1/s24.5.1.2.dynamic.png",
"width":786,
"height":46}
,
"s22.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.8.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s12.1.4.1.fixed":{"url":"images-1/s12.1.4.1.fixed.png",
"width":465,
"height":85}
,
"s18.background":{"url":"images-1/s6.background.jpeg",
"width":1024,
"height":768}
,
"s17.2.2.1.dynamic":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s21.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s6.2.4.1.fixed":{"url":"images-2/s6.1.4.1.fixed.png",
"width":583,
"height":187}
,
"s18.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.5.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s17.4.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s22.2.4.1.fixed":{"url":"images-1/s22.1.4.1.fixed.png",
"width":262,
"height":20}
,
"s19.a":{"url":"images-1/s18.b.jpeg",
"width":1024,
"height":768}
,
"s17.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.10.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s22.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.1.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s17.3.3.1.dynamic":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s10.b":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s21.3.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s22.1.1.1.dynamic":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s17.4.6.1.fixed":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s18.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s24.9.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.3.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s22.1.3.1.fixed":{"url":"images-1/s22.1.3.1.fixed.png",
"width":225,
"height":20}
,
"s17.2.1.1.dynamic":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s8.a":{"url":"images-2/s7.b.jpeg",
"width":1024,
"height":768}
,
"s18.1.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s19.b":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
,
"s17.7.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s24.8.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s17.2.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.3.2.1.dynamic":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.7.1.1.dynamic":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s6.4.4.1.fixed":{"url":"images-2/s6.1.4.1.fixed.png",
"width":583,
"height":187}
,
"s8.b":{"url":"images-2/s8.b.jpeg",
"width":1024,
"height":768}
,
"s24.4.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s22.4.7.1.fixed":{"url":"images-1/s21.1.1.1.dynamic.png",
"width":890,
"height":53}
,
"s15.a":{"url":"images-1/s14.b.jpeg",
"width":1024,
"height":768}
,
"s17.7.1.1.dynamic":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s17.8.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s12.1.3.1.fixed":{"url":"images-1/s12.1.3.1.fixed.png",
"width":885,
"height":19240}
,
"s24.4.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s17.6.9.1.fixed":{"url":"images-1/s17.1.9.1.fixed.png",
"width":148,
"height":59}
,
"s24.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.a":{"url":"images-1/s24.a.jpeg",
"width":1024,
"height":768}
,
"s22.3.6.1.fixed":{"url":"images-1/s22.1.6.1.fixed.png",
"width":760,
"height":213}
,
"s17.8.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s10.3.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s6.3.2.1.fixed":{"url":"images-1/s6.1.2.1.fixed.png",
"width":983,
"height":597}
,
"s17.1.13.1.fixed":{"url":"images-1/s17.1.13.1.fixed.png",
"width":841,
"height":59}
,
"s16.3.1.2.dynamic":{"url":"images-1/s16.3.1.2.dynamic.png",
"width":470,
"height":51}
,
"s17.5.8.1.fixed":{"url":"images-1/s17.2.1.1.dynamic.png",
"width":123,
"height":59}
,
"s21.3.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s22.3.8.1.fixed":{"url":"images-1/s22.1.8.1.fixed.png",
"width":66,
"height":20}
,
"s17.5.11.1.fixed":{"url":"images-1/s17.1.11.1.fixed.png",
"width":43,
"height":59}
,
"s6.a":{"url":"images-2/s6.a.jpeg",
"width":1024,
"height":768}
,
"s15.b":{"url":"images-1/s15.b.jpeg",
"width":1024,
"height":768}
,
"s17.5.10.1.fixed":{"url":"images-1/s17.1.10.1.fixed.png",
"width":43,
"height":59}
,
"s22.2.5.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s10.3.3.1.fixed":{"url":"images-1/s10.1.3.1.fixed.png",
"width":800,
"height":82}
,
"s24.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s22.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s17.7.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s24.4.1.2.dynamic":{"url":"images-1/s24.4.1.2.dynamic.png",
"width":752,
"height":102}
,
"s24.9.1.1.static":{"url":"images-1/s24.9.1.1.static.png",
"width":786,
"height":456}
,
"s21.3.4.1.fixed":{"url":"images-1/s21.1.4.1.fixed.png",
"width":526,
"height":53}
,
"s24.b":{"url":"images-1/s24.b.jpeg",
"width":1024,
"height":768}
,
"s21.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s6.4.2.1.fixed":{"url":"images-1/s6.1.2.1.fixed.png",
"width":983,
"height":597}
,
"s18.1.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.b":{"url":"images-2/s6.b.jpeg",
"width":1024,
"height":768}
,
"s17.4.7.1.fixed":{"url":"images-1/s17.1.7.1.fixed.png",
"width":153,
"height":59}
,
"s6.1.1.1.dynamic":{"url":"images-1/s6.1.1.1.dynamic.png",
"width":231,
"height":176}
,
"s17.3.4.1.fixed":{"url":"images-1/s17.1.4.1.fixed.png",
"width":938,
"height":659}
,
"s24.9.3.1.fixed":{"url":"images-1/s24.1.3.1.fixed.png",
"width":566,
"height":85}
,
"s22.1.4.1.fixed":{"url":"images-1/s22.1.4.1.fixed.png",
"width":262,
"height":20}
,
"s17.2.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s6.1.1.1.fixed":{"url":"images-1/s6.1.1.1.fixed.png",
"width":1205,
"height":942}
,
"s18.1.1.1.dynamic":{"url":"images-1/s18.1.1.1.dynamic.png",
"width":461,
"height":54}
,
"s11.a":{"url":"images-1/s10.b.jpeg",
"width":1024,
"height":768}
,
"s6.3.1.1.dynamic":{"url":"images-2/s6.1.4.1.fixed.png",
"width":583,
"height":187}
,
"s21.2.3.1.fixed":{"url":"images-1/s18.1.3.1.fixed.png",
"width":192,
"height":82}
,
"s24.9.5.1.fixed":{"url":"images-1/s24.1.5.1.fixed.png",
"width":950,
"height":877}
,
"s24.1.1.1.dynamic":{"url":"images-1/s24.1.1.1.dynamic.png",
"width":135,
"height":38}
,
"s17.3.6.1.fixed":{"url":"images-1/s17.1.6.1.fixed.png",
"width":123,
"height":59}
,
"s20.a":{"url":"images-1/s19.b.jpeg",
"width":1024,
"height":768}
,
"s24.8.2.1.fixed":{"url":"images-1/s10.1.2.1.fixed.png",
"width":1016,
"height":756}
,
"s6.3.6.1.fixed":{"url":"images-2/s6.1.5.1.fixed.png",
"width":180,
"height":118}
,
"s17.2.3.1.fixed":{"url":"images-1/s17.1.3.1.fixed.png",
"width":428,
"height":100}
,
"s24.9.1.2.dynamic":{"url":"images-1/s24.9.1.2.dynamic.png",
"width":582,
"height":46}
}
,
"slideWidth":1024,
"minorVersion":4,
"timestamp":"2012-03-18 01:27:05",
"title":"Parsing Horrible Things",
"eventTimelines":[{"note":"slide-1",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s1.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s1.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s1.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":10.57697,
"width":646.1412,
"x":19.62286,
"height":746.6098}
,
"text":"\nParsing  [[Horrible]]  Things\nor\n\n“I accidentally the Chomsky hierarchy”\n\n\nErik Rose\n"}
]
}
,{"note":"slide-2",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s2.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s2.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s2.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":195.5148,
"width":1038.86,
"x":0.1940308,
"height":366.8083}
,
"text":""}
]
}
,{"note":"slide-3",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s3.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s3.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s3.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":195.5148,
"width":1038.86,
"x":0.1940308,
"height":366.8083}
,
"text":""}
]
}
,{"note":"slide-4",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s4.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s4.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s4.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
]
}
,{"note":"slide-5",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s5.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s5.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s5.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":"Parsing\nis\nEverywhere"}
]
}
,{"note":"slide-6",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s6.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,21,85]
,
"texture":"s6.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,74,218]
,
"texture":"s6.1.1.1.dynamic",
"canvasObjectID":2,
"hidden":1}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,346,211]
,
"texture":"s6.1.4.1.fixed",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,116,418]
,
"texture":"s6.1.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,716,418]
,
"texture":"s6.1.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dropbuild",
"actions":[{"beginTime":0,
"from":{"scalar":-394}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":-295.5}
,
"timingFunction":"linear",
"duration":0.085}
,{"beginTime":0.085,
"from":{"scalar":-295.5}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":-0}
,
"timingFunction":"linear",
"duration":0.085}
,{"beginTime":0.17,
"from":{"scalar":-0}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":-49.07778167724609}
,
"timingFunction":"linear",
"duration":0.08499999}
,{"beginTime":0.255,
"from":{"scalar":-49.07778167724609}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":-65.43704223632812}
,
"timingFunction":"linear",
"duration":0.08499998}
,{"beginTime":0.34,
"from":{"scalar":-65.43704223632812}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":-49.07778167724609}
,
"timingFunction":"linear",
"duration":0.08500001}
,{"beginTime":0.425,
"from":{"scalar":-49.07778167724609}
,
"action":"transform.translation.y",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.08500001}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildIn",
"beginTime":0,
"textures":["s6.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
]
}
,{"note":"slide-6",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s6.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,21,85]
,
"texture":"s6.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,74,218]
,
"texture":"s6.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,346,211]
,
"texture":"s6.2.4.1.fixed",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,116,418]
,
"texture":"s6.2.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,716,418]
,
"texture":"s6.2.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s6.2.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s6.2.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
]
}
,{"note":"slide-6",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s6.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,21,85]
,
"texture":"s6.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,74,218]
,
"texture":"s6.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,346,211]
,
"texture":"s6.3.1.1.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,116,418]
,
"texture":"s6.3.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,716,418]
,
"texture":"s6.3.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s6.3.1.1.dynamic",
"timingFunction":"easeInEaseOut",
"duration":3.01,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.3.1.1.dynamic",
"timingFunction":"linear",
"duration":3.01,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":3.01,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 249.7811, "width": 600.8524 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 350.04688, 189.67117 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s6.3.1.1.dynamic"]
,
"effect":"apple:wipe",
"duration":3.01}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
]
}
,{"note":"slide-6",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s6.4.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,21,85]
,
"texture":"s6.4.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,74,218]
,
"texture":"s6.4.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,346,211]
,
"texture":"s6.4.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,116,418]
,
"texture":"s6.4.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,716,418]
,
"texture":"s6.4.1.1.dynamic",
"canvasObjectID":5,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s6.4.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":2.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s6.4.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":2.01}
]
,
"duration":2.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s6.4.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
]
}
,{"note":"slide-6",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s6.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s6.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s6.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
]
}
,{"note":"slide-7",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s7.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s7.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s7.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
,{"targetRectangle":{"y":297.0422,
"width":310.323,
"x":350.0469,
"height":8.811951}
,
"text":""}
,{"targetRectangle":{"y":210.8517,
"width":277.7115,
"x":372.0432,
"height":83.86775}
,
"text":"♩♫♫♩"}
]
}
,{"note":"slide-8",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s8.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s8.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s8.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":101.6558,
"width":982.1625,
"x":21.61536,
"height":561.7064}
,
"text":""}
,{"targetRectangle":{"y":297.0422,
"width":310.323,
"x":350.0469,
"height":8.811951}
,
"text":""}
]
}
,{"note":"slide-9",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s9.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s9.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s9.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Python in EBNF"}
,{"targetRectangle":{"y":140,
"width":937,
"x":51.5,
"height":554}
,
"text":"decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE\rdecorators: decorator+\rdecorated: decorators (classdef | funcdef)\rfuncdef: 'def' NAME parameters ':' suite\rparameters: '(' [varargslist] ')'\rvarargslist: ((fpdef ['=' test] ',')*\r              ('*' NAME [',' '**' NAME] | '**' NAME) |\r              fpdef ['=' test] (',' fpdef ['=' test])* [','])\rfpdef: NAME | '(' fplist ')'\rfplist: fpdef (',' fpdef)* [',']\r\rstmt: simple_stmt | compound_stmt\rsimple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE\rsmall_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt |\n             flow_stmt | import_stmt | global_stmt | exec_stmt |\n             assert_stmt)\rexpr_stmt: testlist (augassign (yield_expr|testlist) |\r                     ('=' (yield_expr|testlist))*)\raugassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |\r            '<<=' | '>>=' | '**=' | '//=')\r"}
]
}
,{"note":"slide-10",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s10.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s10.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,114,-7]
,
"texture":"s10.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,235,146]
,
"texture":"s10.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,279,341]
,
"texture":"s10.1.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,154,421]
,
"texture":"s10.1.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,76,171]
,
"texture":"s10.1.1.1.dynamic",
"canvasObjectID":6,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:move in",
"actions":[{"beginTime":0,
"from":{"scalar":-238}
,
"action":"transform.translation.x",
"texture":"s10.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.76}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.translation.y",
"texture":"s10.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.76}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.76}
]
,
"duration":0.76,
"animationType":"buildIn",
"beginTime":0,
"textures":["s10.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"EBNF to Parse Tree"}
,{"targetRectangle":{"y":140,
"width":937,
"x":230.5,
"height":112}
,
"text":"BOLD_TAG:     \"<b>\"\rEND_BOLD_TAG: \"</b>\"\rtext:         [a-zA-Z ]+\rbold_text:    BOLD_TAG text END_BOLD_TAG"}
]
}
,{"note":"slide-10",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s10.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s10.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,114,-7]
,
"texture":"s10.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,235,146]
,
"texture":"s10.2.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,279,341]
,
"texture":"s10.2.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,154,421]
,
"texture":"s10.2.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,76,171]
,
"texture":"s10.2.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s10.2.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s10.2.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"EBNF to Parse Tree"}
,{"targetRectangle":{"y":140,
"width":937,
"x":230.5,
"height":112}
,
"text":"BOLD_TAG:     \"<b>\"\rEND_BOLD_TAG: \"</b>\"\rtext:         [a-zA-Z ]+\rbold_text:    BOLD_TAG text END_BOLD_TAG"}
,{"targetRectangle":{"y":183,
"width":135,
"x":87,
"height":100}
,
"text":""}
]
}
,{"note":"slide-10",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s10.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s10.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,114,-7]
,
"texture":"s10.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,235,146]
,
"texture":"s10.3.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,279,341]
,
"texture":"s10.3.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,154,421]
,
"texture":"s10.3.1.1.dynamic",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,76,171]
,
"texture":"s10.3.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s10.3.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s10.3.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s10.3.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"EBNF to Parse Tree"}
,{"targetRectangle":{"y":140,
"width":937,
"x":230.5,
"height":112}
,
"text":"BOLD_TAG:     \"<b>\"\rEND_BOLD_TAG: \"</b>\"\rtext:         [a-zA-Z ]+\rbold_text:    BOLD_TAG text END_BOLD_TAG"}
,{"targetRectangle":{"y":330,
"width":937,
"x":51.5,
"height":48}
,
"text":"<b>Here is some bold text</b>"}
,{"targetRectangle":{"y":183,
"width":135,
"x":87,
"height":100}
,
"text":""}
]
}
,{"note":"slide-10",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s10.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s10.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s10.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"EBNF to Parse Tree"}
,{"targetRectangle":{"y":140,
"width":937,
"x":230.5,
"height":112}
,
"text":"BOLD_TAG:     \"<b>\"\rEND_BOLD_TAG: \"</b>\"\rtext:         [a-zA-Z ]+\rbold_text:    BOLD_TAG text END_BOLD_TAG"}
,{"targetRectangle":{"y":330,
"width":937,
"x":51.5,
"height":48}
,
"text":"<b>Here is some bold text</b>"}
,{"targetRectangle":{"y":183,
"width":135,
"x":87,
"height":100}
,
"text":""}
]
}
,{"note":"slide-11",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s11.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s11.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s11.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-116,
"width":937,
"x":43.51855,
"height":200}
,
"text":"MediaWiki\nMediaWiki"}
,{"targetRectangle":{"y":100,
"width":944,
"x":56.5,
"height":608}
,
"text":"_charRefsPat = re.compile(ur'''(&([A-Za-z0-9]+);|&#([0-9]+);|&#[xX]([0-9A-Za-z]+);|(&))''', re.UNICODE)\n_cssCommentPat = re.compile(ur'''\\*.*?\\*''', re.UNICODE)\n_toUTFPat = re.compile(ur'''\\\\([0-9A-Fa-f]{1,6})[\\s]?''', re.UNICODE)\n_hackPat = re.compile(ur'''(expression|tps*://|url\\s*\\().*''', re.UNICODE | re.IGNORECASE)\n_hrPat = re.compile(u'''^-----*''', re.UNICODE | re.MULTILINE)\n_h1Pat = re.compile(u'^=(.+)=\\s*$', re.UNICODE | re.MULTILINE)\n_h2Pat = re.compile(u'^==(.+)==\\s*$', re.UNICODE | re.MULTILINE)\n_h3Pat = re.compile(u'^===(.+)===\\s*$', re.UNICODE | re.MULTILINE)\n_h4Pat = re.compile(u'^====(.+)====\\s*$', re.UNICODE | re.MULTILINE)\n_h5Pat = re.compile(u'^=====(.+)=====\\s*$', re.UNICODE | re.MULTILINE)\n_h6Pat = re.compile(u'^======(.+)======\\s*$', re.UNICODE | re.MULTILINE)\n_quotePat = re.compile(u\"\"\"(''+)\"\"\", re.UNICODE)\n_removePat = re.compile(ur'\\b(' + ur'|'.join((u\"a\", u\"an\", u\"as\", u\"at\", u\"before\", u\"but\", u\"by\", u\"for\", u\"from\",\n                            u\"is\", u\"in\", u\"into\", u\"like\", u\"of\", u\"off\", u\"on\", u\"onto\", u\"per\",\n                            u\"since\", u\"than\", u\"the\", u\"this\", u\"that\", u\"to\", u\"up\", u\"via\",\n                            u\"with\")) + ur')\\b', re.UNICODE | re.IGNORECASE)\n_nonWordSpaceDashPat = re.compile(ur'[^\\w\\s\\-\\./]', re.UNICODE)\n_multiSpacePat = re.compile(ur'[\\s\\-_\\./]+', re.UNICODE)\n_spacePat = re.compile(ur' ', re.UNICODE)\n_linkPat = re.compile(ur'^(?:([A-Za-z0-9]+):)?([^\\|]+)(?:\\|([^\\n]+?))?\\]\\](.*)$', re.UNICODE | re.DOTALL)\n_bracketedLinkPat = re.compile(ur'(?:\\[((?:mailto:|git://|irc://|https?://|ftp://|/)[^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']*)\\s*(.*?)\\])', re.UNICODE)\n_internalLinkPat = re.compile(ur'\\[\\[(?:(:?[^:\\]]*?):\\s*)?(.*?)\\]\\]')\n_protocolPat = re.compile(ur'(\\b(?:mailto:|irc://|https?://|ftp://))', re.UNICODE)\n_specialUrlPat = re.compile(ur'^([^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']+)(.*)$', re.UNICODE)\n_protocolsPat = re.compile(ur'^(mailto:|irc://|https?://|ftp://)$', re.UNICODE)\n_controlCharsPat = re.compile(ur'[\\]\\[<>\"' + u\"\\\\x00-\\\\x20\\\\x7F\" + ur']]', re.UNICODE)\n_hostnamePat = re.compile(ur'^([^:]+:)(//[^/]+)?(.*)$', re.UNICODE)\n_stripPat = re.compile(u'\\\\s|\\u00ad|\\u1806|\\u200b|\\u2060|\\ufeff|\\u03f4|\\u034f|\\u180b|\\u180c|\\u180d|\\u200c|\\u200d|[\\ufe00-\\ufe0f]', re.UNICODE)\n_zomgPat = re.compile(ur'^(:*)\\{\\|(.*)$', re.UNICODE)\n_headerPat = re.compile(ur\"<[Hh]([1-6])(.*?)>(.*?)</[Hh][1-6] *>\", re.UNICODE)\n_templateSectionPat = re.compile(ur\"<!--MWTEMPLATESECTION=([^&]+)&([^_]+)-->\", re.UNICODE)\n_tagPat = re.compile(ur\"<.*?>\", re.UNICODE)\n_startRegexHash = {}\n_endRegexHash = {}\n_endCommentPat = re.compile(ur'(-->)', re.UNICODE)\n_extractTagsAndParams_n = 1\n_guillemetLeftPat = re.compile(ur'(.) (\\?|:|;|!|\\302\\273)', re.UNICODE)\n_guillemetRightPat = re.compile(ur'(\\302\\253) ', re.UNICODE)"}
]
}
,{"note":"slide-12",
"automaticPlay":1,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s12.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s12.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,53,79]
,
"texture":"s12.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,282,-10]
,
"texture":"s12.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"emphasisType":"translationEmphasis",
"beginTime":0,
"actions":[{"action":"translationEmphasis",
"to":{"translationEmphasis":[2,-18576,0]
}
,
"duration":10,
"timingFunction":"easeInEaseOut",
"beginTime":0,
"from":{"translationEmphasis":[0,0,0]
}
}
]
,
"animationType":"actionBuild",
"effect":"apple:emphasis-motion-path",
"canvasObjectID":2,
"duration":10}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":76,
"width":889.8003,
"x":51,
"height":19296}
,
"text":"# coding: latin1\n\"\"\"\nMediaWiki-style markup\n\nCopyright (C) 2008 David Cramer <dcramer@gmail.com>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport re, random, locale\nfrom base64 import b64encode, b64decode\n\nimport bleach\n\n# a few patterns we use later\n\nMW_COLON_STATE_TEXT = 0\nMW_COLON_STATE_TAG = 1\nMW_COLON_STATE_TAGSTART = 2\nMW_COLON_STATE_CLOSETAG = 3\nMW_COLON_STATE_TAGSLASH = 4\nMW_COLON_STATE_COMMENT = 5\nMW_COLON_STATE_COMMENTDASH = 6\nMW_COLON_STATE_COMMENTDASHDASH = 7\n\n_attributePat = re.compile(ur'''(?:^|\\s)([A-Za-z0-9]+)(?:\\s*=\\s*(?:\\\"([^<\\\"]*)\\\"|\\'([^<\\']*)\\'|([a-zA-Z0-9!#$%&()*,\\-./:;<>?@\\[\\]^_{|}~]+)|#([0-9a-fA-F]+)))''', re.UNICODE)\n_space = re.compile(ur'\\s+', re.UNICODE)\n_closePrePat = re.compile(u\"</pre\", re.UNICODE | re.IGNORECASE)\n_openPrePat = re.compile(u\"<pre\", re.UNICODE | re.IGNORECASE)\n_openMatchPat = re.compile(u\"(<table|<blockquote|<h1|<h2|<h3|<h4|<h5|<h6|<pre|<tr|<p|<ul|<ol|<li|</center|</tr|</td|</th)\", re.UNICODE | re.IGNORECASE)\n_tagPattern = re.compile(ur'^(/?)(\\w+)([^>]*?)(/?>)([^<]*)$', re.UNICODE)\n\n_htmlpairs = ( # Tags that must be closed\n    u'b', u'del', u'i', u'ins', u'u', u'font', u'big', u'small', u'sub',\n    u'sup', u'h1', u'h2', u'h3', u'h4', u'h5', u'h6', u'cite', u'code',\n    u'em', u's', u'strike', u'strong', u'tt', u'var', u'div', u'center',\n    u'blockquote', u'ol', u'ul', u'dl', u'table', u'caption', u'pre',\n    u'p', u'span', u'u', u'li', u'dd', u'dt', u'video', u'section', u'noscript'\n)\n_htmlsingle = (  # Elements that cannot have close tags\n    u'br', u'hr', u'img', u'source',\n)\n_htmlnest = ( # Tags that can be nested--??\n    u'table', u'tr', u'td', u'th', u'div', u'blockquote', u'ol', u'ul',\n    u'dl', u'font', u'big', u'small', u'sub', u'sup', u'span', u'img',\n    u'tbody', u'thead', u'tfoot', u'colgroup', u'col', u'section',\n)\n_tabletags = ( # Can only appear inside table\n    u'td', u'th', u'tr', u'tbody', u'thead', u'tfoot', u'colgroup', u'col',\n)\n_htmllist = ( # Tags used by list\n    u'ul', u'ol',\n)\n_listtags = ( # Tags that can appear in a list\n    u'li',\n)\n_htmlsingleallowed = _htmlsingle + _tabletags\n_htmlelements = _htmlsingle + _htmlpairs + _htmlnest\n\n_htmlEntities = {\n    u'Aacute': 193,    u'aacute': 225, u'Acirc': 194, u'acirc': 226, u'acute': 180,\n    u'AElig': 198, u'aelig': 230, u'Agrave': 192, u'agrave': 224, u'alefsym': 8501,\n    u'Alpha': 913, u'alpha': 945, u'amp': 38, u'and': 8743, u'ang': 8736, u'Aring': 197,\n    u'aring':      229,\n    u'asymp':      8776,\n    u'Atilde':     195,\n    u'atilde':     227,\n    u'Auml':       196,\n    u'auml':       228,\n    u'bdquo':      8222,\n    u'Beta':       914,\n    u'beta':       946,\n    u'brvbar':     166,\n    u'bull':       8226,\n    u'cap':        8745,\n    u'Ccedil':     199,\n    u'ccedil':     231,\n    u'cedil':      184,\n    u'cent':       162,\n    u'Chi':        935,\n    u'chi':        967,\n    u'circ':       710,\n    u'clubs':      9827,\n    u'cong':       8773,\n    u'copy':       169,\n    u'crarr':      8629,\n    u'cup':        8746,\n    u'curren':     164,\n    u'dagger':     8224,\n    u'Dagger':     8225,\n    u'darr':       8595,\n    u'dArr':       8659,\n    u'deg':        176,\n    u'Delta':      916,\n    u'delta':      948,\n    u'diams':      9830,\n    u'divide':     247,\n    u'Eacute':     201,\n    u'eacute':     233,\n    u'Ecirc':      202,\n    u'ecirc':      234,\n    u'Egrave':     200,\n    u'egrave':     232,\n    u'empty':      8709,\n    u'emsp':       8195,\n    u'ensp':       8194,\n    u'Epsilon':    917,\n    u'epsilon':    949,\n    u'equiv':      8801,\n    u'Eta':        919,\n    u'eta':        951,\n    u'ETH':        208,\n    u'eth':        240,\n    u'Euml':       203,\n    u'euml':       235,\n    u'euro':       8364,\n    u'exist':      8707,\n    u'fnof':       402,\n    u'forall':     8704,\n    u'frac12':     189,\n    u'frac14':     188,\n    u'frac34':     190,\n    u'frasl':      8260,\n    u'Gamma':      915,\n    u'gamma':      947,\n    u'ge':         8805,\n    u'gt':         62,\n    u'harr':       8596,\n    u'hArr':       8660,\n    u'hearts':     9829,\n    u'hellip':     8230,\n    u'Iacute':     205,\n    u'iacute':     237,\n    u'Icirc':      206,\n    u'icirc':      238,\n    u'iexcl':      161,\n    u'Igrave':     204,\n    u'igrave':     236,\n    u'image':      8465,\n    u'infin':      8734,\n    u'int':        8747,\n    u'Iota':       921,\n    u'iota':       953,\n    u'iquest':     191,\n    u'isin':       8712,\n    u'Iuml':       207,\n    u'iuml':       239,\n    u'Kappa':      922,\n    u'kappa':      954,\n    u'Lambda':     923,\n    u'lambda':     955,\n    u'lang':       9001,\n    u'laquo':      171,\n    u'larr':       8592,\n    u'lArr':       8656,\n    u'lceil':      8968,\n    u'ldquo':      8220,\n    u'le':         8804,\n    u'lfloor':     8970,\n    u'lowast':     8727,\n    u'loz':        9674,\n    u'lrm':        8206,\n    u'lsaquo':     8249,\n    u'lsquo':      8216,\n    u'lt':         60,\n    u'macr':       175,\n    u'mdash':      8212,\n    u'micro':      181,\n    u'middot':     183,\n    u'minus':      8722,\n    u'Mu':         924,\n    u'mu':         956,\n    u'nabla':      8711,\n    u'nbsp':       160,\n    u'ndash':      8211,\n    u'ne':         8800,\n    u'ni':         8715,\n    u'not':        172,\n    u'notin':      8713,\n    u'nsub':       8836,\n    u'Ntilde':     209,\n    u'ntilde':     241,\n    u'Nu':         925,\n    u'nu':         957,\n    u'Oacute':     211,\n    u'oacute':     243,\n    u'Ocirc':      212,\n    u'ocirc':      244,\n    u'OElig':      338,\n    u'oelig':      339,\n    u'Ograve':     210,\n    u'ograve':     242,\n    u'oline':      8254,\n    u'Omega':      937,\n    u'omega':      969,\n    u'Omicron':    927,\n    u'omicron':    959,\n    u'oplus':      8853,\n    u'or':         8744,\n    u'ordf':       170,\n    u'ordm':       186,\n    u'Oslash':     216,\n    u'oslash':     248,\n    u'Otilde':     213,\n    u'otilde':     245,\n    u'otimes':     8855,\n    u'Ouml':       214,\n    u'ouml':       246,\n    u'para':       182,\n    u'part':       8706,\n    u'permil':     8240,\n    u'perp':       8869,\n    u'Phi':        934,\n    u'phi':        966,\n    u'Pi':         928,\n    u'pi':         960,\n    u'piv':        982,\n    u'plusmn':     177,\n    u'pound':      163,\n    u'prime':      8242,\n    u'Prime':      8243,\n    u'prod':       8719,\n    u'prop':       8733,\n    u'Psi':        936,\n    u'psi':        968,\n    u'quot':       34,\n    u'radic':      8730,\n    u'rang':       9002,\n    u'raquo':      187,\n    u'rarr':       8594,\n    u'rArr':       8658,\n    u'rceil':      8969,\n    u'rdquo':      8221,\n    u'real':       8476,\n    u'reg':        174,\n    u'rfloor':     8971,\n    u'Rho':        929,\n    u'rho':        961,\n    u'rlm':        8207,\n    u'rsaquo':     8250,\n    u'rsquo':      8217,\n    u'sbquo':      8218,\n    u'Scaron':     352,\n    u'scaron':     353,\n    u'sdot':       8901,\n    u'sect':       167,\n    u'shy':        173,\n    u'Sigma':      931,\n    u'sigma':      963,\n    u'sigmaf':     962,\n    u'sim':        8764,\n    u'spades':     9824,\n    u'sub':        8834,\n    u'sube':       8838,\n    u'sum':        8721,\n    u'sup':        8835,\n    u'sup1':       185,\n    u'sup2':       178,\n    u'sup3':       179,\n    u'supe':       8839,\n    u'szlig':      223,\n    u'Tau':        932,\n    u'tau':        964,\n    u'there4':     8756,\n    u'Theta':      920,\n    u'theta':      952,\n    u'thetasym':   977,\n    u'thinsp':     8201,\n    u'THORN':      222,\n    u'thorn':      254,\n    u'tilde':      732,\n    u'times':      215,\n    u'trade':      8482,\n    u'Uacute':     218,\n    u'uacute':     250,\n    u'uarr':       8593,\n    u'uArr':       8657,\n    u'Ucirc':      219,\n    u'ucirc':      251,\n    u'Ugrave':     217,\n    u'ugrave':     249,\n    u'uml':        168,\n    u'upsih':      978,\n    u'Upsilon':    933,\n    u'upsilon':    965,\n    u'Uuml':       220,\n    u'uuml':       252,\n    u'weierp':     8472,\n    u'Xi':         926,\n    u'xi':         958,\n    u'Yacute':     221,\n    u'yacute':     253,\n    u'yen':        165,\n    u'Yuml':       376,\n    u'yuml':       255,\n    u'Zeta':       918,\n    u'zeta':       950,\n    u'zwj':        8205,\n    u'zwnj':       8204\n}\n\n_charRefsPat = re.compile(ur'''(&([A-Za-z0-9]+);|&#([0-9]+);|&#[xX]([0-9A-Za-z]+);|(&))''', re.UNICODE)\n_cssCommentPat = re.compile(ur'''\\*.*?\\*''', re.UNICODE)\n_toUTFPat = re.compile(ur'''\\\\([0-9A-Fa-f]{1,6})[\\s]?''', re.UNICODE)\n_hackPat = re.compile(ur'''(expression|tps*://|url\\s*\\().*''', re.UNICODE | re.IGNORECASE)\n_hrPat = re.compile(u'''^-----*''', re.UNICODE | re.MULTILINE)\n_h1Pat = re.compile(u'^=(.+)=\\s*$', re.UNICODE | re.MULTILINE)\n_h2Pat = re.compile(u'^==(.+)==\\s*$', re.UNICODE | re.MULTILINE)\n_h3Pat = re.compile(u'^===(.+)===\\s*$', re.UNICODE | re.MULTILINE)\n_h4Pat = re.compile(u'^====(.+)====\\s*$', re.UNICODE | re.MULTILINE)\n_h5Pat = re.compile(u'^=====(.+)=====\\s*$', re.UNICODE | re.MULTILINE)\n_h6Pat = re.compile(u'^======(.+)======\\s*$', re.UNICODE | re.MULTILINE)\n_quotePat = re.compile(u\"\"\"(''+)\"\"\", re.UNICODE)\n_removePat = re.compile(ur'\\b(' + ur'|'.join((u\"a\", u\"an\", u\"as\", u\"at\", u\"before\", u\"but\", u\"by\", u\"for\", u\"from\",\n                            u\"is\", u\"in\", u\"into\", u\"like\", u\"of\", u\"off\", u\"on\", u\"onto\", u\"per\",\n                            u\"since\", u\"than\", u\"the\", u\"this\", u\"that\", u\"to\", u\"up\", u\"via\",\n                            u\"with\")) + ur')\\b', re.UNICODE | re.IGNORECASE)\n_nonWordSpaceDashPat = re.compile(ur'[^\\w\\s\\-\\./]', re.UNICODE)\n_multiSpacePat = re.compile(ur'[\\s\\-_\\./]+', re.UNICODE)\n_spacePat = re.compile(ur' ', re.UNICODE)\n_linkPat = re.compile(ur'^(?:([A-Za-z0-9]+):)?([^\\|]+)(?:\\|([^\\n]+?))?\\]\\](.*)$', re.UNICODE | re.DOTALL)\n_bracketedLinkPat = re.compile(ur'(?:\\[((?:mailto:|git://|irc://|https?://|ftp://|/)[^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']*)\\s*(.*?)\\])', re.UNICODE)\n_internalLinkPat = re.compile(ur'\\[\\[(?:(:?[^:\\]]*?):\\s*)?(.*?)\\]\\]')\n_protocolPat = re.compile(ur'(\\b(?:mailto:|irc://|https?://|ftp://))', re.UNICODE)\n_specialUrlPat = re.compile(ur'^([^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']+)(.*)$', re.UNICODE)\n_protocolsPat = re.compile(ur'^(mailto:|irc://|https?://|ftp://)$', re.UNICODE)\n_controlCharsPat = re.compile(ur'[\\]\\[<>\"' + u\"\\\\x00-\\\\x20\\\\x7F\" + ur']]', re.UNICODE)\n_hostnamePat = re.compile(ur'^([^:]+:)(//[^/]+)?(.*)$', re.UNICODE)\n_stripPat = re.compile(u'\\\\s|\\u00ad|\\u1806|\\u200b|\\u2060|\\ufeff|\\u03f4|\\u034f|\\u180b|\\u180c|\\u180d|\\u200c|\\u200d|[\\ufe00-\\ufe0f]', re.UNICODE)\n_zomgPat = re.compile(ur'^(:*)\\{\\|(.*)$', re.UNICODE)\n_headerPat = re.compile(ur\"<[Hh]([1-6])(.*?)>(.*?)</[Hh][1-6] *>\", re.UNICODE)\n_templateSectionPat = re.compile(ur\"<!--MWTEMPLATESECTION=([^&]+)&([^_]+)-->\", re.UNICODE)\n_tagPat = re.compile(ur\"<.*?>\", re.UNICODE)\n_startRegexHash = {}\n_endRegexHash = {}\n_endCommentPat = re.compile(ur'(-->)', re.UNICODE)\n_extractTagsAndParams_n = 1\n_guillemetLeftPat = re.compile(ur'(.) (\\?|:|;|!|\\302\\273)', re.UNICODE)\n_guillemetRightPat = re.compile(ur'(\\302\\253) ', re.UNICODE)\n\ndef setupAttributeWhitelist():\n    common = ( u'id', u'class', u'lang', u'dir', u'title', u'style' )\n    block = common + (u'align',)\n    tablealign = ( u'align', u'char', u'charoff', u'valign' )\n    tablecell = ( u'abbr',\n                    u'axis',\n                    u'headers',\n                    u'scope',\n                    u'rowspan',\n                    u'colspan',\n                    u'nowrap', # deprecated\n                    u'width',  # deprecated\n                    u'height', # deprecated\n                    u'bgcolor' # deprecated\n                    )\n    return {\n        u'div':            block,\n        u'center':        common, # deprecated\n        u'span':        block, # ??\n        u'h1':            block,\n        u'h2':            block,\n        u'h3':            block,\n        u'h4':            block,\n        u'h5':            block,\n        u'h6':            block,\n        u'em':            common,\n        u'strong':        common,\n        u'cite':        common,\n        u'code':        common,\n        u'var':            common,\n        u'img':            common + (u'src', u'alt', u'width', u'height',),\n        u'blockquote':    common + (u'cite',),\n        u'sub':            common,\n        u'sup':            common,\n        u'p':            block,\n        u'br':            (u'id', u'class', u'title', u'style', u'clear',),\n        u'pre':            common + (u'width',),\n        u'ins':            common + (u'cite', u'datetime'),\n        u'del':            common + (u'cite', u'datetime'),\n        u'ul':            common + (u'type',),\n        u'ol':            common + (u'type', u'start'),\n        u'li':            common + (u'type', u'value'),\n        u'dl':            common,\n        u'dd':            common,\n        u'dt':            common,\n        u'table':        common + ( u'summary', u'width', u'border', u'frame',\n                                    u'rules', u'cellspacing', u'cellpadding',\n                                    u'align', u'bgcolor',\n                            ),\n        u'caption':        common + (u'align',),\n        u'thead':        common + tablealign,\n        u'tfoot':        common + tablealign,\n        u'tbody':        common + tablealign,\n        u'colgroup':    common + ( u'span', u'width' ) + tablealign,\n        u'col':            common + ( u'span', u'width' ) + tablealign,\n        u'tr':            common + ( u'bgcolor', ) + tablealign,\n        u'td':            common + tablecell + tablealign,\n        u'th':            common + tablecell + tablealign,\n        u'tt':            common,\n        u'b':            common,\n        u'i':            common,\n        u'big':            common,\n        u'small':        common,\n        u'strike':        common,\n        u's':            common,\n        u'u':            common,\n        u'font':        common + ( u'size', u'color', u'face' ),\n        u'hr':            common + ( u'noshade', u'size', u'width' ),\n        u'video':       common + ( u'width', u'height', u'controls' ),\n        u'source':       common + ( u'src', u'type' ),\n    }\n_whitelist = setupAttributeWhitelist()\n_page_cache = {}\n#env = {}\n\n# Used for bleach, list of allowed tags\nALLOWED_TAGS = list(_htmlelements + ('a',))\n\nALLOWED_ATTRIBUTES = {\n    'a': ['href', 'title', 'rel'],\n    'div': ['id'],\n    'h1': ['id'],\n    'h2': ['id'],\n    'h3': ['id'],\n    'h4': ['id'],\n    'h5': ['id'],\n    'h6': ['id'],\n    'li': ['class'],\n    'span': ['class'],\n}\n\n\nclass BaseParser(object):\n    def __init__(self):\n        self.uniq_prefix = u\"\\x07UNIQ\" + unicode(random.randint(1, 1000000000))\n        self.strip_state = {}\n        self.arg_stack = []\n    #    self.env = env\n    #    self.keep_env = (env != {})\n        # tag hooks\n        self.tagHooks = {}\n        # [[internal link]] hooks\n        self.internalLinkHooks = {}\n\n    #def __del__(self):\n    #    if not self.keep_env:\n    #        global env\n    #        env = {}\n\n    def registerTagHook(self, tag, function):\n        self.tagHooks[tag] = function\n\n    def registerInternalLinkHook(self, tag, function):\n        \"\"\"\n        Register a hook called for [[internal links]].  There is no default\n        handling for internal links.\n\n        def internalLinkHook(parser_env, namespace, body):\n        ...\n        return replacement\n\n        parser.registerInternalLinkHook(None, internalLinkHook)  # called for [[link]]\n        parser.registerInternalLinkHook('Wikipedia', internalLinkHook)  # called for [[Wikipedia:link]]\n        parser.registerInternalLinkHook(':en', internalLinkHook)  # called for [[:en:link]]\n        parser.registerInternalLinkHook(':', internalLinkHook)  # called for [[:any:link]] not hooked above\n        parser.registerInternalLinkHook('*', internalLinkHook)  # called for [[anything]] not hooked above\n        \"\"\"\n        self.internalLinkHooks[tag] = function\n\n    #def store_object(self, namespace, key, value=True):\n    #    \"\"\"\n    #    Used to store objects in the environment\n    #    which assists in preventing recursive imports.\n    #    \"\"\"\n    #    # Store the item to not reprocess it\n    #    if namespace not in self.env:\n    #        self.env[namespace] = {}\n    #    self.env[namespace][key] = value\n\n    #def has_object(self, namespace, key):\n    #    if namespace not in self.env:\n    #        self.env[namespace] = {}\n    #    if hasattr(self, 'count'):\n    #        data = self.env[namespace]\n    #        test = key in data\n    #        ls\n    #        self.count = True\n    #    return key in self.env[namespace]\n\n    #def retrieve_object(self, namespace, key, default=None):\n    #    if not self.env.get(namespace):\n    #        self.env[namespace] = {}\n    #    return self.env[namespace].get(key, default)\n\n    def parse(self, text):\n        utf8 = isinstance(text, str)\n        text = to_unicode(text)\n        if text[-1:] != u'\\n':\n            text = text + u'\\n'\n            taggedNewline = True\n        else:\n            taggedNewline = False\n\n        text = self.strip(text)\n        text = self.removeHtmlTags(text)\n        text = self.parseHorizontalRule(text)\n        text = self.parseAllQuotes(text)\n        text = self.replaceExternalLinks(text)\n        text = self.replaceInternalLinks(text)\n        text = self.unstrip(text)\n        text = self.fixtags(text)\n        text = self.doBlockLevels(text, True)\n        text = self.unstripNoWiki(text)\n        text = text.split(u'\\n')\n        text = u'\\n'.join(text)\n        if taggedNewline and text[-1:] == u'\\n':\n            text = text[:-1]\n        if utf8:\n            return text.encode(\"utf-8\")\n        return text\n\n    def strip(self, text, stripcomments=False, dontstrip=[]):\n        render = True\n\n        commentState = {}\n\n        elements = ['nowiki',]  + self.tagHooks.keys()\n        if True: #wgRawHtml\n            elements.append('html')\n\n        # Removing $dontstrip tags from $elements list (currently only 'gallery', fixing bug 2700)\n        for k in dontstrip:\n            if k in elements:\n                del elements[k]\n\n        matches = {}\n        text = self.extractTagsAndParams(elements, text, matches)\n\n        for marker in matches:\n            element, content, params, tag = matches[marker]\n            if render:\n                tagName = element.lower()\n                if tagName == u'!--':\n                    # comment\n                    output = tag\n                    if tag[-3:] != u'-->':\n                        output += \"-->\"\n                elif tagName == u'html':\n                    output = content\n                elif tagName == u'nowiki':\n                    output = content.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n                else:\n                    if tagName in self.tagHooks:\n                        output = self.tagHooks[tagName](self, content, params)\n                    else:\n                        output = content.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n            else:\n                # Just stripping tags; keep the source\n                output = tag\n\n            # Unstrip the output, because unstrip() is no longer recursive so\n            # it won't do it itself\n            output = self.unstrip(output)\n\n            if not stripcomments and element == u'!--':\n                commentState[marker] = output\n            elif element == u'html' or element == u'nowiki':\n                if 'nowiki' not in self.strip_state:\n                    self.strip_state['nowiki'] = {}\n                self.strip_state['nowiki'][marker] = output\n            else:\n                if 'general' not in self.strip_state:\n                    self.strip_state['general'] = {}\n                self.strip_state['general'][marker] = output\n\n        # Unstrip comments unless explicitly told otherwise.\n        # (The comments are always stripped prior to this point, so as to\n        # not invoke any extension tags / parser hooks contained within\n        # a comment.)\n        if not stripcomments:\n            # Put them all back and forget them\n            for k in commentState:\n                v = commentState[k]\n                text = text.replace(k, v)\n\n        return text\n\n    def removeHtmlTags(self, text):\n        \"\"\"convert bad tags into HTML identities\"\"\"\n        sb = []\n        bits = text.split(u'<')\n        sb.append(bits.pop(0))\n        tagstack = []\n        tablestack = tagstack\n        for x in bits:\n            m = _tagPattern.match(x)\n            if not m:\n                #  If it isn't a tag, leave it in place and move on\n                sb.append(u'<%s' % x)\n                continue\n            slash, t, params, brace, rest = m.groups()\n            t = t.lower()\n            badtag = False\n            if t in _htmlelements:\n                # Check our stack\n                if slash:\n                    # Closing a tag...\n                    if t in _htmlsingle or len(tagstack) == 0:\n                        badtag = True\n                    else:\n                        ot = tagstack.pop()\n                        if ot != t:\n                            if ot in _htmlsingleallowed:\n                                # Pop all elements with an optional close tag\n                                # and see if we find a match below them\n                                optstack = []\n                                optstack.append(ot)\n                                while True:\n                                    if len(tagstack) == 0:\n                                        break\n                                    ot = tagstack.pop()\n                                    if ot == t or ot not in _htmlsingleallowed:\n                                        break\n                                    optstack.append(ot)\n                                if t != ot:\n                                    # No match. Push the optinal elements back again\n                                    badtag = True\n                                    tagstack += reversed(optstack)\n                            else:\n                                tagstack.append(ot)\n                                # <li> can be nested in <ul> or <ol>, skip those cases:\n                                if ot not in _htmllist and t in _listtags:\n                                    badtag = True\n                        elif t == u'table':\n                            if len(tablestack) == 0:\n                                bagtag = True\n                            else:\n                                tagstack = tablestack.pop()\n                    newparams = u''\n                else:\n                    # Keep track for later\n                    if t in _tabletags and u'table' not in tagstack:\n                        badtag = True\n                    elif t in tagstack and t not in _htmlnest:\n                        badtag = True\n                    # Is it a self-closed htmlpair? (bug 5487)\n                    elif brace == u'/>' and t in _htmlpairs:\n                        badTag = True\n                    elif t in _htmlsingle:\n                        # Hack to force empty tag for uncloseable elements\n                        brace = u'/>'\n                    else:\n                        if t == u'table':\n                            tablestack.append(tagstack)\n                            tagstack = []\n                        tagstack.append(t)\n                    newparams = self.fixTagAttributes(params, t)\n                if not badtag:\n                    rest = rest.replace(u'>', u'&gt;')\n                    if brace == u'/>':\n                        close = u' /'\n                    else:\n                        close = u''\n                    sb.append(u'<')\n                    sb.append(slash)\n                    sb.append(t)\n                    sb.append(newparams)\n                    sb.append(close)\n                    sb.append(u'>')\n                    sb.append(rest)\n                    continue\n            sb.append(u'&lt;')\n            sb.append(x.replace(u'>', u'&gt;'))\n\n        # Close off any remaining tags\n        while tagstack:\n            t = tagstack.pop()\n            sb.append(u'</')\n            sb.append(t)\n            sb.append(u'>\\n')\n            if t == u'table':\n                if not tablestack:\n                    break\n                tagstack = tablestack.pop()\n\n        return u''.join(sb)\n\n    def removeHtmlComments(self, text):\n        \"\"\"remove <!-- text --> comments from given text\"\"\"\n        sb = []\n        start = text.find(u'<!--')\n        last = 0\n        while start != -1:\n            end = text.find(u'-->', start)\n            if end == -1:\n                break\n            end += 3\n\n            spaceStart = max(0, start-1)\n            spaceEnd = end\n            while text[spaceStart] == u' ' and spaceStart > 0:\n                spaceStart -= 1\n            while text[spaceEnd] == u' ':\n                spaceEnd += 1\n\n            if text[spaceStart] == u'\\n' and text[spaceEnd] == u'\\n':\n                sb.append(text[last:spaceStart])\n                sb.append(u'\\n')\n                last = spaceEnd+1\n            else:\n                sb.append(text[last:spaceStart+1])\n                last = spaceEnd\n\n            start = text.find(u'<!--', end)\n        sb.append(text[last:])\n        return u''.join(sb)\n\n    def decodeTagAttributes(self, text):\n        \"\"\"docstring for decodeTagAttributes\"\"\"\n        attribs = {}\n        if text.strip() == u'':\n            return attribs\n        scanner = _attributePat.scanner(text)\n        match = scanner.search()\n        while match:\n            key, val1, val2, val3, val4 = match.groups()\n            value = val1 or val2 or val3 or val4\n            if value:\n                value = _space.sub(u' ', value).strip()\n            else:\n                value = ''\n            attribs[key] = self.decodeCharReferences(value)\n\n            match = scanner.search()\n        return attribs\n\n    def validateTagAttributes(self, attribs, element):\n        \"\"\"docstring for validateTagAttributes\"\"\"\n        out = {}\n        if element not in _whitelist:\n            return out\n        whitelist = _whitelist[element]\n        for attribute in attribs:\n            value = attribs[attribute]\n            if attribute not in whitelist:\n                continue\n            # Strip javascript \"expression\" from stylesheets.\n            # http://msdn.microsoft.com/workshop/author/dhtml/overview/recalc.asp\n            if attribute == u'style':\n                value = self.checkCss(value)\n                if value == False:\n                    continue\n            elif attribute == u'id':\n                value = self.escapeId(value)\n            # If this attribute was previously set, override it.\n            # Output should only have one attribute of each name.\n            out[attribute] = value\n        return out\n\n    def safeEncodeAttribute(self, encValue):\n        \"\"\"docstring for safeEncodeAttribute\"\"\"\n        encValue = encValue.replace(u'&', u'&amp;')\n        encValue = encValue.replace(u'<', u'&lt;')\n        encValue = encValue.replace(u'>', u'&gt;')\n        encValue = encValue.replace(u'\"', u'&quot;')\n        encValue = encValue.replace(u'{', u'&#123;')\n        encValue = encValue.replace(u'[', u'&#91;')\n        encValue = encValue.replace(u\"''\", u'&#39;&#39;')\n        encValue = encValue.replace(u'ISBN', u'&#73;SBN')\n        encValue = encValue.replace(u'RFC', u'&#82;FC')\n        encValue = encValue.replace(u'PMID', u'&#80;MID')\n        encValue = encValue.replace(u'|', u'&#124;')\n        encValue = encValue.replace(u'__', u'&#95;_')\n        encValue = encValue.replace(u'\\n', u'&#10;')\n        encValue = encValue.replace(u'\\r', u'&#13;')\n        encValue = encValue.replace(u'\\t', u'&#9;')\n        return encValue\n\n    def fixTagAttributes(self, text, element):\n        if text.strip() == u'':\n            return u''\n\n        stripped = self.validateTagAttributes(self.decodeTagAttributes(text), element)\n\n        sb = []\n\n        for attribute in stripped:\n            value = stripped[attribute]\n            encAttribute = attribute.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n            encValue = self.safeEncodeAttribute(value)\n\n            sb.append(u' ')\n            sb.append(encAttribute)\n            sb.append(u'=\"')\n            sb.append(encValue)\n            sb.append(u'\"')\n\n        return u''.join(sb)\n\n    def validateCodepoint(self, codepoint):\n        return codepoint ==    0x09 \\\n            or codepoint ==    0x0a \\\n            or codepoint ==    0x0d \\\n            or (codepoint >=    0x20 and codepoint <=   0xd7ff) \\\n            or (codepoint >=  0xe000 and codepoint <=   0xfffd) \\\n            or (codepoint >= 0x10000 and codepoint <= 0x10ffff)\n\n    def _normalizeCallback(self, match):\n        text, norm, dec, hexval, _ = match.groups()\n        if norm:\n            sb = []\n            sb.append(u'&')\n            if norm not in _htmlEntities:\n                sb.append(u'amp;')\n            sb.append(norm)\n            sb.append(u';')\n            return u''.join(sb)\n        elif dec:\n            dec = int(dec)\n            if self.validateCodepoint(dec):\n                sb = []\n                sb.append(u'&#')\n                sb.append(dec)\n                sb.append(u';')\n                return u''.join(sb)\n        elif hexval:\n            hexval = int(hexval, 16)\n            if self.validateCodepoint(hexval):\n                sb = []\n                sb.append(u'&#x')\n                sb.append(hex(hexval))\n                sb.append(u';')\n                return u''.join(sb)\n        return text.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n\n    def normalizeCharReferences(self, text):\n        \"\"\"docstring for normalizeCharReferences\"\"\"\n        return _charRefsPat.sub(self._normalizeCallback, text)\n\n    def _decodeCallback(self, match):\n        text, norm, dec, hexval, _ = match.groups()\n        if norm:\n            if norm in _htmlEntities:\n                return unichr(_htmlEntities[norm])\n            else:\n                sb = []\n                sb.append(u'&')\n                sb.append(norm)\n                sb.append(u';')\n                return u''.join(sb)\n        elif dec:\n            dec = int(dec)\n            if self.validateCodepoint(dec):\n                return unichr(dec)\n            return u'?'\n        elif hexval:\n            hexval = int(hexval, 16)\n            if self.validateCodepoint(dec):\n                return unichr(dec)\n            return u'?'\n        return text\n\n    def decodeCharReferences(self, text):\n        \"\"\"docstring for decodeCharReferences\"\"\"\n        if text:\n            return _charRefsPat.sub(self._decodeCallback, text)\n        return ''\n\n    def _convertToUtf8(self, s):\n        return unichr(int(s.group(1), 16))\n\n    def checkCss(self, value):\n        \"\"\"docstring for checkCss\"\"\"\n        stripped = self.decodeCharReferences(value)\n\n        stripped = _cssCommentPat.sub(u'', stripped)\n        value = stripped\n\n        stripped = _toUTFPat.sub(self._convertToUtf8, stripped)\n        stripped.replace(u'\\\\', u'')\n        if _hackPat.search(stripped):\n            # someone is haxx0ring\n            return False\n\n        return value\n\n    def escapeId(self, value):\n        \"\"\"docstring for escapeId\"\"\"\n        # TODO\n        return safe_name(value)\n\n    def parseHorizontalRule(self, text):\n        return _hrPat.sub(ur'<hr />', text)\n\n    def parseHeaders(self, text):\n        text = _h6Pat.sub(ur'<h6>\\1</h6>', text)\n        text = _h5Pat.sub(ur'<h5>\\1</h5>', text)\n        text = _h4Pat.sub(ur'<h4>\\1</h4>', text)\n        text = _h3Pat.sub(ur'<h3>\\1</h3>', text)\n        text = _h2Pat.sub(ur'<h2>\\1</h2>', text)\n        text = _h1Pat.sub(ur'<h1>\\1</h1>', text)\n        return text\n\n    def parseQuotes(self, text):\n        arr = _quotePat.split(text)\n        if len(arr) == 1:\n            return text\n        # First, do some preliminary work. This may shift some apostrophes from\n        # being mark-up to being text. It also counts the number of occurrences\n        # of bold and italics mark-ups.\n        numBold = 0\n        numItalics = 0\n        for i,r in zip(range(len(arr)), arr):\n            if i%2 == 1:\n                l = len(r)\n                if l == 4:\n                    arr[i-1] += u\"'\"\n                    arr[i] = u\"'''\"\n                elif l > 5:\n                    arr[i-1] += u\"'\" * (len(arr[i]) - 5)\n                    arr[i] = u\"'''''\"\n                if l == 2:\n                    numItalics += 1\n                elif l >= 5:\n                    numItalics += 1\n                    numBold += 1\n                else:\n                    numBold += 1\n\n        # If there is an odd number of both bold and italics, it is likely\n        # that one of the bold ones was meant to be an apostrophe followed\n        # by italics. Which one we cannot know for certain, but it is more\n        # likely to be one that has a single-letter word before it.\n        if numBold%2 == 1 and numItalics%2 == 1:\n            firstSingleLetterWord = -1\n            firstMultiLetterWord = -1\n            firstSpace = -1\n            for i,r in zip(range(len(arr)), arr):\n                if i%2 == 1 and len(r) == 3:\n                    x1 = arr[i-1][-1:]\n                    x2 = arr[i-1][-2:-1]\n                    if x1 == u' ':\n                        if firstSpace == -1:\n                            firstSpace = i\n                    elif x2 == u' ':\n                        if firstSingleLetterWord == -1:\n                            firstSingleLetterWord = i\n                    else:\n                        if firstMultiLetterWord == -1:\n                            firstMultiLetterWord = i\n\n            # If there is a single-letter word, use it!\n            if firstSingleLetterWord > -1:\n                arr[firstSingleLetterWord] = u\"''\"\n                arr[firstSingleLetterWord-1] += u\"'\"\n            # If not, but there's a multi-letter word, use that one.\n            elif firstMultiLetterWord > -1:\n                arr[firstMultiLetterWord] = u\"''\"\n                arr[firstMultiLetterWord-1] += u\"'\"\n            # ... otherwise use the first one that has neither.\n            # (notice that it is possible for all three to be -1 if, for example,\n            # there is only one pentuple-apostrophe in the line)\n            elif firstSpace > -1:\n                arr[firstSpace] = u\"''\"\n                arr[firstSpace-1] += u\"'\"\n\n        # Now let's actually convert our apostrophic mush to HTML!\n        output = []\n        buffer = None\n        state = ''\n        for i,r in zip(range(len(arr)), arr):\n            if i%2 == 0:\n                if state == 'both':\n                    buffer.append(r)\n                else:\n                    output.append(r)\n            else:\n                if len(r) == 2:\n                    if state == 'i':\n                        output.append(u\"</em>\")\n                        state = ''\n                    elif state == 'bi':\n                        output.append(u\"</em>\")\n                        state = 'b'\n                    elif state == 'ib':\n                        output.append(u\"</strong></em><strong>\")\n                        state = 'b'\n                    elif state == 'both':\n                        output.append(u\"<strong><em>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</em>\")\n                        state = 'b'\n                    elif state == 'b':\n                        output.append(u\"<em>\")\n                        state = 'bi'\n                    else: # ''\n                        output.append(u\"<em>\")\n                        state = 'i'\n                elif len(r) == 3:\n                    if state == 'b':\n                        output.append(u\"</strong>\")\n                        state = ''\n                    elif state == 'bi':\n                        output.append(u\"</em></strong><em>\")\n                        state = 'i'\n                    elif state == 'ib':\n                        output.append(u\"</strong>\")\n                        state = 'i'\n                    elif state == 'both':\n                        output.append(u\"<em><strong>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</strong>\")\n                        state = 'i'\n                    elif state == 'i':\n                        output.append(u\"<strong>\")\n                        state = 'ib'\n                    else: # ''\n                        output.append(u\"<strong>\")\n                        state = 'b'\n                elif len(r) == 5:\n                    if state == 'b':\n                        output.append(u\"</strong><em>\")\n                        state = 'i'\n                    elif state == 'i':\n                        output.append(u\"</em><strong>\")\n                        state = 'b'\n                    elif state == 'bi':\n                        output.append(u\"</em></strong>\")\n                        state = ''\n                    elif state == 'ib':\n                        output.append(u\"</strong></em>\")\n                        state = ''\n                    elif state == 'both':\n                        output.append(u\"<em><strong>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</strong></em>\")\n                        state = ''\n                    else: # ''\n                        buffer = []\n                        state = 'both'\n\n        if state == 'both':\n            output.append(u\"<em><strong>\")\n            output.append(u''.join(buffer))\n            buffer = None\n            output.append(u\"</strong></em>\")\n        elif state != '':\n            if state == 'b' or state == 'ib':\n                output.append(u\"</strong>\")\n            if state == 'i' or state == 'bi' or state == 'ib':\n                output.append(u\"</em>\")\n            if state == 'bi':\n                output.append(u\"</strong>\")\n        return u''.join(output)\n\n    def parseAllQuotes(self, text):\n        sb = []\n        lines = text.split(u'\\n')\n        first = True\n        for line in lines:\n            if not first:\n                sb.append(u'\\n')\n            else:\n                first = False\n            sb.append(self.parseQuotes(line))\n        return u''.join(sb)\n\n    def replaceExternalLinks(self, text):\n        sb = []\n        bits = _bracketedLinkPat.split(text)\n        l = len(bits)\n        i = 0\n        num_links = 0\n        while i < l:\n            if i%3 == 0:\n                #sb.append(self.replaceFreeExternalLinks(bits[i]))\n                sb.append(bits[i])\n                i += 1\n            else:\n                sb.append(u'<a href=\"')\n                sb.append(bits[i])\n                sb.append(u'\">')\n                if not bits[i+1]:\n                    num_links += 1\n                    sb.append(to_unicode(truncate_url(bits[i])))\n                else:\n                    sb.append(bits[i+1])\n                sb.append(u'</a>')\n                i += 2\n        return ''.join(sb)\n\n    def replaceInternalLinks(self, text):\n        sb = []\n        # [[x]] -> (None, 'x')\n        # [[type:x]] -> ('type','x')\n        # [[:type:x]] -> (':type','x')\n        bits = _internalLinkPat.split(text)\n        l = len(bits)\n        i = 0\n        num_links = 0\n        while i < l:\n            if i%3 == 0:\n                sb.append(bits[i])\n                i += 1\n            else:\n                space, name = bits[i:i+2]\n                if space in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks[space](\n                        self, space, name))\n                elif space and space.startswith(':') and \\\n                     ':' in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks[':'](self, space, name))\n                elif '*' in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks['*'](self, space, name))\n                elif bits[i]:\n                    sb.append(u'[[%s:%s]]' % (bits[i], bits[i+1]))\n                else:\n                    sb.append(u'[[%s]]' % bits[i+1])\n                i += 2\n        return ''.join(sb)\n\n    # TODO: fix this so it actually works\n    def replaceFreeExternalLinks(self, text):\n        bits = _protocolPat.split(text)\n        sb = [bits.pop(0)]\n        i = 0\n        l = len(bits)\n        while i < l:\n            protocol = bits[i]\n            remainder = bits[i+1]\n            i += 2\n            match = _specialUrlPat.match(remainder)\n            if match:\n                # Found some characters after the protocol that look promising\n                url = protocol + match.group(1)\n                trail = match.group(2)\n\n                # special case: handle urls as url args:\n                # http://www.example.com/foo?=http://www.example.com/bar\n                if len(trail) == 0 and len(bits) > i and _protocolsPat.match(bits[i]):\n                    match = _specialUrlPat.match(remainder)\n                    if match:\n                        url += bits[i] + match.group(1)\n                        i += 2\n                        trail = match.group(2)\n\n                # The characters '<' and '>' (which were escaped by\n                # removeHTMLtags()) should not be included in\n                # URLs, per RFC 2396.\n                pos = max(url.find('&lt;'), url.find('&gt;'))\n                if pos != -1:\n                    trail = url[pos:] + trail\n                    url = url[0:pos]\n\n                sep = ',;.:!?'\n                if '(' not in url:\n                    sep += ')'\n\n                i = len(url)-1\n                while i >= 0:\n                    char = url[i]\n                    if char not in sep:\n                        break\n                    i -= 1\n                i += 1\n\n                if i != len(url):\n                    trail = url[i:] + trail\n                    url = url[0:i]\n\n                url = cleanURL(url)\n\n                sb.append(u'<a href=\"')\n                sb.append(url)\n                sb.append(u'\">')\n                sb.append(truncate_url(url))\n                sb.append(u'</a>')\n                #sb.append(text)\n                sb.append(trail)\n            else:\n                sb.append(protocol)\n                sb.append(remainder)\n        return ''.join(sb)\n\n    def urlencode(self, char):\n        num = ord(char)\n        if num == 32:\n            return '+'\n        return \"%%%02x\" % num\n\n    def cleanURL(self, url):\n        # Normalize any HTML entities in input. They will be\n        # re-escaped by makeExternalLink().\n        url = self.decodeCharReferences(url)\n\n        # Escape any control characters introduced by the above step\n        url = _controlCharsPat.sub(self.urlencode, url)\n\n        # Validate hostname portion\n        match = _hostnamePat.match(url)\n        if match:\n            protocol, host, rest = match.groups()\n\n            # Characters that will be ignored in IDNs.\n            # http://tools.ietf.org/html/3454#section-3.1\n            # Strip them before further processing so blacklists and such work.\n\n            _stripPat.sub('', host)\n\n            # @fixme: validate hostnames here\n\n            return protocol + host + rest\n        else:\n            return url\n\n    def unstripForHTML(self, text):\n        text = self.unstrip(text)\n        text = self.unstripNoWiki(text)\n        return text\n\n    def unstrip(self, text):\n        if 'general' not in self.strip_state:\n            return text\n\n        general = self.strip_state['general']\n        for k in general:\n            v = general[k]\n            text = text.replace(k, v)\n        return text\n\n    def unstripNoWiki(self, text):\n        if 'nowiki' not in self.strip_state:\n            return text\n        nowiki = self.strip_state['nowiki']\n        for k in nowiki:\n            v = nowiki[k]\n            text = text.replace(k, v)\n        return text\n\n    def extractTagsAndParams(self, elements, text, matches):\n        \"\"\"\n        Replaces all occurrences of HTML-style comments and the given tags\n        in the text with a random marker and returns teh next text. The output\n        parameter $matches will be an associative array filled with data in\n        the form:\n          'UNIQ-xxxxx' => array(\n          'element',\n          'tag content',\n          array( 'param' => 'x' ),\n          '<element param=\"x\">tag content</element>' ) )\n        \"\"\"\n        stripped = u''\n\n        taglist = u'|'.join(elements)\n        if taglist not in _startRegexHash:\n            _startRegexHash[taglist] = re.compile(ur\"<(\" + taglist + ur\")(\\s+[^>]*?|\\s*?)(/?>)|<(!--)\", re.UNICODE | re.IGNORECASE)\n        start = _startRegexHash[taglist]\n\n        while text != u'':\n            p = start.split(text, 1)\n            stripped += p[0]\n            if len(p) == 1:\n                break\n            elif p[4]:\n                # comment\n                element = p[4]\n                attributes = u''\n                close = u''\n            else:\n                element = p[1]\n                attributes = p[2]\n                close = p[3]\n            inside = p[5]\n\n            global _extractTagsAndParams_n\n            marker = self.uniq_prefix + u'-' + element + u'-' + (u\"%08X\" % _extractTagsAndParams_n) + u'-QINU'\n            _extractTagsAndParams_n += 1\n            stripped += marker\n\n            if close == u'/>':\n                # empty element tag, <tag />\n                content = None\n                text = inside\n                tail = None\n            else:\n                if element == u'!--':\n                    end = _endCommentPat\n                else:\n                    if element not in _endRegexHash:\n                        _endRegexHash[element] = re.compile(ur'(</' + element + ur'\\s*>)', re.UNICODE | re.IGNORECASE)\n                    end = _endRegexHash[element]\n                q = end.split(inside, 1)\n                content = q[0]\n                if len(q) < 3:\n                    # no end tag\n                    tail = ''\n                    text = ''\n                else:\n                    tail = q[1]\n                    text = q[2]\n\n            matches[marker] = (\n                element,\n                content,\n                self.decodeTagAttributes(attributes),\n                u\"<\" + element + attributes + close + content + tail\n            )\n        return stripped\n\n    def fixtags(self, text):\n        \"\"\"Clean up special characters, only run once, next-to-last before doBlockLevels\"\"\"\n        # french spaces, last one Guillemet-left\n        # only if there is something before the space\n        text = _guillemetLeftPat.sub(ur'\\1&nbsp;\\2', text)\n        # french spaces, Guillemet-right\n        text = _guillemetRightPat.sub(ur'\\1&nbsp;', text)\n        return text\n\n    def closeParagraph(self, mLastSection):\n        \"\"\"Used by doBlockLevels()\"\"\"\n        result = u''\n        if mLastSection != u'':\n            result = u'</' + mLastSection + u'>\\n'\n\n        return result\n\n    def getCommon(self, st1, st2):\n        \"\"\"\n        getCommon() returns the length of the longest common substring\n        of both arguments, starting at the beginning of both.\n        \"\"\"\n        fl = len(st1)\n        shorter = len(st2)\n        if fl < shorter:\n            shorter = fl\n\n        i = 0\n        while i < shorter:\n            if st1[i] != st2[i]:\n                break\n            i += 1\n        return i\n\n    def openList(self, char, mLastSection):\n        \"\"\"\n        These next three functions open, continue, and close the list\n        element appropriate to the prefix character passed into them.\n        \"\"\"\n        result = self.closeParagraph(mLastSection)\n\n        mDTopen = False\n        if char == u'*':\n            result += u'<ul><li>'\n        elif char == u'#':\n            result += u'<ol><li>'\n        elif char == u':':\n            result += u'<dl><dd>'\n        elif char == u';':\n            result += u'<dl><dt>'\n            mDTopen = True\n        else:\n            result += u'<!-- ERR 1 -->'\n\n        return result, mDTopen\n\n    def nextItem(self, char, mDTopen):\n        if char == u'*' or char == '#':\n            return u'</li><li>', None\n        elif char == u':' or char == u';':\n            close = u'</dd>'\n            if mDTopen:\n                close = '</dt>'\n            if char == u';':\n                return close + u'<dt>', True\n            else:\n                return close + u'<dd>', False\n        return u'<!-- ERR 2 -->'\n\n    def closeList(self, char, mDTopen):\n        if char == u'*':\n            return u'</li></ul>\\n'\n        elif char == u'#':\n            return u'</li></ol>\\n'\n        elif char == u':':\n            if mDTopen:\n                return u'</dt></dl>\\n'\n            else:\n                return u'</dd></dl>\\n'\n        else:\n            return u'<!-- ERR 3 -->'\n\n    def findColonNoLinks(self, text, before, after):\n        try:\n            pos = text.search(':')\n        except:\n            return False\n\n        lt = text.find('<')\n        if lt == -1 or lt > pos:\n            # Easy; no tag nesting to worry about\n            before = text[0:pos]\n            after = text[0:pos+1]\n            return before, after, pos\n\n        # Ugly state machine to walk through avoiding tags.\n        state = MW_COLON_STATE_TEXT;\n        stack = 0;\n        i = 0\n        while i < len(text):\n            c = text[i];\n\n            if state == 0: # MW_COLON_STATE_TEXT:\n                if text[i] == '<':\n                    # Could be either a <start> tag or an </end> tag\n                    state = MW_COLON_STATE_TAGSTART\n                elif text[i] == ':':\n                    if stack == 0:\n                        # we found it\n                        return text[0:i], text[i+1], i\n                else:\n                    # Skip ahead looking for something interesting\n                    try:\n                        colon = text.search(':', i)\n                    except:\n                        return False\n                    lt = text.find('<', i)\n                    if stack == 0:\n                        if lt == -1 or colon < lt:\n                            # we found it\n                            return text[0:colon], text[colon+1], i\n                    if lt == -1:\n                        break\n                    # Skip ahead to next tag start\n                    i = lt\n                    state = MW_COLON_STATE_TAGSTART\n            elif state == 1: # MW_COLON_STATE_TAG:\n                # In a <tag>\n                if text[i] == '>':\n                    stack += 1\n                    state = MW_COLON_STATE_TEXT\n                elif text[i] == '/':\n                    state = MW_COLON_STATE_TAGSLASH\n            elif state == 2: # MW_COLON_STATE_TAGSTART:\n                if text[i] == '/':\n                    state = MW_COLON_STATE_CLOSETAG\n                elif text[i] == '!':\n                    state = MW_COLON_STATE_COMMENT\n                elif text[i] == '>':\n                    # Illegal early close? This shouldn't happen D:\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    state = MW_COLON_STATE_TAG\n            elif state == 3: # MW_COLON_STATE_CLOSETAG:\n                # In a </tag>\n                if text[i] == '>':\n                    stack -= 1\n                    if stack < 0:\n                        return False\n                    state = MW_COLON_STATE_TEXT\n            elif state == MW_COLON_STATE_TAGSLASH:\n                if text[i] == '>':\n                    # Yes, a self-closed tag <blah/>\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    # Probably we're jumping the gun, and this is an attribute\n                    state = MW_COLON_STATE_TAG\n            elif state == 5: # MW_COLON_STATE_COMMENT:\n                if text[i] == '-':\n                    state = MW_COLON_STATE_COMMENTDASH\n            elif state == MW_COLON_STATE_COMMENTDASH:\n                if text[i] == '-':\n                    state = MW_COLON_STATE_COMMENTDASHDASH\n                else:\n                    state = MW_COLON_STATE_COMMENT\n            elif state == MW_COLON_STATE_COMMENTDASHDASH:\n                if text[i] == '>':\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    state = MW_COLON_STATE_COMMENT\n            else:\n                raise\n        if stack > 0:\n            return False\n        return False\n\n    def doBlockLevels(self, text, linestart):\n        # Parsing through the text line by line.  The main thing\n        # happening here is handling of block-level elements p, pre,\n        # and making lists from lines starting with * # : etc.\n        lastPrefix = u''\n        mDTopen = inBlockElem = False\n        prefixLength = 0\n        paragraphStack = False\n        _closeMatchPat = re.compile(ur\"(</table|</blockquote|</h1|</h2|</h3|</h4|</h5|</h6|<td|<th|<div|</div|<hr|</pre|</p|\" +  self.uniq_prefix + ur\"-pre|</li|</ul|</ol|<center)\", re.UNICODE | re.IGNORECASE)\n        mInPre = False\n        mLastSection = u''\n        mDTopen = False\n        output = []\n        for oLine in text.split('\\n')[not linestart and 1 or 0:]:\n            lastPrefixLength = len(lastPrefix)\n            preCloseMatch = _closePrePat.search(oLine)\n            preOpenMatch = _openPrePat.search(oLine)\n            if not mInPre:\n                chars = u'*#:;'\n                prefixLength = 0\n                for c in oLine:\n                    if c in chars:\n                        prefixLength += 1\n                    else:\n                        break\n                pref = oLine[0:prefixLength]\n\n                # eh?\n                pref2 = pref.replace(u';', u':')\n                t = oLine[prefixLength:]\n                mInPre = bool(preOpenMatch)\n            else:\n                # Don't interpret any other prefixes in preformatted text\n                prefixLength = 0\n                pref = pref2 = u''\n                t = oLine\n\n            # List generation\n            if prefixLength and lastPrefix == pref2:\n                # Same as the last item, so no need to deal with nesting or opening stuff\n                tmpOutput, tmpMDTopen = self.nextItem(pref[-1:], mDTopen)\n                output.append(tmpOutput)\n                if tmpMDTopen is not None:\n                    mDTopen = tmpMDTopen\n                paragraphStack = False\n\n                if pref[-1:] == u';':\n                    # The one nasty exception: definition lists work like this:\n                    # ; title : definition text\n                    # So we check for : in the remainder text to split up the\n                    # title and definition, without b0rking links.\n                    term = t2 = u''\n                    z = self.findColonNoLinks(t, term, t2)\n                    if z != False:\n                        term, t2 = z[1:2]\n                        t = t2\n                        output.append(term)\n                        tmpOutput, tmpMDTopen = self.nextItem(u':', mDTopen)\n                        output.append(tmpOutput)\n                        if tmpMDTopen is not None:\n                            mDTopen = tmpMDTopen\n\n            elif prefixLength or lastPrefixLength:\n                # Either open or close a level...\n                commonPrefixLength = self.getCommon(pref, lastPrefix)\n                paragraphStack = False\n                while commonPrefixLength < lastPrefixLength:\n                    tmp = self.closeList(lastPrefix[lastPrefixLength-1], mDTopen)\n                    output.append(tmp)\n                    mDTopen = False\n                    lastPrefixLength -= 1\n                if prefixLength <= commonPrefixLength and commonPrefixLength > 0:\n                    tmpOutput, tmpMDTopen = self.nextItem(pref[commonPrefixLength-1], mDTopen)\n                    output.append(tmpOutput)\n                    if tmpMDTopen is not None:\n                        mDTopen = tmpMDTopen\n\n                while prefixLength > commonPrefixLength:\n                    char = pref[commonPrefixLength:commonPrefixLength+1]\n                    tmpOutput, tmpMDTOpen = self.openList(char, mLastSection)\n                    if tmpMDTOpen:\n                        mDTopen = True\n                    output.append(tmpOutput)\n                    mLastSection = u''\n                    mInPre = False\n\n                    if char == u';':\n                        # FIXME: This is dupe of code above\n                        term = t2 = u''\n                        z = self.findColonNoLinks(t, term, t2)\n                        if z != False:\n                            term, t2 = z[1:2]\n                            t = t2\n                            output.append(term)\n                            tmpOutput, tmpMDTopen = self.nextItem(u':', mDTopen)\n                            output.append(tmpOutput)\n                            if tmpMDTopen is not None:\n                                mDTopen = tmpMDTopen\n\n                    commonPrefixLength += 1\n\n                lastPrefix = pref2\n\n            if prefixLength == 0:\n                # No prefix (not in list)--go to paragraph mode\n                # XXX: use a stack for nestable elements like span, table and div\n                openmatch = _openMatchPat.search(t)\n                closematch = _closeMatchPat.search(t)\n                if openmatch or closematch:\n                    paragraphStack = False\n                    output.append(self.closeParagraph(mLastSection))\n                    mLastSection = u''\n                    if preCloseMatch:\n                        mInPre = False\n                    if preOpenMatch:\n                        mInPre = True\n                    inBlockElem = bool(not closematch)\n                elif not inBlockElem and not mInPre:\n                    if t[0:1] == u' ' and (mLastSection ==  u'pre' or t.strip() != u''):\n                        # pre\n                        if mLastSection != u'pre':\n                            paragraphStack = False\n                            output.append(self.closeParagraph(u'') + u'<pre>')\n                            mInPre = False\n                            mLastSection = u'pre'\n                        t = t[1:]\n                    else:\n                        # paragraph\n                        if t.strip() == u'':\n                            if paragraphStack:\n                                output.append(paragraphStack + u'<br />')\n                                paragraphStack = False\n                                mLastSection = u'p'\n                            else:\n                                if mLastSection != u'p':\n                                    output.append(self.closeParagraph(mLastSection))\n                                    mLastSection = u''\n                                    mInPre = False\n                                    paragraphStack = u'<p>'\n                                else:\n                                    paragraphStack = u'</p><p>'\n                        else:\n                            if paragraphStack:\n                                output.append(paragraphStack)\n                                paragraphStack = False\n                                mLastSection = u'p'\n                            elif mLastSection != u'p':\n                                output.append(self.closeParagraph(mLastSection) + u'<p>')\n                                mLastSection = u'p'\n                                mInPre = False\n\n            # somewhere above we forget to get out of pre block (bug 785)\n            if preCloseMatch and mInPre:\n                mInPre = False\n\n            if paragraphStack == False:\n                output.append(t + u\"\\n\")\n\n        while prefixLength:\n            output.append(self.closeList(pref2[prefixLength-1], mDTopen))\n            mDTopen = False\n            prefixLength -= 1\n\n        if mLastSection != u'':\n            output.append(u'</' + mLastSection + u'>')\n            mLastSection = u''\n\n        return ''.join(output)\n\nclass Parser(BaseParser):\n\n    def __init__(self, base_url=None):\n        super(Parser, self).__init__()\n        self.base_url = base_url\n\n    def parse(self, text, show_toc=True, tags=ALLOWED_TAGS,\n              attributes=ALLOWED_ATTRIBUTES, styles=[], nofollow=False,\n              strip_comments=False):\n        \"\"\"Returns HTML from MediaWiki markup\"\"\"\n        self.show_toc = show_toc\n        self.tags = tags\n        utf8 = isinstance(text, str)\n        text = to_unicode(text)\n        if text[-1:] != u'\\n':\n            text = text + u'\\n'\n            taggedNewline = True\n        else:\n            taggedNewline = False\n\n        text = self.strip(text, stripcomments=strip_comments)\n        text = self.removeHtmlTags(text)\n        if self.base_url:\n            text = self.replaceVariables(text)\n        text = self.doTableStuff(text)\n        text = self.parseHorizontalRule(text)\n        text = self.checkTOC(text)\n        text = self.parseHeaders(text)\n        text = self.parseAllQuotes(text)\n        text = self.replaceExternalLinks(text)\n        if not self.show_toc and text.find(u\"<!--MWTOC-->\") == -1:\n            self.show_toc = False\n        text = self.formatHeadings(text, True)\n        text = self.unstrip(text)\n        text = self.fixtags(text)\n        text = self.doBlockLevels(text, True)\n        text = self.replaceInternalLinks(text)\n        text = self.unstripNoWiki(text)\n        text = text.split(u'\\n')\n        text = u'\\n'.join(text)\n        if taggedNewline and text[-1:] == u'\\n':\n            text = text[:-1]\n        if utf8:\n            text.encode(\"utf-8\")\n        # Pass output through bleach and linkify\n        text = bleach.linkify(text, nofollow=nofollow)\n        return bleach.clean(text, tags=self.tags, attributes=attributes,\n                            styles=styles, strip_comments=False)\n\n    def checkTOC(self, text):\n        if text.find(u\"__NOTOC__\") != -1:\n            text = text.replace(u\"__NOTOC__\", u\"\")\n            self.show_toc = False\n        if text.find(u\"__TOC__\") != -1:\n            text = text.replace(u\"__TOC__\", u\"<!--MWTOC-->\")\n            self.show_toc = True\n        return text\n\n    def replaceVariables(self, text, args={}, argsOnly=False):\n        \"\"\"\n        Replace magic variables, templates, and template arguments\n        with the appropriate text. Templates are substituted recursively,\n        taking care to avoid infinite loops.\n        \"\"\"\n\n        # Prevent too big inclusions\n        # if (len(text) > self.max_include_size:\n        #     return text\n\n        # This function is called recursively. To keep track of arguments we need a stack:\n        self.arg_stack.append(args)\n\n        braceCallbacks = {}\n        if not argsOnly:\n            braceCallbacks[2] = [None, self.braceSubstitution]\n        braceCallbacks[3] = [None, self.argSubstitution]\n\n        callbacks = {\n            u'{': {\n                'end': u'}',\n                'cb': braceCallbacks,\n                'min': argsOnly and 3 or 2,\n                'max': 3\n            },\n            u'[': {\n                'end': u']',\n                'cb': {2: None},\n                'min': 2,\n                'max': 2\n            }\n        }\n        text = replace_callback(text, callbacks)\n        mArgStack.pop()\n\n        return text\n\n    def replace_callback(self, text, callbacks):\n        \"\"\"\n        parse any parentheses in format ((title|part|part))\n        and call callbacks to get a replacement text for any found piece\n        \"\"\"\n        openingBraceStack = []      # this array will hold a stack of parentheses which are not closed yet\n        lastOpeningBrace = -1       # last not closed parentheses\n\n        validOpeningBraces = u''.join(callbacks.keys())\n\n        i = 0\n        while i < len(text):\n            if lastOpeningBrace == -1:\n                currentClosing = u''\n                search = validOpeningBraces\n            else:\n                currentClosing = openingBraceStack[lastOpeningBrace]['braceEnd']\n                search = validOpeningBraces + u'|' + currentClosing\n            rule = None\n            pos = -1\n            for c in search:\n                pos = max(pos, text.find(c, i))\n            pos -= i\n            pos += 1\n            if pos == 0:\n                pos = len(text)-i\n            i += pos\n            if i < len(text):\n                if text[i] == u'|':\n                    found = 'pipe'\n                elif text[i] == currentClosing:\n                    found = 'close'\n                elif text[i] in callbacks:\n                    found = 'open'\n                    rule = callbacks[text[i]]\n                else:\n                    i += 1\n                    continue\n            else:\n                break\n\n            if found == 'open':\n                # found opening brace, let's add it to parentheses stack\n                piece = {\n                    'brace': text[i],\n                    'braceEnd': rule['end'],\n                    'title': u'',\n                    'parts': None\n                }\n\n                # count opening brace characters\n                count = 0\n                while True:\n                    if text[i+count:i+1+count] == piece['brace']:\n                        count += 1\n                    else:\n                        break\n                piece['count'] = count\n                i += piece['count']\n                piece['startAt'] = piece['partStart'] = i\n\n                # we need to add to stack only if opening brace count is enough for one of the rules\n                if piece['count'] >= rule['min']:\n                    lastOpeningBrace += 1\n                    openingBraceStack[lastOpeningBrace] = piece\n            elif found == 'close':\n                maxCount = openingBraceStack[lastOpeningBrace]['count']\n                count = 0\n                while count < maxCount:\n                    if text[i+count:i+1+count] == text[i]:\n                        count += 1\n                    else:\n                        break\n\n                # check for maximum matching characters (if there are 5 closing\n                # characters, we will probably need only 3 - depending on the rules)\n                matchingCount = 0\n                matchingCallback = None\n                cbType = callbacks[openingBraceStack[lastOpeningBrace]['brace']]\n                if count > cbType['max']:\n                    # The specified maximum exists in the callback array, unless the caller\n                    # has made an error\n                    matchingCount = cbType['max']\n                else:\n                    # Count is less than the maximum\n                    # Skip any gaps in the callback array to find the true largest match\n                    # Need to use array_key_exists not isset because the callback can be null\n                    matchingCount = count\n                    while matchingCount > 0 and matchingCount not in cbType['cb']:\n                        matchingCount -= 1\n\n                if matchingCount <= 0:\n                    i += count\n                    continue\n                matchingCallback = cbType['cb'][matchingCount]\n\n                # let's set a title or last part (if '|' was found)\n                if openingBraceStack[lastOpeningBrace]['parts'] is None:\n                    openingBraceStack[lastOpeningBrace]['title'] = \\\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                else:\n                    openingBraceStack[lastOpeningBrace]['parts'].append(\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    )\n\n                pieceStart = openingBraceStack[lastOpeningBrace]['startAt'] - matchingCount\n                pieceEnd = i + matchingCount\n\n                if callable(matchingCallback):\n                    cbArgs = {\n                        'text': text[pieceStart:pieceEnd],\n                        'title': openingBraceStack[lastOpeningBrace]['title'].strip(),\n                        'parts': openingBraceStack[lastOpeningBrace]['parts'],\n                        'lineStart': pieceStart > 0 and text[pieceStart-1] == u\"\\n\"\n                    }\n                    # finally we can call a user callback and replace piece of text\n                    replaceWith = matchingCallback(cbArgs)\n                    text = text[:pieceStart] + replaceWith + text[pieceEnd:]\n                    i = pieceStart + len(replaceWith)\n                else:\n                    # null value for callback means that parentheses should be parsed, but not replaced\n                    i += matchingCount\n\n                # reset last opening parentheses, but keep it in case there are unused characters\n                piece = {\n                    'brace': openingBraceStack[lastOpeningBrace]['brace'],\n                    'braceEnd': openingBraceStack[lastOpeningBrace]['braceEnd'],\n                    'count': openingBraceStack[lastOpeningBrace]['count'],\n                    'title': u'',\n                    'parts': None,\n                    'startAt': openingBraceStack[lastOpeningBrace]['startAt']\n                }\n                openingBraceStack[lastOpeningBrace] = None\n                lastOpeningBrace -= 1\n\n                if matchingCount < piece['count']:\n                    piece['count'] -= matchingCount\n                    piece['startAt'] -= matchingCount\n                    piece['partStart'] = piece['startAt']\n                    # do we still qualify for any callback with remaining count?\n                    currentCbList = callbacks[piece['brace']]['cb']\n                    while piece['count']:\n                        if piece['count'] in currentCbList:\n                            lastOpeningBrace += 1\n                            openingBraceStack[lastOpeningBrace] = piece\n                            break\n\n                        piece['count'] -= 1\n\n            elif found == 'pipe':\n                # lets set a title if it is a first separator, or next part otherwise\n                if opeingBraceStack[lastOpeningBrace]['parts'] is None:\n                    openingBraceStack[lastOpeningBrace]['title'] = \\\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    openingBraceStack[lastOpeningBrace]['parts'] = []\n                else:\n                    openingBraceStack[lastOpeningBrace]['parts'].append(\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    )\n                i += 1\n                openingBraceStack[lastOpeningBrace]['partStart'] = i\n\n        return text\n\n    def doTableStuff(self, text):\n        t = text.split(u\"\\n\")\n        td = [] # Is currently a td tag open?\n        ltd = [] # Was it TD or TH?\n        tr = [] # Is currently a tr tag open?\n        ltr = [] # tr attributes\n        has_opened_tr = [] # Did this table open a <tr> element?\n        indent_level = 0 # indent level of the table\n\n        for k, x in zip(range(len(t)), t):\n            x = x.strip()\n            fc = x[0:1]\n            matches = _zomgPat.match(x)\n            if matches:\n                indent_level = len(matches.group(1))\n\n                attributes = self.unstripForHTML(matches.group(2))\n\n                t[k] = u'<dl><dd>'*indent_level + u'<table' + self.fixTagAttributes(attributes, u'table') + u'>'\n                td.append(False)\n                ltd.append(u'')\n                tr.append(False)\n                ltr.append(u'')\n                has_opened_tr.append(False)\n            elif len(td) == 0:\n                pass\n            elif u'|}' == x[0:2]:\n                z = u\"</table>\" + x[2:]\n                l = ltd.pop()\n                if not has_opened_tr.pop():\n                    z = u\"<tr><td></td><tr>\" + z\n                if tr.pop():\n                    z = u\"</tr>\" + z\n                if td.pop():\n                    z = u'</' + l + u'>' + z\n                ltr.pop()\n                t[k] = z + u'</dd></dl>'*indent_level\n            elif u'|-' == x[0:2]: # Allows for |-------------\n                x = x[1:]\n                while x != u'' and x[0:1] == '-':\n                    x = x[1:]\n                z = ''\n                l = ltd.pop()\n                has_opened_tr.pop()\n                has_opened_tr.append(True)\n                if tr.pop():\n                    z = u'</tr>' + z\n                if td.pop():\n                    z = u'</' + l + u'>' + z\n                ltr.pop()\n                t[k] = z\n                tr.append(False)\n                td.append(False)\n                ltd.append(u'')\n                attributes = self.unstripForHTML(x)\n                ltr.append(self.fixTagAttributes(attributes, u'tr'))\n            elif u'|' == fc or u'!' == fc or u'|+' == x[0:2]: # Caption\n                # x is a table row\n                if u'|+' == x[0:2]:\n                    fc = u'+'\n                    x = x[1:]\n                x = x[1:]\n                if fc == u'!':\n                    x = x.replace(u'!!', u'||')\n                # Split up multiple cells on the same line.\n                # FIXME: This can result in improper nesting of tags processed\n                # by earlier parser steps, but should avoid splitting up eg\n                # attribute values containing literal \"||\".\n                x = x.split(u'||')\n\n                t[k] = u''\n\n                # Loop through each table cell\n                for theline in x:\n                    z = ''\n                    if fc != u'+':\n                        tra = ltr.pop()\n                        if not tr.pop():\n                            z = u'<tr' + tra + u'>\\n'\n                        tr.append(True)\n                        ltr.append(u'')\n                        has_opened_tr.pop()\n                        has_opened_tr.append(True)\n                    l = ltd.pop()\n                    if td.pop():\n                        z = u'</' + l + u'>' + z\n                    if fc == u'|':\n                        l = u'td'\n                    elif fc == u'!':\n                        l = u'th'\n                    elif fc == u'+':\n                        l = u'caption'\n                    else:\n                        l = u''\n                    ltd.append(l)\n\n                    #Cell parameters\n                    y = theline.split(u'|', 1)\n                    # Note that a '|' inside an invalid link should not\n                    # be mistaken as delimiting cell parameters\n                    if y[0].find(u'[[') != -1:\n                        y = [theline]\n\n                    if len(y) == 1:\n                        y = z + u\"<\" + l + u\">\" + y[0]\n                    else:\n                        attributes = self.unstripForHTML(y[0])\n                        y = z + u\"<\" + l + self.fixTagAttributes(attributes, l) + u\">\" + y[1]\n\n                    t[k] += y\n                    td.append(True)\n\n        while len(td) > 0:\n            l = ltd.pop()\n            if td.pop():\n                t.append(u'</td>')\n            if tr.pop():\n                t.append(u'</tr>')\n            if not has_opened_tr.pop():\n                t.append(u'<tr><td></td></tr>')\n            t.append(u'</table>')\n\n        text = u'\\n'.join(t)\n        # special case: don't return empty table\n        if text == u\"<table>\\n<tr><td></td></tr>\\n</table>\":\n            text = u''\n\n        return text\n\n    def formatHeadings(self, text, isMain):\n        \"\"\"\n        This function accomplishes several tasks:\n        1) Auto-number headings if that option is enabled\n        2) Add an [edit] link to sections for logged in users who have enabled the option\n        3) Add a Table of contents on the top for users who have enabled the option\n        4) Auto-anchor headings\n\n        It loops through all headlines, collects the necessary data, then splits up the\n        string and re-inserts the newly formatted headlines.\n        \"\"\"\n        doNumberHeadings = False\n        showEditLink = True # Can User Edit\n\n        if text.find(u\"__NOEDITSECTION__\") != -1:\n            showEditLink = False\n            text = text.replace(u\"__NOEDITSECTION__\", u\"\")\n\n        # Get all headlines for numbering them and adding funky stuff like [edit]\n        # links - this is for later, but we need the number of headlines right now\n        matches = _headerPat.findall(text)\n        numMatches = len(matches)\n\n        # if there are fewer than 4 headlines in the article, do not show TOC\n        # unless it's been explicitly enabled.\n        enoughToc = self.show_toc and (numMatches >= 4 or text.find(u\"<!--MWTOC-->\") != -1)\n\n        # Allow user to stipulate that a page should have a \"new section\"\n        # link added via __NEWSECTIONLINK__\n        showNewSection = False\n        if text.find(u\"__NEWSECTIONLINK__\") != -1:\n            showNewSection = True\n            text = text.replace(u\"__NEWSECTIONLINK__\", u\"\")\n        # if the string __FORCETOC__ (not case-sensitive) occurs in the HTML,\n        # override above conditions and always show TOC above first header\n        if text.find(u\"__FORCETOC__\") != -1:\n            self.show_toc = True\n            enoughToc = True\n            text = text.replace(u\"__FORCETOC__\", u\"\")\n        # Never ever show TOC if no headers\n        if numMatches < 1:\n            enoughToc = False\n\n        # headline counter\n        headlineCount = 0\n        sectionCount = 0 # headlineCount excluding template sections\n\n        # Ugh .. the TOC should have neat indentation levels which can be\n        # passed to the skin functions. These are determined here\n        toc = []\n        head = {}\n        sublevelCount = {}\n        levelCount = {}\n        toclevel = 0\n        level = 0\n        prevlevel = 0\n        toclevel = 0\n        prevtoclevel = 0\n        refers = {}\n        refcount = {}\n        wgMaxTocLevel = 5\n\n        for match in matches:\n            headline = match[2]\n            istemplate = False\n            templatetitle = u''\n            templatesection = 0\n            numbering = []\n\n            m = _templateSectionPat.search(headline)\n            if m:\n                istemplate = True\n                templatetitle = b64decode(m[0])\n                templatesection = 1 + int(b64decode(m[1]))\n                headline = _templateSectionPat.sub(u'', headline)\n\n            if toclevel:\n                prevlevel = level\n                prevtoclevel = toclevel\n\n            level = matches[headlineCount][0]\n\n            if doNumberHeadings or enoughToc:\n                if level > prevlevel:\n                    toclevel += 1\n                    sublevelCount[toclevel] = 0\n                    if toclevel < wgMaxTocLevel:\n                        toc.append(u'<ul>')\n                elif level < prevlevel and toclevel > 1:\n                    # Decrease TOC level, find level to jump to\n\n                    if toclevel == 2 and level < levelCount[1]:\n                        toclevel = 1\n                    else:\n                        for i in range(toclevel, 0, -1):\n                            if levelCount[i] == level:\n                                # Found last matching level\n                                toclevel = i\n                                break\n                            elif levelCount[i] < level:\n                                toclevel = i + 1\n                                break\n                    if toclevel < wgMaxTocLevel:\n                        toc.append(u\"</li>\")\n                        toc.append(u\"</ul></li>\" * max(prevtoclevel - toclevel, 0))\n                else:\n                    toc.append(u\"</li>\")\n\n                levelCount[toclevel] = level\n\n                # count number of headlines for each level\n                sublevelCount[toclevel] += 1\n                for i in range(1, toclevel+1):\n                    if sublevelCount[i]:\n                        numbering.append(to_unicode(sublevelCount[i]))\n\n            # The canonized header is a version of the header text safe to use for links\n            # Avoid insertion of weird stuff like <math> by expanding the relevant sections\n            canonized_headline = self.unstrip(headline)\n            canonized_headline = self.unstripNoWiki(canonized_headline)\n\n            # -- don't know what to do with this yet.\n            # Remove link placeholders by the link text.\n            #     <!--LINK number-->\n            # turns into\n            #     link text with suffix\n    #        $canonized_headline = preg_replace( '/<!--LINK ([0-9]*)-->/e',\n    #                            \"\\$this->mLinkHolders['texts'][\\$1]\",\n    #                            $canonized_headline );\n    #        $canonized_headline = preg_replace( '/<!--IWLINK ([0-9]*)-->/e',\n    #                            \"\\$this->mInterwikiLinkHolders['texts'][\\$1]\",\n    #                            $canonized_headline );\n\n            # strip out HTML\n            canonized_headline = _tagPat.sub(u'', canonized_headline)\n            tocline = canonized_headline.strip()\n            # Save headline for section edit hint before it's escaped\n            headline_hint = tocline\n            canonized_headline = self.escapeId(tocline)\n            refers[headlineCount] = canonized_headline\n\n            # count how many in assoc. array so we can track dupes in anchors\n            if canonized_headline not in refers:\n                refers[canonized_headline] = 1\n            else:\n                refers[canonized_headline] += 1\n            refcount[headlineCount] = refers[canonized_headline]\n\n            numbering = '.'.join(numbering)\n\n            # Don't number the heading if it is the only one (looks silly)\n            if doNumberHeadings and numMatches > 1:\n                # the two are different if the line contains a link\n                headline = numbering + u' ' + headline\n\n            # Create the anchor for linking from the TOC to the section\n            anchor = canonized_headline;\n            if refcount[headlineCount] > 1:\n                anchor += u'_' + unicode(refcount[headlineCount])\n\n            if enoughToc:\n                toc.append(u'<li class=\"toclevel-')\n                toc.append(to_unicode(toclevel))\n                toc.append(u'\"><a href=\"#w_')\n                toc.append(anchor)\n                toc.append(u'\"><span class=\"tocnumber\">')\n                toc.append(numbering)\n                toc.append(u'</span> <span class=\"toctext\">')\n                toc.append(tocline)\n                toc.append(u'</span></a>')\n\n    #        if showEditLink and (not istemplate or templatetitle != u\"\"):\n    #            if not head[headlineCount]:\n    #                head[headlineCount] = u''\n    #\n    #            if istemplate:\n    #                head[headlineCount] += sk.editSectionLinkForOther(templatetile, templatesection)\n    #            else:\n    #                head[headlineCount] += sk.editSectionLink(mTitle, sectionCount+1, headline_hint)\n\n            # give headline the correct <h#> tag\n            if headlineCount not in head:\n                head[headlineCount] = []\n            h = head[headlineCount]\n            h.append(u'<h')\n            h.append(to_unicode(level))\n            h.append(u' id=\"w_')\n            h.append(anchor)\n            h.append('\">')\n            h.append(matches[headlineCount][1].strip())\n            h.append(headline.strip())\n            h.append(u'</h')\n            h.append(to_unicode(level))\n            h.append(u'>')\n\n            headlineCount += 1\n\n            if not istemplate:\n                sectionCount += 1\n\n        if enoughToc:\n            if toclevel < wgMaxTocLevel:\n                toc.append(u\"</li>\")\n                toc.append(u\"</ul></li>\" * max(0, toclevel - 1))\n            toc.insert(0, u'<div id=\"toc\"><h2>Table of Contents</h2>')\n            toc.append(u'</ul></div>')\n\n        # split up and insert constructed headlines\n\n        blocks = _headerPat.split(text)\n\n        i = 0\n        len_blocks = len(blocks)\n        forceTocPosition = text.find(u\"<!--MWTOC-->\")\n        full = []\n        while i < len_blocks:\n            j = i/4\n            full.append(blocks[i])\n            if enoughToc and not i and isMain and forceTocPosition == -1:\n                full += toc\n                toc = None\n            if j in head and head[j]:\n                full += head[j]\n                head[j] = None\n            i += 4\n        full = u''.join(full)\n        if forceTocPosition != -1:\n            return full.replace(u\"<!--MWTOC-->\", u''.join(toc), 1)\n        else:\n            return full\n\ndef parse(text, show_toc=True, tags=ALLOWED_TAGS,\n          attributes=ALLOWED_ATTRIBUTES, nofollow=False):\n    \"\"\"Returns HTML from MediaWiki markup\"\"\"\n    p = Parser()\n    return p.parse(text, show_toc=show_toc, tags=tags, attributes=attributes,\n                   nofollow=nofollow)\n\ndef parselite(text):\n    \"\"\"Returns HTML from MediaWiki markup ignoring\n    without headings\"\"\"\n    p = BaseParser()\n    return p.parse(text)\n\ndef truncate_url(url, length=40):\n    if len(url) <= length:\n        return url\n    import re\n    pattern = r'(/[^/]+/?)$'\n    match = re.search(pattern, url)\n    if not match:\n        return url\n    l = len(match.group(1))\n    firstpart = url[0:len(url)-l]\n    secondpart = match.group(1)\n    if firstpart == firstpart[0:length-3]:\n        if secondpart != secondpart[0:length-3]:\n            secondpart = secondpart[0:length-3] + '...'\n    else:\n        firstpart = firstpart[0:length-3]\n        secondpart = '...' + secondpart\n    t_url = firstpart+secondpart\n    return t_url\n\ndef to_unicode(text, charset=None):\n    \"\"\"Convert a `str` object to an `unicode` object.\n\n    If `charset` is given, we simply assume that encoding for the text,\n    but we'll use the \"replace\" mode so that the decoding will always\n    succeed.\n    If `charset` is ''not'' specified, we'll make some guesses, first\n    trying the UTF-8 encoding, then trying the locale preferred encoding,\n    in \"replace\" mode. This differs from the `unicode` builtin, which\n    by default uses the locale preferred encoding, in 'strict' mode,\n    and is therefore prompt to raise `UnicodeDecodeError`s.\n\n    Because of the \"replace\" mode, the original content might be altered.\n    If this is not what is wanted, one could map the original byte content\n    by using an encoding which maps each byte of the input to an unicode\n    character, e.g. by doing `unicode(text, 'iso-8859-1')`.\n    \"\"\"\n    if not isinstance(text, str):\n        if isinstance(text, Exception):\n            # two possibilities for storing unicode strings in exception data:\n            try:\n                # custom __str__ method on the exception (e.g. PermissionError)\n                return unicode(text)\n            except UnicodeError:\n                # unicode arguments given to the exception (e.g. parse_date)\n                return ' '.join([to_unicode(arg) for arg in text.args])\n        return unicode(text)\n    if charset:\n        return unicode(text, charset, 'replace')\n    else:\n        try:\n            return unicode(text, 'utf-8')\n        except UnicodeError:\n            return unicode(text, locale.getpreferredencoding(), 'replace')\n\n\ndef safe_name(name=None, remove_slashes=True):\n    if name is None:\n        return None\n    name = str2url(name)\n    if remove_slashes:\n        name = re.sub(r\"[^a-zA-Z0-9\\-_\\s\\.]\", \"\", name)\n    else:\n        name = re.sub(r\"[^a-zA-Z0-9\\-_\\s\\.\\/]\", \"\", name)\n    name = re.sub(r\"[\\s\\._]\", \"-\", name)\n    name = re.sub(r\"[-]+\", \"-\", name)\n    return name.strip(\"-\").lower()\n\ndef str2url(str):\n    \"\"\"\n    Takes a UTF-8 string and replaces all characters with the equivalent in 7-bit\n    ASCII. It returns a plain ASCII string usable in URLs.\n    \"\"\"\n    try:\n        str = str.encode('utf-8')\n    except:\n        pass\n    mfrom    = \"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîï\"\n    to        = \"AAAAAAECEEEEIIIIDNOOOOOOUUUUYSaaaaaaaceeeeiiii\"\n    mfrom    += \"ñòóôõöøùúûüýÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģ\"\n    to        += \"noooooouuuuyyaaaaaaccccccccddddeeeeeeeeeegggggggg\"\n    mfrom    += \"ĤĥĦħĨĩĪīĬĭĮįİıĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘř\"\n    to        += \"hhhhiiiiiiiiiijjkkkllllllllllnnnnnnnnnoooooooorrrrrr\"\n    mfrom    += \"ŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƂƃƄƅƇƈƉƊƐƑƒƓƔ\"\n    to        += \"ssssssssttttttuuuuuuuuuuuuwwyyyzzzzzzfbbbbbccddeffgv\"\n    mfrom    += \"ƖƗƘƙƚƝƞƟƠƤƦƫƬƭƮƯưƱƲƳƴƵƶǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩ\"\n    to        += \"likklnnoopettttuuuuyyzzaaiioouuuuuuuuuueaaaaeeggggkk\"\n    mfrom    += \"ǪǫǬǭǰǴǵǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȞȟȤȥȦȧȨȩ\"\n    to        += \"oooojggpnnaaeeooaaaaeeeeiiiioooorrrruuuusstthhzzaaee\"\n    mfrom    += \"ȪȫȬȭȮȯȰȱȲȳḀḁḂḃḄḅḆḇḈḉḊḋḌḍḎḏḐḑḒḓḔḕḖḗḘḙḚḛḜḝḞḟḠḡḢḣḤḥḦḧḨḩḪḫ\"\n    to        += \"ooooooooyyaabbbbbbccddddddddddeeeeeeeeeeffgghhhhhhhhhh\"\n    mfrom    += \"ḬḭḮḯḰḱḲḳḴḵḶḷḸḹḺḻḼḽḾḿṀṁṂṃṄṅṆṇṈṉṊṋṌṍṎṏṐṑṒṓṔṕṖṗṘṙṚṛṜṝṞṟ\"\n    to        += \"iiiikkkkkkllllllllmmmmmmnnnnnnnnoooooooopppprrrrrrrr\"\n    mfrom    += \"ṠṡṢṣṤṥṦṧṨṩṪṫṬṭṮṯṰṱṲṳṴṵṶṷṸṹṺṻṼṽṾṿẀẁẂẃẄẅẆẇẈẉẊẋẌẍẎẏẐẑẒẓẔẕ\"\n    to        += \"ssssssssssttttttttuuuuuuuuuuvvvvwwwwwwwwwwxxxxxyzzzzzz\"\n    mfrom    += \"ẖẗẘẙẚẛẠạẢảẤấẦầẨẩẪẫẬậẮắẰằẲẳẴẵẶặẸẹẺẻẼẽẾếỀềỂểỄễỆệỈỉỊị\"\n    to        += \"htwyafaaaaaaaaaaaaaaaaaaaaaaaaeeeeeeeeeeeeeeeeiiii\"\n    mfrom    += \"ỌọỎỏỐốỒồỔổỖỗỘộỚớỜờỞởỠỡỢợỤụỦủỨứỪừỬửỮữỰựỲỳỴỵỶỷỸỹ\"\n    to        += \"oooooooooooooooooooooooouuuuuuuuuuuuuuyyyyyyyy\"\n    for i in zip(mfrom, to):\n        str = str.replace(*i)\n    return str\n"}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
]
}
,{"note":"slide-12",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s12.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s12.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s12.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":76,
"width":889.8003,
"x":51,
"height":19296}
,
"text":"# coding: latin1\n\"\"\"\nMediaWiki-style markup\n\nCopyright (C) 2008 David Cramer <dcramer@gmail.com>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport re, random, locale\nfrom base64 import b64encode, b64decode\n\nimport bleach\n\n# a few patterns we use later\n\nMW_COLON_STATE_TEXT = 0\nMW_COLON_STATE_TAG = 1\nMW_COLON_STATE_TAGSTART = 2\nMW_COLON_STATE_CLOSETAG = 3\nMW_COLON_STATE_TAGSLASH = 4\nMW_COLON_STATE_COMMENT = 5\nMW_COLON_STATE_COMMENTDASH = 6\nMW_COLON_STATE_COMMENTDASHDASH = 7\n\n_attributePat = re.compile(ur'''(?:^|\\s)([A-Za-z0-9]+)(?:\\s*=\\s*(?:\\\"([^<\\\"]*)\\\"|\\'([^<\\']*)\\'|([a-zA-Z0-9!#$%&()*,\\-./:;<>?@\\[\\]^_{|}~]+)|#([0-9a-fA-F]+)))''', re.UNICODE)\n_space = re.compile(ur'\\s+', re.UNICODE)\n_closePrePat = re.compile(u\"</pre\", re.UNICODE | re.IGNORECASE)\n_openPrePat = re.compile(u\"<pre\", re.UNICODE | re.IGNORECASE)\n_openMatchPat = re.compile(u\"(<table|<blockquote|<h1|<h2|<h3|<h4|<h5|<h6|<pre|<tr|<p|<ul|<ol|<li|</center|</tr|</td|</th)\", re.UNICODE | re.IGNORECASE)\n_tagPattern = re.compile(ur'^(/?)(\\w+)([^>]*?)(/?>)([^<]*)$', re.UNICODE)\n\n_htmlpairs = ( # Tags that must be closed\n    u'b', u'del', u'i', u'ins', u'u', u'font', u'big', u'small', u'sub',\n    u'sup', u'h1', u'h2', u'h3', u'h4', u'h5', u'h6', u'cite', u'code',\n    u'em', u's', u'strike', u'strong', u'tt', u'var', u'div', u'center',\n    u'blockquote', u'ol', u'ul', u'dl', u'table', u'caption', u'pre',\n    u'p', u'span', u'u', u'li', u'dd', u'dt', u'video', u'section', u'noscript'\n)\n_htmlsingle = (  # Elements that cannot have close tags\n    u'br', u'hr', u'img', u'source',\n)\n_htmlnest = ( # Tags that can be nested--??\n    u'table', u'tr', u'td', u'th', u'div', u'blockquote', u'ol', u'ul',\n    u'dl', u'font', u'big', u'small', u'sub', u'sup', u'span', u'img',\n    u'tbody', u'thead', u'tfoot', u'colgroup', u'col', u'section',\n)\n_tabletags = ( # Can only appear inside table\n    u'td', u'th', u'tr', u'tbody', u'thead', u'tfoot', u'colgroup', u'col',\n)\n_htmllist = ( # Tags used by list\n    u'ul', u'ol',\n)\n_listtags = ( # Tags that can appear in a list\n    u'li',\n)\n_htmlsingleallowed = _htmlsingle + _tabletags\n_htmlelements = _htmlsingle + _htmlpairs + _htmlnest\n\n_htmlEntities = {\n    u'Aacute': 193,    u'aacute': 225, u'Acirc': 194, u'acirc': 226, u'acute': 180,\n    u'AElig': 198, u'aelig': 230, u'Agrave': 192, u'agrave': 224, u'alefsym': 8501,\n    u'Alpha': 913, u'alpha': 945, u'amp': 38, u'and': 8743, u'ang': 8736, u'Aring': 197,\n    u'aring':      229,\n    u'asymp':      8776,\n    u'Atilde':     195,\n    u'atilde':     227,\n    u'Auml':       196,\n    u'auml':       228,\n    u'bdquo':      8222,\n    u'Beta':       914,\n    u'beta':       946,\n    u'brvbar':     166,\n    u'bull':       8226,\n    u'cap':        8745,\n    u'Ccedil':     199,\n    u'ccedil':     231,\n    u'cedil':      184,\n    u'cent':       162,\n    u'Chi':        935,\n    u'chi':        967,\n    u'circ':       710,\n    u'clubs':      9827,\n    u'cong':       8773,\n    u'copy':       169,\n    u'crarr':      8629,\n    u'cup':        8746,\n    u'curren':     164,\n    u'dagger':     8224,\n    u'Dagger':     8225,\n    u'darr':       8595,\n    u'dArr':       8659,\n    u'deg':        176,\n    u'Delta':      916,\n    u'delta':      948,\n    u'diams':      9830,\n    u'divide':     247,\n    u'Eacute':     201,\n    u'eacute':     233,\n    u'Ecirc':      202,\n    u'ecirc':      234,\n    u'Egrave':     200,\n    u'egrave':     232,\n    u'empty':      8709,\n    u'emsp':       8195,\n    u'ensp':       8194,\n    u'Epsilon':    917,\n    u'epsilon':    949,\n    u'equiv':      8801,\n    u'Eta':        919,\n    u'eta':        951,\n    u'ETH':        208,\n    u'eth':        240,\n    u'Euml':       203,\n    u'euml':       235,\n    u'euro':       8364,\n    u'exist':      8707,\n    u'fnof':       402,\n    u'forall':     8704,\n    u'frac12':     189,\n    u'frac14':     188,\n    u'frac34':     190,\n    u'frasl':      8260,\n    u'Gamma':      915,\n    u'gamma':      947,\n    u'ge':         8805,\n    u'gt':         62,\n    u'harr':       8596,\n    u'hArr':       8660,\n    u'hearts':     9829,\n    u'hellip':     8230,\n    u'Iacute':     205,\n    u'iacute':     237,\n    u'Icirc':      206,\n    u'icirc':      238,\n    u'iexcl':      161,\n    u'Igrave':     204,\n    u'igrave':     236,\n    u'image':      8465,\n    u'infin':      8734,\n    u'int':        8747,\n    u'Iota':       921,\n    u'iota':       953,\n    u'iquest':     191,\n    u'isin':       8712,\n    u'Iuml':       207,\n    u'iuml':       239,\n    u'Kappa':      922,\n    u'kappa':      954,\n    u'Lambda':     923,\n    u'lambda':     955,\n    u'lang':       9001,\n    u'laquo':      171,\n    u'larr':       8592,\n    u'lArr':       8656,\n    u'lceil':      8968,\n    u'ldquo':      8220,\n    u'le':         8804,\n    u'lfloor':     8970,\n    u'lowast':     8727,\n    u'loz':        9674,\n    u'lrm':        8206,\n    u'lsaquo':     8249,\n    u'lsquo':      8216,\n    u'lt':         60,\n    u'macr':       175,\n    u'mdash':      8212,\n    u'micro':      181,\n    u'middot':     183,\n    u'minus':      8722,\n    u'Mu':         924,\n    u'mu':         956,\n    u'nabla':      8711,\n    u'nbsp':       160,\n    u'ndash':      8211,\n    u'ne':         8800,\n    u'ni':         8715,\n    u'not':        172,\n    u'notin':      8713,\n    u'nsub':       8836,\n    u'Ntilde':     209,\n    u'ntilde':     241,\n    u'Nu':         925,\n    u'nu':         957,\n    u'Oacute':     211,\n    u'oacute':     243,\n    u'Ocirc':      212,\n    u'ocirc':      244,\n    u'OElig':      338,\n    u'oelig':      339,\n    u'Ograve':     210,\n    u'ograve':     242,\n    u'oline':      8254,\n    u'Omega':      937,\n    u'omega':      969,\n    u'Omicron':    927,\n    u'omicron':    959,\n    u'oplus':      8853,\n    u'or':         8744,\n    u'ordf':       170,\n    u'ordm':       186,\n    u'Oslash':     216,\n    u'oslash':     248,\n    u'Otilde':     213,\n    u'otilde':     245,\n    u'otimes':     8855,\n    u'Ouml':       214,\n    u'ouml':       246,\n    u'para':       182,\n    u'part':       8706,\n    u'permil':     8240,\n    u'perp':       8869,\n    u'Phi':        934,\n    u'phi':        966,\n    u'Pi':         928,\n    u'pi':         960,\n    u'piv':        982,\n    u'plusmn':     177,\n    u'pound':      163,\n    u'prime':      8242,\n    u'Prime':      8243,\n    u'prod':       8719,\n    u'prop':       8733,\n    u'Psi':        936,\n    u'psi':        968,\n    u'quot':       34,\n    u'radic':      8730,\n    u'rang':       9002,\n    u'raquo':      187,\n    u'rarr':       8594,\n    u'rArr':       8658,\n    u'rceil':      8969,\n    u'rdquo':      8221,\n    u'real':       8476,\n    u'reg':        174,\n    u'rfloor':     8971,\n    u'Rho':        929,\n    u'rho':        961,\n    u'rlm':        8207,\n    u'rsaquo':     8250,\n    u'rsquo':      8217,\n    u'sbquo':      8218,\n    u'Scaron':     352,\n    u'scaron':     353,\n    u'sdot':       8901,\n    u'sect':       167,\n    u'shy':        173,\n    u'Sigma':      931,\n    u'sigma':      963,\n    u'sigmaf':     962,\n    u'sim':        8764,\n    u'spades':     9824,\n    u'sub':        8834,\n    u'sube':       8838,\n    u'sum':        8721,\n    u'sup':        8835,\n    u'sup1':       185,\n    u'sup2':       178,\n    u'sup3':       179,\n    u'supe':       8839,\n    u'szlig':      223,\n    u'Tau':        932,\n    u'tau':        964,\n    u'there4':     8756,\n    u'Theta':      920,\n    u'theta':      952,\n    u'thetasym':   977,\n    u'thinsp':     8201,\n    u'THORN':      222,\n    u'thorn':      254,\n    u'tilde':      732,\n    u'times':      215,\n    u'trade':      8482,\n    u'Uacute':     218,\n    u'uacute':     250,\n    u'uarr':       8593,\n    u'uArr':       8657,\n    u'Ucirc':      219,\n    u'ucirc':      251,\n    u'Ugrave':     217,\n    u'ugrave':     249,\n    u'uml':        168,\n    u'upsih':      978,\n    u'Upsilon':    933,\n    u'upsilon':    965,\n    u'Uuml':       220,\n    u'uuml':       252,\n    u'weierp':     8472,\n    u'Xi':         926,\n    u'xi':         958,\n    u'Yacute':     221,\n    u'yacute':     253,\n    u'yen':        165,\n    u'Yuml':       376,\n    u'yuml':       255,\n    u'Zeta':       918,\n    u'zeta':       950,\n    u'zwj':        8205,\n    u'zwnj':       8204\n}\n\n_charRefsPat = re.compile(ur'''(&([A-Za-z0-9]+);|&#([0-9]+);|&#[xX]([0-9A-Za-z]+);|(&))''', re.UNICODE)\n_cssCommentPat = re.compile(ur'''\\*.*?\\*''', re.UNICODE)\n_toUTFPat = re.compile(ur'''\\\\([0-9A-Fa-f]{1,6})[\\s]?''', re.UNICODE)\n_hackPat = re.compile(ur'''(expression|tps*://|url\\s*\\().*''', re.UNICODE | re.IGNORECASE)\n_hrPat = re.compile(u'''^-----*''', re.UNICODE | re.MULTILINE)\n_h1Pat = re.compile(u'^=(.+)=\\s*$', re.UNICODE | re.MULTILINE)\n_h2Pat = re.compile(u'^==(.+)==\\s*$', re.UNICODE | re.MULTILINE)\n_h3Pat = re.compile(u'^===(.+)===\\s*$', re.UNICODE | re.MULTILINE)\n_h4Pat = re.compile(u'^====(.+)====\\s*$', re.UNICODE | re.MULTILINE)\n_h5Pat = re.compile(u'^=====(.+)=====\\s*$', re.UNICODE | re.MULTILINE)\n_h6Pat = re.compile(u'^======(.+)======\\s*$', re.UNICODE | re.MULTILINE)\n_quotePat = re.compile(u\"\"\"(''+)\"\"\", re.UNICODE)\n_removePat = re.compile(ur'\\b(' + ur'|'.join((u\"a\", u\"an\", u\"as\", u\"at\", u\"before\", u\"but\", u\"by\", u\"for\", u\"from\",\n                            u\"is\", u\"in\", u\"into\", u\"like\", u\"of\", u\"off\", u\"on\", u\"onto\", u\"per\",\n                            u\"since\", u\"than\", u\"the\", u\"this\", u\"that\", u\"to\", u\"up\", u\"via\",\n                            u\"with\")) + ur')\\b', re.UNICODE | re.IGNORECASE)\n_nonWordSpaceDashPat = re.compile(ur'[^\\w\\s\\-\\./]', re.UNICODE)\n_multiSpacePat = re.compile(ur'[\\s\\-_\\./]+', re.UNICODE)\n_spacePat = re.compile(ur' ', re.UNICODE)\n_linkPat = re.compile(ur'^(?:([A-Za-z0-9]+):)?([^\\|]+)(?:\\|([^\\n]+?))?\\]\\](.*)$', re.UNICODE | re.DOTALL)\n_bracketedLinkPat = re.compile(ur'(?:\\[((?:mailto:|git://|irc://|https?://|ftp://|/)[^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']*)\\s*(.*?)\\])', re.UNICODE)\n_internalLinkPat = re.compile(ur'\\[\\[(?:(:?[^:\\]]*?):\\s*)?(.*?)\\]\\]')\n_protocolPat = re.compile(ur'(\\b(?:mailto:|irc://|https?://|ftp://))', re.UNICODE)\n_specialUrlPat = re.compile(ur'^([^<>\\]\\[' + u\"\\x00-\\x20\\x7f\" + ur']+)(.*)$', re.UNICODE)\n_protocolsPat = re.compile(ur'^(mailto:|irc://|https?://|ftp://)$', re.UNICODE)\n_controlCharsPat = re.compile(ur'[\\]\\[<>\"' + u\"\\\\x00-\\\\x20\\\\x7F\" + ur']]', re.UNICODE)\n_hostnamePat = re.compile(ur'^([^:]+:)(//[^/]+)?(.*)$', re.UNICODE)\n_stripPat = re.compile(u'\\\\s|\\u00ad|\\u1806|\\u200b|\\u2060|\\ufeff|\\u03f4|\\u034f|\\u180b|\\u180c|\\u180d|\\u200c|\\u200d|[\\ufe00-\\ufe0f]', re.UNICODE)\n_zomgPat = re.compile(ur'^(:*)\\{\\|(.*)$', re.UNICODE)\n_headerPat = re.compile(ur\"<[Hh]([1-6])(.*?)>(.*?)</[Hh][1-6] *>\", re.UNICODE)\n_templateSectionPat = re.compile(ur\"<!--MWTEMPLATESECTION=([^&]+)&([^_]+)-->\", re.UNICODE)\n_tagPat = re.compile(ur\"<.*?>\", re.UNICODE)\n_startRegexHash = {}\n_endRegexHash = {}\n_endCommentPat = re.compile(ur'(-->)', re.UNICODE)\n_extractTagsAndParams_n = 1\n_guillemetLeftPat = re.compile(ur'(.) (\\?|:|;|!|\\302\\273)', re.UNICODE)\n_guillemetRightPat = re.compile(ur'(\\302\\253) ', re.UNICODE)\n\ndef setupAttributeWhitelist():\n    common = ( u'id', u'class', u'lang', u'dir', u'title', u'style' )\n    block = common + (u'align',)\n    tablealign = ( u'align', u'char', u'charoff', u'valign' )\n    tablecell = ( u'abbr',\n                    u'axis',\n                    u'headers',\n                    u'scope',\n                    u'rowspan',\n                    u'colspan',\n                    u'nowrap', # deprecated\n                    u'width',  # deprecated\n                    u'height', # deprecated\n                    u'bgcolor' # deprecated\n                    )\n    return {\n        u'div':            block,\n        u'center':        common, # deprecated\n        u'span':        block, # ??\n        u'h1':            block,\n        u'h2':            block,\n        u'h3':            block,\n        u'h4':            block,\n        u'h5':            block,\n        u'h6':            block,\n        u'em':            common,\n        u'strong':        common,\n        u'cite':        common,\n        u'code':        common,\n        u'var':            common,\n        u'img':            common + (u'src', u'alt', u'width', u'height',),\n        u'blockquote':    common + (u'cite',),\n        u'sub':            common,\n        u'sup':            common,\n        u'p':            block,\n        u'br':            (u'id', u'class', u'title', u'style', u'clear',),\n        u'pre':            common + (u'width',),\n        u'ins':            common + (u'cite', u'datetime'),\n        u'del':            common + (u'cite', u'datetime'),\n        u'ul':            common + (u'type',),\n        u'ol':            common + (u'type', u'start'),\n        u'li':            common + (u'type', u'value'),\n        u'dl':            common,\n        u'dd':            common,\n        u'dt':            common,\n        u'table':        common + ( u'summary', u'width', u'border', u'frame',\n                                    u'rules', u'cellspacing', u'cellpadding',\n                                    u'align', u'bgcolor',\n                            ),\n        u'caption':        common + (u'align',),\n        u'thead':        common + tablealign,\n        u'tfoot':        common + tablealign,\n        u'tbody':        common + tablealign,\n        u'colgroup':    common + ( u'span', u'width' ) + tablealign,\n        u'col':            common + ( u'span', u'width' ) + tablealign,\n        u'tr':            common + ( u'bgcolor', ) + tablealign,\n        u'td':            common + tablecell + tablealign,\n        u'th':            common + tablecell + tablealign,\n        u'tt':            common,\n        u'b':            common,\n        u'i':            common,\n        u'big':            common,\n        u'small':        common,\n        u'strike':        common,\n        u's':            common,\n        u'u':            common,\n        u'font':        common + ( u'size', u'color', u'face' ),\n        u'hr':            common + ( u'noshade', u'size', u'width' ),\n        u'video':       common + ( u'width', u'height', u'controls' ),\n        u'source':       common + ( u'src', u'type' ),\n    }\n_whitelist = setupAttributeWhitelist()\n_page_cache = {}\n#env = {}\n\n# Used for bleach, list of allowed tags\nALLOWED_TAGS = list(_htmlelements + ('a',))\n\nALLOWED_ATTRIBUTES = {\n    'a': ['href', 'title', 'rel'],\n    'div': ['id'],\n    'h1': ['id'],\n    'h2': ['id'],\n    'h3': ['id'],\n    'h4': ['id'],\n    'h5': ['id'],\n    'h6': ['id'],\n    'li': ['class'],\n    'span': ['class'],\n}\n\n\nclass BaseParser(object):\n    def __init__(self):\n        self.uniq_prefix = u\"\\x07UNIQ\" + unicode(random.randint(1, 1000000000))\n        self.strip_state = {}\n        self.arg_stack = []\n    #    self.env = env\n    #    self.keep_env = (env != {})\n        # tag hooks\n        self.tagHooks = {}\n        # [[internal link]] hooks\n        self.internalLinkHooks = {}\n\n    #def __del__(self):\n    #    if not self.keep_env:\n    #        global env\n    #        env = {}\n\n    def registerTagHook(self, tag, function):\n        self.tagHooks[tag] = function\n\n    def registerInternalLinkHook(self, tag, function):\n        \"\"\"\n        Register a hook called for [[internal links]].  There is no default\n        handling for internal links.\n\n        def internalLinkHook(parser_env, namespace, body):\n        ...\n        return replacement\n\n        parser.registerInternalLinkHook(None, internalLinkHook)  # called for [[link]]\n        parser.registerInternalLinkHook('Wikipedia', internalLinkHook)  # called for [[Wikipedia:link]]\n        parser.registerInternalLinkHook(':en', internalLinkHook)  # called for [[:en:link]]\n        parser.registerInternalLinkHook(':', internalLinkHook)  # called for [[:any:link]] not hooked above\n        parser.registerInternalLinkHook('*', internalLinkHook)  # called for [[anything]] not hooked above\n        \"\"\"\n        self.internalLinkHooks[tag] = function\n\n    #def store_object(self, namespace, key, value=True):\n    #    \"\"\"\n    #    Used to store objects in the environment\n    #    which assists in preventing recursive imports.\n    #    \"\"\"\n    #    # Store the item to not reprocess it\n    #    if namespace not in self.env:\n    #        self.env[namespace] = {}\n    #    self.env[namespace][key] = value\n\n    #def has_object(self, namespace, key):\n    #    if namespace not in self.env:\n    #        self.env[namespace] = {}\n    #    if hasattr(self, 'count'):\n    #        data = self.env[namespace]\n    #        test = key in data\n    #        ls\n    #        self.count = True\n    #    return key in self.env[namespace]\n\n    #def retrieve_object(self, namespace, key, default=None):\n    #    if not self.env.get(namespace):\n    #        self.env[namespace] = {}\n    #    return self.env[namespace].get(key, default)\n\n    def parse(self, text):\n        utf8 = isinstance(text, str)\n        text = to_unicode(text)\n        if text[-1:] != u'\\n':\n            text = text + u'\\n'\n            taggedNewline = True\n        else:\n            taggedNewline = False\n\n        text = self.strip(text)\n        text = self.removeHtmlTags(text)\n        text = self.parseHorizontalRule(text)\n        text = self.parseAllQuotes(text)\n        text = self.replaceExternalLinks(text)\n        text = self.replaceInternalLinks(text)\n        text = self.unstrip(text)\n        text = self.fixtags(text)\n        text = self.doBlockLevels(text, True)\n        text = self.unstripNoWiki(text)\n        text = text.split(u'\\n')\n        text = u'\\n'.join(text)\n        if taggedNewline and text[-1:] == u'\\n':\n            text = text[:-1]\n        if utf8:\n            return text.encode(\"utf-8\")\n        return text\n\n    def strip(self, text, stripcomments=False, dontstrip=[]):\n        render = True\n\n        commentState = {}\n\n        elements = ['nowiki',]  + self.tagHooks.keys()\n        if True: #wgRawHtml\n            elements.append('html')\n\n        # Removing $dontstrip tags from $elements list (currently only 'gallery', fixing bug 2700)\n        for k in dontstrip:\n            if k in elements:\n                del elements[k]\n\n        matches = {}\n        text = self.extractTagsAndParams(elements, text, matches)\n\n        for marker in matches:\n            element, content, params, tag = matches[marker]\n            if render:\n                tagName = element.lower()\n                if tagName == u'!--':\n                    # comment\n                    output = tag\n                    if tag[-3:] != u'-->':\n                        output += \"-->\"\n                elif tagName == u'html':\n                    output = content\n                elif tagName == u'nowiki':\n                    output = content.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n                else:\n                    if tagName in self.tagHooks:\n                        output = self.tagHooks[tagName](self, content, params)\n                    else:\n                        output = content.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n            else:\n                # Just stripping tags; keep the source\n                output = tag\n\n            # Unstrip the output, because unstrip() is no longer recursive so\n            # it won't do it itself\n            output = self.unstrip(output)\n\n            if not stripcomments and element == u'!--':\n                commentState[marker] = output\n            elif element == u'html' or element == u'nowiki':\n                if 'nowiki' not in self.strip_state:\n                    self.strip_state['nowiki'] = {}\n                self.strip_state['nowiki'][marker] = output\n            else:\n                if 'general' not in self.strip_state:\n                    self.strip_state['general'] = {}\n                self.strip_state['general'][marker] = output\n\n        # Unstrip comments unless explicitly told otherwise.\n        # (The comments are always stripped prior to this point, so as to\n        # not invoke any extension tags / parser hooks contained within\n        # a comment.)\n        if not stripcomments:\n            # Put them all back and forget them\n            for k in commentState:\n                v = commentState[k]\n                text = text.replace(k, v)\n\n        return text\n\n    def removeHtmlTags(self, text):\n        \"\"\"convert bad tags into HTML identities\"\"\"\n        sb = []\n        bits = text.split(u'<')\n        sb.append(bits.pop(0))\n        tagstack = []\n        tablestack = tagstack\n        for x in bits:\n            m = _tagPattern.match(x)\n            if not m:\n                #  If it isn't a tag, leave it in place and move on\n                sb.append(u'<%s' % x)\n                continue\n            slash, t, params, brace, rest = m.groups()\n            t = t.lower()\n            badtag = False\n            if t in _htmlelements:\n                # Check our stack\n                if slash:\n                    # Closing a tag...\n                    if t in _htmlsingle or len(tagstack) == 0:\n                        badtag = True\n                    else:\n                        ot = tagstack.pop()\n                        if ot != t:\n                            if ot in _htmlsingleallowed:\n                                # Pop all elements with an optional close tag\n                                # and see if we find a match below them\n                                optstack = []\n                                optstack.append(ot)\n                                while True:\n                                    if len(tagstack) == 0:\n                                        break\n                                    ot = tagstack.pop()\n                                    if ot == t or ot not in _htmlsingleallowed:\n                                        break\n                                    optstack.append(ot)\n                                if t != ot:\n                                    # No match. Push the optinal elements back again\n                                    badtag = True\n                                    tagstack += reversed(optstack)\n                            else:\n                                tagstack.append(ot)\n                                # <li> can be nested in <ul> or <ol>, skip those cases:\n                                if ot not in _htmllist and t in _listtags:\n                                    badtag = True\n                        elif t == u'table':\n                            if len(tablestack) == 0:\n                                bagtag = True\n                            else:\n                                tagstack = tablestack.pop()\n                    newparams = u''\n                else:\n                    # Keep track for later\n                    if t in _tabletags and u'table' not in tagstack:\n                        badtag = True\n                    elif t in tagstack and t not in _htmlnest:\n                        badtag = True\n                    # Is it a self-closed htmlpair? (bug 5487)\n                    elif brace == u'/>' and t in _htmlpairs:\n                        badTag = True\n                    elif t in _htmlsingle:\n                        # Hack to force empty tag for uncloseable elements\n                        brace = u'/>'\n                    else:\n                        if t == u'table':\n                            tablestack.append(tagstack)\n                            tagstack = []\n                        tagstack.append(t)\n                    newparams = self.fixTagAttributes(params, t)\n                if not badtag:\n                    rest = rest.replace(u'>', u'&gt;')\n                    if brace == u'/>':\n                        close = u' /'\n                    else:\n                        close = u''\n                    sb.append(u'<')\n                    sb.append(slash)\n                    sb.append(t)\n                    sb.append(newparams)\n                    sb.append(close)\n                    sb.append(u'>')\n                    sb.append(rest)\n                    continue\n            sb.append(u'&lt;')\n            sb.append(x.replace(u'>', u'&gt;'))\n\n        # Close off any remaining tags\n        while tagstack:\n            t = tagstack.pop()\n            sb.append(u'</')\n            sb.append(t)\n            sb.append(u'>\\n')\n            if t == u'table':\n                if not tablestack:\n                    break\n                tagstack = tablestack.pop()\n\n        return u''.join(sb)\n\n    def removeHtmlComments(self, text):\n        \"\"\"remove <!-- text --> comments from given text\"\"\"\n        sb = []\n        start = text.find(u'<!--')\n        last = 0\n        while start != -1:\n            end = text.find(u'-->', start)\n            if end == -1:\n                break\n            end += 3\n\n            spaceStart = max(0, start-1)\n            spaceEnd = end\n            while text[spaceStart] == u' ' and spaceStart > 0:\n                spaceStart -= 1\n            while text[spaceEnd] == u' ':\n                spaceEnd += 1\n\n            if text[spaceStart] == u'\\n' and text[spaceEnd] == u'\\n':\n                sb.append(text[last:spaceStart])\n                sb.append(u'\\n')\n                last = spaceEnd+1\n            else:\n                sb.append(text[last:spaceStart+1])\n                last = spaceEnd\n\n            start = text.find(u'<!--', end)\n        sb.append(text[last:])\n        return u''.join(sb)\n\n    def decodeTagAttributes(self, text):\n        \"\"\"docstring for decodeTagAttributes\"\"\"\n        attribs = {}\n        if text.strip() == u'':\n            return attribs\n        scanner = _attributePat.scanner(text)\n        match = scanner.search()\n        while match:\n            key, val1, val2, val3, val4 = match.groups()\n            value = val1 or val2 or val3 or val4\n            if value:\n                value = _space.sub(u' ', value).strip()\n            else:\n                value = ''\n            attribs[key] = self.decodeCharReferences(value)\n\n            match = scanner.search()\n        return attribs\n\n    def validateTagAttributes(self, attribs, element):\n        \"\"\"docstring for validateTagAttributes\"\"\"\n        out = {}\n        if element not in _whitelist:\n            return out\n        whitelist = _whitelist[element]\n        for attribute in attribs:\n            value = attribs[attribute]\n            if attribute not in whitelist:\n                continue\n            # Strip javascript \"expression\" from stylesheets.\n            # http://msdn.microsoft.com/workshop/author/dhtml/overview/recalc.asp\n            if attribute == u'style':\n                value = self.checkCss(value)\n                if value == False:\n                    continue\n            elif attribute == u'id':\n                value = self.escapeId(value)\n            # If this attribute was previously set, override it.\n            # Output should only have one attribute of each name.\n            out[attribute] = value\n        return out\n\n    def safeEncodeAttribute(self, encValue):\n        \"\"\"docstring for safeEncodeAttribute\"\"\"\n        encValue = encValue.replace(u'&', u'&amp;')\n        encValue = encValue.replace(u'<', u'&lt;')\n        encValue = encValue.replace(u'>', u'&gt;')\n        encValue = encValue.replace(u'\"', u'&quot;')\n        encValue = encValue.replace(u'{', u'&#123;')\n        encValue = encValue.replace(u'[', u'&#91;')\n        encValue = encValue.replace(u\"''\", u'&#39;&#39;')\n        encValue = encValue.replace(u'ISBN', u'&#73;SBN')\n        encValue = encValue.replace(u'RFC', u'&#82;FC')\n        encValue = encValue.replace(u'PMID', u'&#80;MID')\n        encValue = encValue.replace(u'|', u'&#124;')\n        encValue = encValue.replace(u'__', u'&#95;_')\n        encValue = encValue.replace(u'\\n', u'&#10;')\n        encValue = encValue.replace(u'\\r', u'&#13;')\n        encValue = encValue.replace(u'\\t', u'&#9;')\n        return encValue\n\n    def fixTagAttributes(self, text, element):\n        if text.strip() == u'':\n            return u''\n\n        stripped = self.validateTagAttributes(self.decodeTagAttributes(text), element)\n\n        sb = []\n\n        for attribute in stripped:\n            value = stripped[attribute]\n            encAttribute = attribute.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n            encValue = self.safeEncodeAttribute(value)\n\n            sb.append(u' ')\n            sb.append(encAttribute)\n            sb.append(u'=\"')\n            sb.append(encValue)\n            sb.append(u'\"')\n\n        return u''.join(sb)\n\n    def validateCodepoint(self, codepoint):\n        return codepoint ==    0x09 \\\n            or codepoint ==    0x0a \\\n            or codepoint ==    0x0d \\\n            or (codepoint >=    0x20 and codepoint <=   0xd7ff) \\\n            or (codepoint >=  0xe000 and codepoint <=   0xfffd) \\\n            or (codepoint >= 0x10000 and codepoint <= 0x10ffff)\n\n    def _normalizeCallback(self, match):\n        text, norm, dec, hexval, _ = match.groups()\n        if norm:\n            sb = []\n            sb.append(u'&')\n            if norm not in _htmlEntities:\n                sb.append(u'amp;')\n            sb.append(norm)\n            sb.append(u';')\n            return u''.join(sb)\n        elif dec:\n            dec = int(dec)\n            if self.validateCodepoint(dec):\n                sb = []\n                sb.append(u'&#')\n                sb.append(dec)\n                sb.append(u';')\n                return u''.join(sb)\n        elif hexval:\n            hexval = int(hexval, 16)\n            if self.validateCodepoint(hexval):\n                sb = []\n                sb.append(u'&#x')\n                sb.append(hex(hexval))\n                sb.append(u';')\n                return u''.join(sb)\n        return text.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;')\n\n    def normalizeCharReferences(self, text):\n        \"\"\"docstring for normalizeCharReferences\"\"\"\n        return _charRefsPat.sub(self._normalizeCallback, text)\n\n    def _decodeCallback(self, match):\n        text, norm, dec, hexval, _ = match.groups()\n        if norm:\n            if norm in _htmlEntities:\n                return unichr(_htmlEntities[norm])\n            else:\n                sb = []\n                sb.append(u'&')\n                sb.append(norm)\n                sb.append(u';')\n                return u''.join(sb)\n        elif dec:\n            dec = int(dec)\n            if self.validateCodepoint(dec):\n                return unichr(dec)\n            return u'?'\n        elif hexval:\n            hexval = int(hexval, 16)\n            if self.validateCodepoint(dec):\n                return unichr(dec)\n            return u'?'\n        return text\n\n    def decodeCharReferences(self, text):\n        \"\"\"docstring for decodeCharReferences\"\"\"\n        if text:\n            return _charRefsPat.sub(self._decodeCallback, text)\n        return ''\n\n    def _convertToUtf8(self, s):\n        return unichr(int(s.group(1), 16))\n\n    def checkCss(self, value):\n        \"\"\"docstring for checkCss\"\"\"\n        stripped = self.decodeCharReferences(value)\n\n        stripped = _cssCommentPat.sub(u'', stripped)\n        value = stripped\n\n        stripped = _toUTFPat.sub(self._convertToUtf8, stripped)\n        stripped.replace(u'\\\\', u'')\n        if _hackPat.search(stripped):\n            # someone is haxx0ring\n            return False\n\n        return value\n\n    def escapeId(self, value):\n        \"\"\"docstring for escapeId\"\"\"\n        # TODO\n        return safe_name(value)\n\n    def parseHorizontalRule(self, text):\n        return _hrPat.sub(ur'<hr />', text)\n\n    def parseHeaders(self, text):\n        text = _h6Pat.sub(ur'<h6>\\1</h6>', text)\n        text = _h5Pat.sub(ur'<h5>\\1</h5>', text)\n        text = _h4Pat.sub(ur'<h4>\\1</h4>', text)\n        text = _h3Pat.sub(ur'<h3>\\1</h3>', text)\n        text = _h2Pat.sub(ur'<h2>\\1</h2>', text)\n        text = _h1Pat.sub(ur'<h1>\\1</h1>', text)\n        return text\n\n    def parseQuotes(self, text):\n        arr = _quotePat.split(text)\n        if len(arr) == 1:\n            return text\n        # First, do some preliminary work. This may shift some apostrophes from\n        # being mark-up to being text. It also counts the number of occurrences\n        # of bold and italics mark-ups.\n        numBold = 0\n        numItalics = 0\n        for i,r in zip(range(len(arr)), arr):\n            if i%2 == 1:\n                l = len(r)\n                if l == 4:\n                    arr[i-1] += u\"'\"\n                    arr[i] = u\"'''\"\n                elif l > 5:\n                    arr[i-1] += u\"'\" * (len(arr[i]) - 5)\n                    arr[i] = u\"'''''\"\n                if l == 2:\n                    numItalics += 1\n                elif l >= 5:\n                    numItalics += 1\n                    numBold += 1\n                else:\n                    numBold += 1\n\n        # If there is an odd number of both bold and italics, it is likely\n        # that one of the bold ones was meant to be an apostrophe followed\n        # by italics. Which one we cannot know for certain, but it is more\n        # likely to be one that has a single-letter word before it.\n        if numBold%2 == 1 and numItalics%2 == 1:\n            firstSingleLetterWord = -1\n            firstMultiLetterWord = -1\n            firstSpace = -1\n            for i,r in zip(range(len(arr)), arr):\n                if i%2 == 1 and len(r) == 3:\n                    x1 = arr[i-1][-1:]\n                    x2 = arr[i-1][-2:-1]\n                    if x1 == u' ':\n                        if firstSpace == -1:\n                            firstSpace = i\n                    elif x2 == u' ':\n                        if firstSingleLetterWord == -1:\n                            firstSingleLetterWord = i\n                    else:\n                        if firstMultiLetterWord == -1:\n                            firstMultiLetterWord = i\n\n            # If there is a single-letter word, use it!\n            if firstSingleLetterWord > -1:\n                arr[firstSingleLetterWord] = u\"''\"\n                arr[firstSingleLetterWord-1] += u\"'\"\n            # If not, but there's a multi-letter word, use that one.\n            elif firstMultiLetterWord > -1:\n                arr[firstMultiLetterWord] = u\"''\"\n                arr[firstMultiLetterWord-1] += u\"'\"\n            # ... otherwise use the first one that has neither.\n            # (notice that it is possible for all three to be -1 if, for example,\n            # there is only one pentuple-apostrophe in the line)\n            elif firstSpace > -1:\n                arr[firstSpace] = u\"''\"\n                arr[firstSpace-1] += u\"'\"\n\n        # Now let's actually convert our apostrophic mush to HTML!\n        output = []\n        buffer = None\n        state = ''\n        for i,r in zip(range(len(arr)), arr):\n            if i%2 == 0:\n                if state == 'both':\n                    buffer.append(r)\n                else:\n                    output.append(r)\n            else:\n                if len(r) == 2:\n                    if state == 'i':\n                        output.append(u\"</em>\")\n                        state = ''\n                    elif state == 'bi':\n                        output.append(u\"</em>\")\n                        state = 'b'\n                    elif state == 'ib':\n                        output.append(u\"</strong></em><strong>\")\n                        state = 'b'\n                    elif state == 'both':\n                        output.append(u\"<strong><em>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</em>\")\n                        state = 'b'\n                    elif state == 'b':\n                        output.append(u\"<em>\")\n                        state = 'bi'\n                    else: # ''\n                        output.append(u\"<em>\")\n                        state = 'i'\n                elif len(r) == 3:\n                    if state == 'b':\n                        output.append(u\"</strong>\")\n                        state = ''\n                    elif state == 'bi':\n                        output.append(u\"</em></strong><em>\")\n                        state = 'i'\n                    elif state == 'ib':\n                        output.append(u\"</strong>\")\n                        state = 'i'\n                    elif state == 'both':\n                        output.append(u\"<em><strong>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</strong>\")\n                        state = 'i'\n                    elif state == 'i':\n                        output.append(u\"<strong>\")\n                        state = 'ib'\n                    else: # ''\n                        output.append(u\"<strong>\")\n                        state = 'b'\n                elif len(r) == 5:\n                    if state == 'b':\n                        output.append(u\"</strong><em>\")\n                        state = 'i'\n                    elif state == 'i':\n                        output.append(u\"</em><strong>\")\n                        state = 'b'\n                    elif state == 'bi':\n                        output.append(u\"</em></strong>\")\n                        state = ''\n                    elif state == 'ib':\n                        output.append(u\"</strong></em>\")\n                        state = ''\n                    elif state == 'both':\n                        output.append(u\"<em><strong>\")\n                        output.append(u''.join(buffer))\n                        buffer = None\n                        output.append(u\"</strong></em>\")\n                        state = ''\n                    else: # ''\n                        buffer = []\n                        state = 'both'\n\n        if state == 'both':\n            output.append(u\"<em><strong>\")\n            output.append(u''.join(buffer))\n            buffer = None\n            output.append(u\"</strong></em>\")\n        elif state != '':\n            if state == 'b' or state == 'ib':\n                output.append(u\"</strong>\")\n            if state == 'i' or state == 'bi' or state == 'ib':\n                output.append(u\"</em>\")\n            if state == 'bi':\n                output.append(u\"</strong>\")\n        return u''.join(output)\n\n    def parseAllQuotes(self, text):\n        sb = []\n        lines = text.split(u'\\n')\n        first = True\n        for line in lines:\n            if not first:\n                sb.append(u'\\n')\n            else:\n                first = False\n            sb.append(self.parseQuotes(line))\n        return u''.join(sb)\n\n    def replaceExternalLinks(self, text):\n        sb = []\n        bits = _bracketedLinkPat.split(text)\n        l = len(bits)\n        i = 0\n        num_links = 0\n        while i < l:\n            if i%3 == 0:\n                #sb.append(self.replaceFreeExternalLinks(bits[i]))\n                sb.append(bits[i])\n                i += 1\n            else:\n                sb.append(u'<a href=\"')\n                sb.append(bits[i])\n                sb.append(u'\">')\n                if not bits[i+1]:\n                    num_links += 1\n                    sb.append(to_unicode(truncate_url(bits[i])))\n                else:\n                    sb.append(bits[i+1])\n                sb.append(u'</a>')\n                i += 2\n        return ''.join(sb)\n\n    def replaceInternalLinks(self, text):\n        sb = []\n        # [[x]] -> (None, 'x')\n        # [[type:x]] -> ('type','x')\n        # [[:type:x]] -> (':type','x')\n        bits = _internalLinkPat.split(text)\n        l = len(bits)\n        i = 0\n        num_links = 0\n        while i < l:\n            if i%3 == 0:\n                sb.append(bits[i])\n                i += 1\n            else:\n                space, name = bits[i:i+2]\n                if space in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks[space](\n                        self, space, name))\n                elif space and space.startswith(':') and \\\n                     ':' in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks[':'](self, space, name))\n                elif '*' in self.internalLinkHooks:\n                    sb.append(self.internalLinkHooks['*'](self, space, name))\n                elif bits[i]:\n                    sb.append(u'[[%s:%s]]' % (bits[i], bits[i+1]))\n                else:\n                    sb.append(u'[[%s]]' % bits[i+1])\n                i += 2\n        return ''.join(sb)\n\n    # TODO: fix this so it actually works\n    def replaceFreeExternalLinks(self, text):\n        bits = _protocolPat.split(text)\n        sb = [bits.pop(0)]\n        i = 0\n        l = len(bits)\n        while i < l:\n            protocol = bits[i]\n            remainder = bits[i+1]\n            i += 2\n            match = _specialUrlPat.match(remainder)\n            if match:\n                # Found some characters after the protocol that look promising\n                url = protocol + match.group(1)\n                trail = match.group(2)\n\n                # special case: handle urls as url args:\n                # http://www.example.com/foo?=http://www.example.com/bar\n                if len(trail) == 0 and len(bits) > i and _protocolsPat.match(bits[i]):\n                    match = _specialUrlPat.match(remainder)\n                    if match:\n                        url += bits[i] + match.group(1)\n                        i += 2\n                        trail = match.group(2)\n\n                # The characters '<' and '>' (which were escaped by\n                # removeHTMLtags()) should not be included in\n                # URLs, per RFC 2396.\n                pos = max(url.find('&lt;'), url.find('&gt;'))\n                if pos != -1:\n                    trail = url[pos:] + trail\n                    url = url[0:pos]\n\n                sep = ',;.:!?'\n                if '(' not in url:\n                    sep += ')'\n\n                i = len(url)-1\n                while i >= 0:\n                    char = url[i]\n                    if char not in sep:\n                        break\n                    i -= 1\n                i += 1\n\n                if i != len(url):\n                    trail = url[i:] + trail\n                    url = url[0:i]\n\n                url = cleanURL(url)\n\n                sb.append(u'<a href=\"')\n                sb.append(url)\n                sb.append(u'\">')\n                sb.append(truncate_url(url))\n                sb.append(u'</a>')\n                #sb.append(text)\n                sb.append(trail)\n            else:\n                sb.append(protocol)\n                sb.append(remainder)\n        return ''.join(sb)\n\n    def urlencode(self, char):\n        num = ord(char)\n        if num == 32:\n            return '+'\n        return \"%%%02x\" % num\n\n    def cleanURL(self, url):\n        # Normalize any HTML entities in input. They will be\n        # re-escaped by makeExternalLink().\n        url = self.decodeCharReferences(url)\n\n        # Escape any control characters introduced by the above step\n        url = _controlCharsPat.sub(self.urlencode, url)\n\n        # Validate hostname portion\n        match = _hostnamePat.match(url)\n        if match:\n            protocol, host, rest = match.groups()\n\n            # Characters that will be ignored in IDNs.\n            # http://tools.ietf.org/html/3454#section-3.1\n            # Strip them before further processing so blacklists and such work.\n\n            _stripPat.sub('', host)\n\n            # @fixme: validate hostnames here\n\n            return protocol + host + rest\n        else:\n            return url\n\n    def unstripForHTML(self, text):\n        text = self.unstrip(text)\n        text = self.unstripNoWiki(text)\n        return text\n\n    def unstrip(self, text):\n        if 'general' not in self.strip_state:\n            return text\n\n        general = self.strip_state['general']\n        for k in general:\n            v = general[k]\n            text = text.replace(k, v)\n        return text\n\n    def unstripNoWiki(self, text):\n        if 'nowiki' not in self.strip_state:\n            return text\n        nowiki = self.strip_state['nowiki']\n        for k in nowiki:\n            v = nowiki[k]\n            text = text.replace(k, v)\n        return text\n\n    def extractTagsAndParams(self, elements, text, matches):\n        \"\"\"\n        Replaces all occurrences of HTML-style comments and the given tags\n        in the text with a random marker and returns teh next text. The output\n        parameter $matches will be an associative array filled with data in\n        the form:\n          'UNIQ-xxxxx' => array(\n          'element',\n          'tag content',\n          array( 'param' => 'x' ),\n          '<element param=\"x\">tag content</element>' ) )\n        \"\"\"\n        stripped = u''\n\n        taglist = u'|'.join(elements)\n        if taglist not in _startRegexHash:\n            _startRegexHash[taglist] = re.compile(ur\"<(\" + taglist + ur\")(\\s+[^>]*?|\\s*?)(/?>)|<(!--)\", re.UNICODE | re.IGNORECASE)\n        start = _startRegexHash[taglist]\n\n        while text != u'':\n            p = start.split(text, 1)\n            stripped += p[0]\n            if len(p) == 1:\n                break\n            elif p[4]:\n                # comment\n                element = p[4]\n                attributes = u''\n                close = u''\n            else:\n                element = p[1]\n                attributes = p[2]\n                close = p[3]\n            inside = p[5]\n\n            global _extractTagsAndParams_n\n            marker = self.uniq_prefix + u'-' + element + u'-' + (u\"%08X\" % _extractTagsAndParams_n) + u'-QINU'\n            _extractTagsAndParams_n += 1\n            stripped += marker\n\n            if close == u'/>':\n                # empty element tag, <tag />\n                content = None\n                text = inside\n                tail = None\n            else:\n                if element == u'!--':\n                    end = _endCommentPat\n                else:\n                    if element not in _endRegexHash:\n                        _endRegexHash[element] = re.compile(ur'(</' + element + ur'\\s*>)', re.UNICODE | re.IGNORECASE)\n                    end = _endRegexHash[element]\n                q = end.split(inside, 1)\n                content = q[0]\n                if len(q) < 3:\n                    # no end tag\n                    tail = ''\n                    text = ''\n                else:\n                    tail = q[1]\n                    text = q[2]\n\n            matches[marker] = (\n                element,\n                content,\n                self.decodeTagAttributes(attributes),\n                u\"<\" + element + attributes + close + content + tail\n            )\n        return stripped\n\n    def fixtags(self, text):\n        \"\"\"Clean up special characters, only run once, next-to-last before doBlockLevels\"\"\"\n        # french spaces, last one Guillemet-left\n        # only if there is something before the space\n        text = _guillemetLeftPat.sub(ur'\\1&nbsp;\\2', text)\n        # french spaces, Guillemet-right\n        text = _guillemetRightPat.sub(ur'\\1&nbsp;', text)\n        return text\n\n    def closeParagraph(self, mLastSection):\n        \"\"\"Used by doBlockLevels()\"\"\"\n        result = u''\n        if mLastSection != u'':\n            result = u'</' + mLastSection + u'>\\n'\n\n        return result\n\n    def getCommon(self, st1, st2):\n        \"\"\"\n        getCommon() returns the length of the longest common substring\n        of both arguments, starting at the beginning of both.\n        \"\"\"\n        fl = len(st1)\n        shorter = len(st2)\n        if fl < shorter:\n            shorter = fl\n\n        i = 0\n        while i < shorter:\n            if st1[i] != st2[i]:\n                break\n            i += 1\n        return i\n\n    def openList(self, char, mLastSection):\n        \"\"\"\n        These next three functions open, continue, and close the list\n        element appropriate to the prefix character passed into them.\n        \"\"\"\n        result = self.closeParagraph(mLastSection)\n\n        mDTopen = False\n        if char == u'*':\n            result += u'<ul><li>'\n        elif char == u'#':\n            result += u'<ol><li>'\n        elif char == u':':\n            result += u'<dl><dd>'\n        elif char == u';':\n            result += u'<dl><dt>'\n            mDTopen = True\n        else:\n            result += u'<!-- ERR 1 -->'\n\n        return result, mDTopen\n\n    def nextItem(self, char, mDTopen):\n        if char == u'*' or char == '#':\n            return u'</li><li>', None\n        elif char == u':' or char == u';':\n            close = u'</dd>'\n            if mDTopen:\n                close = '</dt>'\n            if char == u';':\n                return close + u'<dt>', True\n            else:\n                return close + u'<dd>', False\n        return u'<!-- ERR 2 -->'\n\n    def closeList(self, char, mDTopen):\n        if char == u'*':\n            return u'</li></ul>\\n'\n        elif char == u'#':\n            return u'</li></ol>\\n'\n        elif char == u':':\n            if mDTopen:\n                return u'</dt></dl>\\n'\n            else:\n                return u'</dd></dl>\\n'\n        else:\n            return u'<!-- ERR 3 -->'\n\n    def findColonNoLinks(self, text, before, after):\n        try:\n            pos = text.search(':')\n        except:\n            return False\n\n        lt = text.find('<')\n        if lt == -1 or lt > pos:\n            # Easy; no tag nesting to worry about\n            before = text[0:pos]\n            after = text[0:pos+1]\n            return before, after, pos\n\n        # Ugly state machine to walk through avoiding tags.\n        state = MW_COLON_STATE_TEXT;\n        stack = 0;\n        i = 0\n        while i < len(text):\n            c = text[i];\n\n            if state == 0: # MW_COLON_STATE_TEXT:\n                if text[i] == '<':\n                    # Could be either a <start> tag or an </end> tag\n                    state = MW_COLON_STATE_TAGSTART\n                elif text[i] == ':':\n                    if stack == 0:\n                        # we found it\n                        return text[0:i], text[i+1], i\n                else:\n                    # Skip ahead looking for something interesting\n                    try:\n                        colon = text.search(':', i)\n                    except:\n                        return False\n                    lt = text.find('<', i)\n                    if stack == 0:\n                        if lt == -1 or colon < lt:\n                            # we found it\n                            return text[0:colon], text[colon+1], i\n                    if lt == -1:\n                        break\n                    # Skip ahead to next tag start\n                    i = lt\n                    state = MW_COLON_STATE_TAGSTART\n            elif state == 1: # MW_COLON_STATE_TAG:\n                # In a <tag>\n                if text[i] == '>':\n                    stack += 1\n                    state = MW_COLON_STATE_TEXT\n                elif text[i] == '/':\n                    state = MW_COLON_STATE_TAGSLASH\n            elif state == 2: # MW_COLON_STATE_TAGSTART:\n                if text[i] == '/':\n                    state = MW_COLON_STATE_CLOSETAG\n                elif text[i] == '!':\n                    state = MW_COLON_STATE_COMMENT\n                elif text[i] == '>':\n                    # Illegal early close? This shouldn't happen D:\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    state = MW_COLON_STATE_TAG\n            elif state == 3: # MW_COLON_STATE_CLOSETAG:\n                # In a </tag>\n                if text[i] == '>':\n                    stack -= 1\n                    if stack < 0:\n                        return False\n                    state = MW_COLON_STATE_TEXT\n            elif state == MW_COLON_STATE_TAGSLASH:\n                if text[i] == '>':\n                    # Yes, a self-closed tag <blah/>\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    # Probably we're jumping the gun, and this is an attribute\n                    state = MW_COLON_STATE_TAG\n            elif state == 5: # MW_COLON_STATE_COMMENT:\n                if text[i] == '-':\n                    state = MW_COLON_STATE_COMMENTDASH\n            elif state == MW_COLON_STATE_COMMENTDASH:\n                if text[i] == '-':\n                    state = MW_COLON_STATE_COMMENTDASHDASH\n                else:\n                    state = MW_COLON_STATE_COMMENT\n            elif state == MW_COLON_STATE_COMMENTDASHDASH:\n                if text[i] == '>':\n                    state = MW_COLON_STATE_TEXT\n                else:\n                    state = MW_COLON_STATE_COMMENT\n            else:\n                raise\n        if stack > 0:\n            return False\n        return False\n\n    def doBlockLevels(self, text, linestart):\n        # Parsing through the text line by line.  The main thing\n        # happening here is handling of block-level elements p, pre,\n        # and making lists from lines starting with * # : etc.\n        lastPrefix = u''\n        mDTopen = inBlockElem = False\n        prefixLength = 0\n        paragraphStack = False\n        _closeMatchPat = re.compile(ur\"(</table|</blockquote|</h1|</h2|</h3|</h4|</h5|</h6|<td|<th|<div|</div|<hr|</pre|</p|\" +  self.uniq_prefix + ur\"-pre|</li|</ul|</ol|<center)\", re.UNICODE | re.IGNORECASE)\n        mInPre = False\n        mLastSection = u''\n        mDTopen = False\n        output = []\n        for oLine in text.split('\\n')[not linestart and 1 or 0:]:\n            lastPrefixLength = len(lastPrefix)\n            preCloseMatch = _closePrePat.search(oLine)\n            preOpenMatch = _openPrePat.search(oLine)\n            if not mInPre:\n                chars = u'*#:;'\n                prefixLength = 0\n                for c in oLine:\n                    if c in chars:\n                        prefixLength += 1\n                    else:\n                        break\n                pref = oLine[0:prefixLength]\n\n                # eh?\n                pref2 = pref.replace(u';', u':')\n                t = oLine[prefixLength:]\n                mInPre = bool(preOpenMatch)\n            else:\n                # Don't interpret any other prefixes in preformatted text\n                prefixLength = 0\n                pref = pref2 = u''\n                t = oLine\n\n            # List generation\n            if prefixLength and lastPrefix == pref2:\n                # Same as the last item, so no need to deal with nesting or opening stuff\n                tmpOutput, tmpMDTopen = self.nextItem(pref[-1:], mDTopen)\n                output.append(tmpOutput)\n                if tmpMDTopen is not None:\n                    mDTopen = tmpMDTopen\n                paragraphStack = False\n\n                if pref[-1:] == u';':\n                    # The one nasty exception: definition lists work like this:\n                    # ; title : definition text\n                    # So we check for : in the remainder text to split up the\n                    # title and definition, without b0rking links.\n                    term = t2 = u''\n                    z = self.findColonNoLinks(t, term, t2)\n                    if z != False:\n                        term, t2 = z[1:2]\n                        t = t2\n                        output.append(term)\n                        tmpOutput, tmpMDTopen = self.nextItem(u':', mDTopen)\n                        output.append(tmpOutput)\n                        if tmpMDTopen is not None:\n                            mDTopen = tmpMDTopen\n\n            elif prefixLength or lastPrefixLength:\n                # Either open or close a level...\n                commonPrefixLength = self.getCommon(pref, lastPrefix)\n                paragraphStack = False\n                while commonPrefixLength < lastPrefixLength:\n                    tmp = self.closeList(lastPrefix[lastPrefixLength-1], mDTopen)\n                    output.append(tmp)\n                    mDTopen = False\n                    lastPrefixLength -= 1\n                if prefixLength <= commonPrefixLength and commonPrefixLength > 0:\n                    tmpOutput, tmpMDTopen = self.nextItem(pref[commonPrefixLength-1], mDTopen)\n                    output.append(tmpOutput)\n                    if tmpMDTopen is not None:\n                        mDTopen = tmpMDTopen\n\n                while prefixLength > commonPrefixLength:\n                    char = pref[commonPrefixLength:commonPrefixLength+1]\n                    tmpOutput, tmpMDTOpen = self.openList(char, mLastSection)\n                    if tmpMDTOpen:\n                        mDTopen = True\n                    output.append(tmpOutput)\n                    mLastSection = u''\n                    mInPre = False\n\n                    if char == u';':\n                        # FIXME: This is dupe of code above\n                        term = t2 = u''\n                        z = self.findColonNoLinks(t, term, t2)\n                        if z != False:\n                            term, t2 = z[1:2]\n                            t = t2\n                            output.append(term)\n                            tmpOutput, tmpMDTopen = self.nextItem(u':', mDTopen)\n                            output.append(tmpOutput)\n                            if tmpMDTopen is not None:\n                                mDTopen = tmpMDTopen\n\n                    commonPrefixLength += 1\n\n                lastPrefix = pref2\n\n            if prefixLength == 0:\n                # No prefix (not in list)--go to paragraph mode\n                # XXX: use a stack for nestable elements like span, table and div\n                openmatch = _openMatchPat.search(t)\n                closematch = _closeMatchPat.search(t)\n                if openmatch or closematch:\n                    paragraphStack = False\n                    output.append(self.closeParagraph(mLastSection))\n                    mLastSection = u''\n                    if preCloseMatch:\n                        mInPre = False\n                    if preOpenMatch:\n                        mInPre = True\n                    inBlockElem = bool(not closematch)\n                elif not inBlockElem and not mInPre:\n                    if t[0:1] == u' ' and (mLastSection ==  u'pre' or t.strip() != u''):\n                        # pre\n                        if mLastSection != u'pre':\n                            paragraphStack = False\n                            output.append(self.closeParagraph(u'') + u'<pre>')\n                            mInPre = False\n                            mLastSection = u'pre'\n                        t = t[1:]\n                    else:\n                        # paragraph\n                        if t.strip() == u'':\n                            if paragraphStack:\n                                output.append(paragraphStack + u'<br />')\n                                paragraphStack = False\n                                mLastSection = u'p'\n                            else:\n                                if mLastSection != u'p':\n                                    output.append(self.closeParagraph(mLastSection))\n                                    mLastSection = u''\n                                    mInPre = False\n                                    paragraphStack = u'<p>'\n                                else:\n                                    paragraphStack = u'</p><p>'\n                        else:\n                            if paragraphStack:\n                                output.append(paragraphStack)\n                                paragraphStack = False\n                                mLastSection = u'p'\n                            elif mLastSection != u'p':\n                                output.append(self.closeParagraph(mLastSection) + u'<p>')\n                                mLastSection = u'p'\n                                mInPre = False\n\n            # somewhere above we forget to get out of pre block (bug 785)\n            if preCloseMatch and mInPre:\n                mInPre = False\n\n            if paragraphStack == False:\n                output.append(t + u\"\\n\")\n\n        while prefixLength:\n            output.append(self.closeList(pref2[prefixLength-1], mDTopen))\n            mDTopen = False\n            prefixLength -= 1\n\n        if mLastSection != u'':\n            output.append(u'</' + mLastSection + u'>')\n            mLastSection = u''\n\n        return ''.join(output)\n\nclass Parser(BaseParser):\n\n    def __init__(self, base_url=None):\n        super(Parser, self).__init__()\n        self.base_url = base_url\n\n    def parse(self, text, show_toc=True, tags=ALLOWED_TAGS,\n              attributes=ALLOWED_ATTRIBUTES, styles=[], nofollow=False,\n              strip_comments=False):\n        \"\"\"Returns HTML from MediaWiki markup\"\"\"\n        self.show_toc = show_toc\n        self.tags = tags\n        utf8 = isinstance(text, str)\n        text = to_unicode(text)\n        if text[-1:] != u'\\n':\n            text = text + u'\\n'\n            taggedNewline = True\n        else:\n            taggedNewline = False\n\n        text = self.strip(text, stripcomments=strip_comments)\n        text = self.removeHtmlTags(text)\n        if self.base_url:\n            text = self.replaceVariables(text)\n        text = self.doTableStuff(text)\n        text = self.parseHorizontalRule(text)\n        text = self.checkTOC(text)\n        text = self.parseHeaders(text)\n        text = self.parseAllQuotes(text)\n        text = self.replaceExternalLinks(text)\n        if not self.show_toc and text.find(u\"<!--MWTOC-->\") == -1:\n            self.show_toc = False\n        text = self.formatHeadings(text, True)\n        text = self.unstrip(text)\n        text = self.fixtags(text)\n        text = self.doBlockLevels(text, True)\n        text = self.replaceInternalLinks(text)\n        text = self.unstripNoWiki(text)\n        text = text.split(u'\\n')\n        text = u'\\n'.join(text)\n        if taggedNewline and text[-1:] == u'\\n':\n            text = text[:-1]\n        if utf8:\n            text.encode(\"utf-8\")\n        # Pass output through bleach and linkify\n        text = bleach.linkify(text, nofollow=nofollow)\n        return bleach.clean(text, tags=self.tags, attributes=attributes,\n                            styles=styles, strip_comments=False)\n\n    def checkTOC(self, text):\n        if text.find(u\"__NOTOC__\") != -1:\n            text = text.replace(u\"__NOTOC__\", u\"\")\n            self.show_toc = False\n        if text.find(u\"__TOC__\") != -1:\n            text = text.replace(u\"__TOC__\", u\"<!--MWTOC-->\")\n            self.show_toc = True\n        return text\n\n    def replaceVariables(self, text, args={}, argsOnly=False):\n        \"\"\"\n        Replace magic variables, templates, and template arguments\n        with the appropriate text. Templates are substituted recursively,\n        taking care to avoid infinite loops.\n        \"\"\"\n\n        # Prevent too big inclusions\n        # if (len(text) > self.max_include_size:\n        #     return text\n\n        # This function is called recursively. To keep track of arguments we need a stack:\n        self.arg_stack.append(args)\n\n        braceCallbacks = {}\n        if not argsOnly:\n            braceCallbacks[2] = [None, self.braceSubstitution]\n        braceCallbacks[3] = [None, self.argSubstitution]\n\n        callbacks = {\n            u'{': {\n                'end': u'}',\n                'cb': braceCallbacks,\n                'min': argsOnly and 3 or 2,\n                'max': 3\n            },\n            u'[': {\n                'end': u']',\n                'cb': {2: None},\n                'min': 2,\n                'max': 2\n            }\n        }\n        text = replace_callback(text, callbacks)\n        mArgStack.pop()\n\n        return text\n\n    def replace_callback(self, text, callbacks):\n        \"\"\"\n        parse any parentheses in format ((title|part|part))\n        and call callbacks to get a replacement text for any found piece\n        \"\"\"\n        openingBraceStack = []      # this array will hold a stack of parentheses which are not closed yet\n        lastOpeningBrace = -1       # last not closed parentheses\n\n        validOpeningBraces = u''.join(callbacks.keys())\n\n        i = 0\n        while i < len(text):\n            if lastOpeningBrace == -1:\n                currentClosing = u''\n                search = validOpeningBraces\n            else:\n                currentClosing = openingBraceStack[lastOpeningBrace]['braceEnd']\n                search = validOpeningBraces + u'|' + currentClosing\n            rule = None\n            pos = -1\n            for c in search:\n                pos = max(pos, text.find(c, i))\n            pos -= i\n            pos += 1\n            if pos == 0:\n                pos = len(text)-i\n            i += pos\n            if i < len(text):\n                if text[i] == u'|':\n                    found = 'pipe'\n                elif text[i] == currentClosing:\n                    found = 'close'\n                elif text[i] in callbacks:\n                    found = 'open'\n                    rule = callbacks[text[i]]\n                else:\n                    i += 1\n                    continue\n            else:\n                break\n\n            if found == 'open':\n                # found opening brace, let's add it to parentheses stack\n                piece = {\n                    'brace': text[i],\n                    'braceEnd': rule['end'],\n                    'title': u'',\n                    'parts': None\n                }\n\n                # count opening brace characters\n                count = 0\n                while True:\n                    if text[i+count:i+1+count] == piece['brace']:\n                        count += 1\n                    else:\n                        break\n                piece['count'] = count\n                i += piece['count']\n                piece['startAt'] = piece['partStart'] = i\n\n                # we need to add to stack only if opening brace count is enough for one of the rules\n                if piece['count'] >= rule['min']:\n                    lastOpeningBrace += 1\n                    openingBraceStack[lastOpeningBrace] = piece\n            elif found == 'close':\n                maxCount = openingBraceStack[lastOpeningBrace]['count']\n                count = 0\n                while count < maxCount:\n                    if text[i+count:i+1+count] == text[i]:\n                        count += 1\n                    else:\n                        break\n\n                # check for maximum matching characters (if there are 5 closing\n                # characters, we will probably need only 3 - depending on the rules)\n                matchingCount = 0\n                matchingCallback = None\n                cbType = callbacks[openingBraceStack[lastOpeningBrace]['brace']]\n                if count > cbType['max']:\n                    # The specified maximum exists in the callback array, unless the caller\n                    # has made an error\n                    matchingCount = cbType['max']\n                else:\n                    # Count is less than the maximum\n                    # Skip any gaps in the callback array to find the true largest match\n                    # Need to use array_key_exists not isset because the callback can be null\n                    matchingCount = count\n                    while matchingCount > 0 and matchingCount not in cbType['cb']:\n                        matchingCount -= 1\n\n                if matchingCount <= 0:\n                    i += count\n                    continue\n                matchingCallback = cbType['cb'][matchingCount]\n\n                # let's set a title or last part (if '|' was found)\n                if openingBraceStack[lastOpeningBrace]['parts'] is None:\n                    openingBraceStack[lastOpeningBrace]['title'] = \\\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                else:\n                    openingBraceStack[lastOpeningBrace]['parts'].append(\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    )\n\n                pieceStart = openingBraceStack[lastOpeningBrace]['startAt'] - matchingCount\n                pieceEnd = i + matchingCount\n\n                if callable(matchingCallback):\n                    cbArgs = {\n                        'text': text[pieceStart:pieceEnd],\n                        'title': openingBraceStack[lastOpeningBrace]['title'].strip(),\n                        'parts': openingBraceStack[lastOpeningBrace]['parts'],\n                        'lineStart': pieceStart > 0 and text[pieceStart-1] == u\"\\n\"\n                    }\n                    # finally we can call a user callback and replace piece of text\n                    replaceWith = matchingCallback(cbArgs)\n                    text = text[:pieceStart] + replaceWith + text[pieceEnd:]\n                    i = pieceStart + len(replaceWith)\n                else:\n                    # null value for callback means that parentheses should be parsed, but not replaced\n                    i += matchingCount\n\n                # reset last opening parentheses, but keep it in case there are unused characters\n                piece = {\n                    'brace': openingBraceStack[lastOpeningBrace]['brace'],\n                    'braceEnd': openingBraceStack[lastOpeningBrace]['braceEnd'],\n                    'count': openingBraceStack[lastOpeningBrace]['count'],\n                    'title': u'',\n                    'parts': None,\n                    'startAt': openingBraceStack[lastOpeningBrace]['startAt']\n                }\n                openingBraceStack[lastOpeningBrace] = None\n                lastOpeningBrace -= 1\n\n                if matchingCount < piece['count']:\n                    piece['count'] -= matchingCount\n                    piece['startAt'] -= matchingCount\n                    piece['partStart'] = piece['startAt']\n                    # do we still qualify for any callback with remaining count?\n                    currentCbList = callbacks[piece['brace']]['cb']\n                    while piece['count']:\n                        if piece['count'] in currentCbList:\n                            lastOpeningBrace += 1\n                            openingBraceStack[lastOpeningBrace] = piece\n                            break\n\n                        piece['count'] -= 1\n\n            elif found == 'pipe':\n                # lets set a title if it is a first separator, or next part otherwise\n                if opeingBraceStack[lastOpeningBrace]['parts'] is None:\n                    openingBraceStack[lastOpeningBrace]['title'] = \\\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    openingBraceStack[lastOpeningBrace]['parts'] = []\n                else:\n                    openingBraceStack[lastOpeningBrace]['parts'].append(\n                        text[openingBraceStack[lastOpeningBrace]['partStart']:i]\n                    )\n                i += 1\n                openingBraceStack[lastOpeningBrace]['partStart'] = i\n\n        return text\n\n    def doTableStuff(self, text):\n        t = text.split(u\"\\n\")\n        td = [] # Is currently a td tag open?\n        ltd = [] # Was it TD or TH?\n        tr = [] # Is currently a tr tag open?\n        ltr = [] # tr attributes\n        has_opened_tr = [] # Did this table open a <tr> element?\n        indent_level = 0 # indent level of the table\n\n        for k, x in zip(range(len(t)), t):\n            x = x.strip()\n            fc = x[0:1]\n            matches = _zomgPat.match(x)\n            if matches:\n                indent_level = len(matches.group(1))\n\n                attributes = self.unstripForHTML(matches.group(2))\n\n                t[k] = u'<dl><dd>'*indent_level + u'<table' + self.fixTagAttributes(attributes, u'table') + u'>'\n                td.append(False)\n                ltd.append(u'')\n                tr.append(False)\n                ltr.append(u'')\n                has_opened_tr.append(False)\n            elif len(td) == 0:\n                pass\n            elif u'|}' == x[0:2]:\n                z = u\"</table>\" + x[2:]\n                l = ltd.pop()\n                if not has_opened_tr.pop():\n                    z = u\"<tr><td></td><tr>\" + z\n                if tr.pop():\n                    z = u\"</tr>\" + z\n                if td.pop():\n                    z = u'</' + l + u'>' + z\n                ltr.pop()\n                t[k] = z + u'</dd></dl>'*indent_level\n            elif u'|-' == x[0:2]: # Allows for |-------------\n                x = x[1:]\n                while x != u'' and x[0:1] == '-':\n                    x = x[1:]\n                z = ''\n                l = ltd.pop()\n                has_opened_tr.pop()\n                has_opened_tr.append(True)\n                if tr.pop():\n                    z = u'</tr>' + z\n                if td.pop():\n                    z = u'</' + l + u'>' + z\n                ltr.pop()\n                t[k] = z\n                tr.append(False)\n                td.append(False)\n                ltd.append(u'')\n                attributes = self.unstripForHTML(x)\n                ltr.append(self.fixTagAttributes(attributes, u'tr'))\n            elif u'|' == fc or u'!' == fc or u'|+' == x[0:2]: # Caption\n                # x is a table row\n                if u'|+' == x[0:2]:\n                    fc = u'+'\n                    x = x[1:]\n                x = x[1:]\n                if fc == u'!':\n                    x = x.replace(u'!!', u'||')\n                # Split up multiple cells on the same line.\n                # FIXME: This can result in improper nesting of tags processed\n                # by earlier parser steps, but should avoid splitting up eg\n                # attribute values containing literal \"||\".\n                x = x.split(u'||')\n\n                t[k] = u''\n\n                # Loop through each table cell\n                for theline in x:\n                    z = ''\n                    if fc != u'+':\n                        tra = ltr.pop()\n                        if not tr.pop():\n                            z = u'<tr' + tra + u'>\\n'\n                        tr.append(True)\n                        ltr.append(u'')\n                        has_opened_tr.pop()\n                        has_opened_tr.append(True)\n                    l = ltd.pop()\n                    if td.pop():\n                        z = u'</' + l + u'>' + z\n                    if fc == u'|':\n                        l = u'td'\n                    elif fc == u'!':\n                        l = u'th'\n                    elif fc == u'+':\n                        l = u'caption'\n                    else:\n                        l = u''\n                    ltd.append(l)\n\n                    #Cell parameters\n                    y = theline.split(u'|', 1)\n                    # Note that a '|' inside an invalid link should not\n                    # be mistaken as delimiting cell parameters\n                    if y[0].find(u'[[') != -1:\n                        y = [theline]\n\n                    if len(y) == 1:\n                        y = z + u\"<\" + l + u\">\" + y[0]\n                    else:\n                        attributes = self.unstripForHTML(y[0])\n                        y = z + u\"<\" + l + self.fixTagAttributes(attributes, l) + u\">\" + y[1]\n\n                    t[k] += y\n                    td.append(True)\n\n        while len(td) > 0:\n            l = ltd.pop()\n            if td.pop():\n                t.append(u'</td>')\n            if tr.pop():\n                t.append(u'</tr>')\n            if not has_opened_tr.pop():\n                t.append(u'<tr><td></td></tr>')\n            t.append(u'</table>')\n\n        text = u'\\n'.join(t)\n        # special case: don't return empty table\n        if text == u\"<table>\\n<tr><td></td></tr>\\n</table>\":\n            text = u''\n\n        return text\n\n    def formatHeadings(self, text, isMain):\n        \"\"\"\n        This function accomplishes several tasks:\n        1) Auto-number headings if that option is enabled\n        2) Add an [edit] link to sections for logged in users who have enabled the option\n        3) Add a Table of contents on the top for users who have enabled the option\n        4) Auto-anchor headings\n\n        It loops through all headlines, collects the necessary data, then splits up the\n        string and re-inserts the newly formatted headlines.\n        \"\"\"\n        doNumberHeadings = False\n        showEditLink = True # Can User Edit\n\n        if text.find(u\"__NOEDITSECTION__\") != -1:\n            showEditLink = False\n            text = text.replace(u\"__NOEDITSECTION__\", u\"\")\n\n        # Get all headlines for numbering them and adding funky stuff like [edit]\n        # links - this is for later, but we need the number of headlines right now\n        matches = _headerPat.findall(text)\n        numMatches = len(matches)\n\n        # if there are fewer than 4 headlines in the article, do not show TOC\n        # unless it's been explicitly enabled.\n        enoughToc = self.show_toc and (numMatches >= 4 or text.find(u\"<!--MWTOC-->\") != -1)\n\n        # Allow user to stipulate that a page should have a \"new section\"\n        # link added via __NEWSECTIONLINK__\n        showNewSection = False\n        if text.find(u\"__NEWSECTIONLINK__\") != -1:\n            showNewSection = True\n            text = text.replace(u\"__NEWSECTIONLINK__\", u\"\")\n        # if the string __FORCETOC__ (not case-sensitive) occurs in the HTML,\n        # override above conditions and always show TOC above first header\n        if text.find(u\"__FORCETOC__\") != -1:\n            self.show_toc = True\n            enoughToc = True\n            text = text.replace(u\"__FORCETOC__\", u\"\")\n        # Never ever show TOC if no headers\n        if numMatches < 1:\n            enoughToc = False\n\n        # headline counter\n        headlineCount = 0\n        sectionCount = 0 # headlineCount excluding template sections\n\n        # Ugh .. the TOC should have neat indentation levels which can be\n        # passed to the skin functions. These are determined here\n        toc = []\n        head = {}\n        sublevelCount = {}\n        levelCount = {}\n        toclevel = 0\n        level = 0\n        prevlevel = 0\n        toclevel = 0\n        prevtoclevel = 0\n        refers = {}\n        refcount = {}\n        wgMaxTocLevel = 5\n\n        for match in matches:\n            headline = match[2]\n            istemplate = False\n            templatetitle = u''\n            templatesection = 0\n            numbering = []\n\n            m = _templateSectionPat.search(headline)\n            if m:\n                istemplate = True\n                templatetitle = b64decode(m[0])\n                templatesection = 1 + int(b64decode(m[1]))\n                headline = _templateSectionPat.sub(u'', headline)\n\n            if toclevel:\n                prevlevel = level\n                prevtoclevel = toclevel\n\n            level = matches[headlineCount][0]\n\n            if doNumberHeadings or enoughToc:\n                if level > prevlevel:\n                    toclevel += 1\n                    sublevelCount[toclevel] = 0\n                    if toclevel < wgMaxTocLevel:\n                        toc.append(u'<ul>')\n                elif level < prevlevel and toclevel > 1:\n                    # Decrease TOC level, find level to jump to\n\n                    if toclevel == 2 and level < levelCount[1]:\n                        toclevel = 1\n                    else:\n                        for i in range(toclevel, 0, -1):\n                            if levelCount[i] == level:\n                                # Found last matching level\n                                toclevel = i\n                                break\n                            elif levelCount[i] < level:\n                                toclevel = i + 1\n                                break\n                    if toclevel < wgMaxTocLevel:\n                        toc.append(u\"</li>\")\n                        toc.append(u\"</ul></li>\" * max(prevtoclevel - toclevel, 0))\n                else:\n                    toc.append(u\"</li>\")\n\n                levelCount[toclevel] = level\n\n                # count number of headlines for each level\n                sublevelCount[toclevel] += 1\n                for i in range(1, toclevel+1):\n                    if sublevelCount[i]:\n                        numbering.append(to_unicode(sublevelCount[i]))\n\n            # The canonized header is a version of the header text safe to use for links\n            # Avoid insertion of weird stuff like <math> by expanding the relevant sections\n            canonized_headline = self.unstrip(headline)\n            canonized_headline = self.unstripNoWiki(canonized_headline)\n\n            # -- don't know what to do with this yet.\n            # Remove link placeholders by the link text.\n            #     <!--LINK number-->\n            # turns into\n            #     link text with suffix\n    #        $canonized_headline = preg_replace( '/<!--LINK ([0-9]*)-->/e',\n    #                            \"\\$this->mLinkHolders['texts'][\\$1]\",\n    #                            $canonized_headline );\n    #        $canonized_headline = preg_replace( '/<!--IWLINK ([0-9]*)-->/e',\n    #                            \"\\$this->mInterwikiLinkHolders['texts'][\\$1]\",\n    #                            $canonized_headline );\n\n            # strip out HTML\n            canonized_headline = _tagPat.sub(u'', canonized_headline)\n            tocline = canonized_headline.strip()\n            # Save headline for section edit hint before it's escaped\n            headline_hint = tocline\n            canonized_headline = self.escapeId(tocline)\n            refers[headlineCount] = canonized_headline\n\n            # count how many in assoc. array so we can track dupes in anchors\n            if canonized_headline not in refers:\n                refers[canonized_headline] = 1\n            else:\n                refers[canonized_headline] += 1\n            refcount[headlineCount] = refers[canonized_headline]\n\n            numbering = '.'.join(numbering)\n\n            # Don't number the heading if it is the only one (looks silly)\n            if doNumberHeadings and numMatches > 1:\n                # the two are different if the line contains a link\n                headline = numbering + u' ' + headline\n\n            # Create the anchor for linking from the TOC to the section\n            anchor = canonized_headline;\n            if refcount[headlineCount] > 1:\n                anchor += u'_' + unicode(refcount[headlineCount])\n\n            if enoughToc:\n                toc.append(u'<li class=\"toclevel-')\n                toc.append(to_unicode(toclevel))\n                toc.append(u'\"><a href=\"#w_')\n                toc.append(anchor)\n                toc.append(u'\"><span class=\"tocnumber\">')\n                toc.append(numbering)\n                toc.append(u'</span> <span class=\"toctext\">')\n                toc.append(tocline)\n                toc.append(u'</span></a>')\n\n    #        if showEditLink and (not istemplate or templatetitle != u\"\"):\n    #            if not head[headlineCount]:\n    #                head[headlineCount] = u''\n    #\n    #            if istemplate:\n    #                head[headlineCount] += sk.editSectionLinkForOther(templatetile, templatesection)\n    #            else:\n    #                head[headlineCount] += sk.editSectionLink(mTitle, sectionCount+1, headline_hint)\n\n            # give headline the correct <h#> tag\n            if headlineCount not in head:\n                head[headlineCount] = []\n            h = head[headlineCount]\n            h.append(u'<h')\n            h.append(to_unicode(level))\n            h.append(u' id=\"w_')\n            h.append(anchor)\n            h.append('\">')\n            h.append(matches[headlineCount][1].strip())\n            h.append(headline.strip())\n            h.append(u'</h')\n            h.append(to_unicode(level))\n            h.append(u'>')\n\n            headlineCount += 1\n\n            if not istemplate:\n                sectionCount += 1\n\n        if enoughToc:\n            if toclevel < wgMaxTocLevel:\n                toc.append(u\"</li>\")\n                toc.append(u\"</ul></li>\" * max(0, toclevel - 1))\n            toc.insert(0, u'<div id=\"toc\"><h2>Table of Contents</h2>')\n            toc.append(u'</ul></div>')\n\n        # split up and insert constructed headlines\n\n        blocks = _headerPat.split(text)\n\n        i = 0\n        len_blocks = len(blocks)\n        forceTocPosition = text.find(u\"<!--MWTOC-->\")\n        full = []\n        while i < len_blocks:\n            j = i/4\n            full.append(blocks[i])\n            if enoughToc and not i and isMain and forceTocPosition == -1:\n                full += toc\n                toc = None\n            if j in head and head[j]:\n                full += head[j]\n                head[j] = None\n            i += 4\n        full = u''.join(full)\n        if forceTocPosition != -1:\n            return full.replace(u\"<!--MWTOC-->\", u''.join(toc), 1)\n        else:\n            return full\n\ndef parse(text, show_toc=True, tags=ALLOWED_TAGS,\n          attributes=ALLOWED_ATTRIBUTES, nofollow=False):\n    \"\"\"Returns HTML from MediaWiki markup\"\"\"\n    p = Parser()\n    return p.parse(text, show_toc=show_toc, tags=tags, attributes=attributes,\n                   nofollow=nofollow)\n\ndef parselite(text):\n    \"\"\"Returns HTML from MediaWiki markup ignoring\n    without headings\"\"\"\n    p = BaseParser()\n    return p.parse(text)\n\ndef truncate_url(url, length=40):\n    if len(url) <= length:\n        return url\n    import re\n    pattern = r'(/[^/]+/?)$'\n    match = re.search(pattern, url)\n    if not match:\n        return url\n    l = len(match.group(1))\n    firstpart = url[0:len(url)-l]\n    secondpart = match.group(1)\n    if firstpart == firstpart[0:length-3]:\n        if secondpart != secondpart[0:length-3]:\n            secondpart = secondpart[0:length-3] + '...'\n    else:\n        firstpart = firstpart[0:length-3]\n        secondpart = '...' + secondpart\n    t_url = firstpart+secondpart\n    return t_url\n\ndef to_unicode(text, charset=None):\n    \"\"\"Convert a `str` object to an `unicode` object.\n\n    If `charset` is given, we simply assume that encoding for the text,\n    but we'll use the \"replace\" mode so that the decoding will always\n    succeed.\n    If `charset` is ''not'' specified, we'll make some guesses, first\n    trying the UTF-8 encoding, then trying the locale preferred encoding,\n    in \"replace\" mode. This differs from the `unicode` builtin, which\n    by default uses the locale preferred encoding, in 'strict' mode,\n    and is therefore prompt to raise `UnicodeDecodeError`s.\n\n    Because of the \"replace\" mode, the original content might be altered.\n    If this is not what is wanted, one could map the original byte content\n    by using an encoding which maps each byte of the input to an unicode\n    character, e.g. by doing `unicode(text, 'iso-8859-1')`.\n    \"\"\"\n    if not isinstance(text, str):\n        if isinstance(text, Exception):\n            # two possibilities for storing unicode strings in exception data:\n            try:\n                # custom __str__ method on the exception (e.g. PermissionError)\n                return unicode(text)\n            except UnicodeError:\n                # unicode arguments given to the exception (e.g. parse_date)\n                return ' '.join([to_unicode(arg) for arg in text.args])\n        return unicode(text)\n    if charset:\n        return unicode(text, charset, 'replace')\n    else:\n        try:\n            return unicode(text, 'utf-8')\n        except UnicodeError:\n            return unicode(text, locale.getpreferredencoding(), 'replace')\n\n\ndef safe_name(name=None, remove_slashes=True):\n    if name is None:\n        return None\n    name = str2url(name)\n    if remove_slashes:\n        name = re.sub(r\"[^a-zA-Z0-9\\-_\\s\\.]\", \"\", name)\n    else:\n        name = re.sub(r\"[^a-zA-Z0-9\\-_\\s\\.\\/]\", \"\", name)\n    name = re.sub(r\"[\\s\\._]\", \"-\", name)\n    name = re.sub(r\"[-]+\", \"-\", name)\n    return name.strip(\"-\").lower()\n\ndef str2url(str):\n    \"\"\"\n    Takes a UTF-8 string and replaces all characters with the equivalent in 7-bit\n    ASCII. It returns a plain ASCII string usable in URLs.\n    \"\"\"\n    try:\n        str = str.encode('utf-8')\n    except:\n        pass\n    mfrom    = \"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîï\"\n    to        = \"AAAAAAECEEEEIIIIDNOOOOOOUUUUYSaaaaaaaceeeeiiii\"\n    mfrom    += \"ñòóôõöøùúûüýÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģ\"\n    to        += \"noooooouuuuyyaaaaaaccccccccddddeeeeeeeeeegggggggg\"\n    mfrom    += \"ĤĥĦħĨĩĪīĬĭĮįİıĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘř\"\n    to        += \"hhhhiiiiiiiiiijjkkkllllllllllnnnnnnnnnoooooooorrrrrr\"\n    mfrom    += \"ŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƂƃƄƅƇƈƉƊƐƑƒƓƔ\"\n    to        += \"ssssssssttttttuuuuuuuuuuuuwwyyyzzzzzzfbbbbbccddeffgv\"\n    mfrom    += \"ƖƗƘƙƚƝƞƟƠƤƦƫƬƭƮƯưƱƲƳƴƵƶǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩ\"\n    to        += \"likklnnoopettttuuuuyyzzaaiioouuuuuuuuuueaaaaeeggggkk\"\n    mfrom    += \"ǪǫǬǭǰǴǵǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȞȟȤȥȦȧȨȩ\"\n    to        += \"oooojggpnnaaeeooaaaaeeeeiiiioooorrrruuuusstthhzzaaee\"\n    mfrom    += \"ȪȫȬȭȮȯȰȱȲȳḀḁḂḃḄḅḆḇḈḉḊḋḌḍḎḏḐḑḒḓḔḕḖḗḘḙḚḛḜḝḞḟḠḡḢḣḤḥḦḧḨḩḪḫ\"\n    to        += \"ooooooooyyaabbbbbbccddddddddddeeeeeeeeeeffgghhhhhhhhhh\"\n    mfrom    += \"ḬḭḮḯḰḱḲḳḴḵḶḷḸḹḺḻḼḽḾḿṀṁṂṃṄṅṆṇṈṉṊṋṌṍṎṏṐṑṒṓṔṕṖṗṘṙṚṛṜṝṞṟ\"\n    to        += \"iiiikkkkkkllllllllmmmmmmnnnnnnnnoooooooopppprrrrrrrr\"\n    mfrom    += \"ṠṡṢṣṤṥṦṧṨṩṪṫṬṭṮṯṰṱṲṳṴṵṶṷṸṹṺṻṼṽṾṿẀẁẂẃẄẅẆẇẈẉẊẋẌẍẎẏẐẑẒẓẔẕ\"\n    to        += \"ssssssssssttttttttuuuuuuuuuuvvvvwwwwwwwwwwxxxxxyzzzzzz\"\n    mfrom    += \"ẖẗẘẙẚẛẠạẢảẤấẦầẨẩẪẫẬậẮắẰằẲẳẴẵẶặẸẹẺẻẼẽẾếỀềỂểỄễỆệỈỉỊị\"\n    to        += \"htwyafaaaaaaaaaaaaaaaaaaaaaaaaeeeeeeeeeeeeeeeeiiii\"\n    mfrom    += \"ỌọỎỏỐốỒồỔổỖỗỘộỚớỜờỞởỠỡỢợỤụỦủỨứỪừỬửỮữỰựỲỳỴỵỶỷỸỹ\"\n    to        += \"oooooooooooooooooooooooouuuuuuuuuuuuuuyyyyyyyy\"\n    for i in zip(mfrom, to):\n        str = str.replace(*i)\n    return str\n"}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
]
}
,{"note":"slide-13",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s13.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s13.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s13.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
]
}
,{"note":"slide-14",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s14.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s14.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s14.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
,{"targetRectangle":{"y":116,
"width":848,
"x":89,
"height":584}
,
"text":"{for not fx11}You can use Firefox Sync to synchronize your bookmarks, passwords, settings, history, and tabs with Firefox on other computers. First just set up Firefox Sync on your main computer and then add each of the other computers.{/for}\n{for fx11}You can use Firefox Sync to synchronize your bookmarks, passwords, settings, history, add-ons, and tabs with Firefox on other computers. First just set up Firefox Sync on your main computer and then add each of the other computers.{/for}\n\n{for fx35}\n[[Template:Only in Fx4]]\n{/for}"}
]
}
,{"note":"slide-15",
"automaticPlay":false,
"hyperlinks":[{"url":"http://www.mediawiki.org/wiki/Markup_spec/BNF",
"targetRectangle":{"y":671,
"width":836,
"x":98.6145,
"height":40}
}
]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s15.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s15.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s15.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"MediaWiki"}
,{"targetRectangle":{"y":667,
"width":843.7368,
"x":94.6145,
"height":48}
,
"text":"http://www.mediawiki.org/wiki/Markup_spec/BNF"}
]
}
,{"note":"slide-16",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s16.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s16.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,54,-10]
,
"texture":"s16.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,263,222]
,
"texture":"s16.1.1.1.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s16.1.1.1.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.1.1.1.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 239.0000, "width": 713.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 249.00000, 207.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s16.1.1.1.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsing Libs are Weird"}
]
}
,{"note":"slide-16",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s16.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s16.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,54,-10]
,
"texture":"s16.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,263,222]
,
"texture":"s16.2.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,263,305]
,
"texture":"s16.2.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.2.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s16.2.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s16.2.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.2.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 239.0000, "width": 713.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 249.00000, 207.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s16.2.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsing Libs are Weird"}
,{"targetRectangle":{"y":207,
"width":713,
"x":249,
"height":239}
,
"text":"Weird docstrings\nWeird discovery\nWeird operators"}
]
}
,{"note":"slide-16",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s16.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s16.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,54,-10]
,
"texture":"s16.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,263,222]
,
"texture":"s16.3.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,263,389]
,
"texture":"s16.3.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.3.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s16.3.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s16.3.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s16.3.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 239.0000, "width": 713.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 249.00000, 207.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s16.3.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsing Libs are Weird"}
,{"targetRectangle":{"y":207,
"width":713,
"x":249,
"height":239}
,
"text":"Weird docstrings\nWeird discovery\nWeird operators"}
]
}
,{"note":"slide-16",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s16.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s16.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s16.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsing Libs are Weird"}
,{"targetRectangle":{"y":207,
"width":713,
"x":249,
"height":239}
,
"text":"Weird docstrings\nWeird discovery\nWeird operators"}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.1.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.1.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.1.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.1.1.1.dynamic",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.1.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.1.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.1.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.1.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.1.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.1.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.26}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.1.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08666667}
,{"beginTime":0.08666667,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.1.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08666667}
,{"beginTime":0.1733333,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.1.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08666666}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.26}
]
,
"duration":0.26,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.2.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.2.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.2.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.2.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.2.1.1.dynamic",
"canvasObjectID":7,
"hidden":0}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.2.2.1.dynamic",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.2.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.2.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.2.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.2.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.2.1.1.dynamic"]
}
,{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.2.2.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.2.2.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.2.2.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.2.2.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.2.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.2.2.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":152,
"width":113,
"x":245,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.3.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.3.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.3.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.3.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.3.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.3.2.1.dynamic",
"canvasObjectID":8,
"hidden":0}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.3.1.1.dynamic",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.3.3.1.dynamic",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.3.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.3.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.3.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.3.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.3.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.3.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.3.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.3.1.1.dynamic"]
}
,{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.3.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.3.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.3.2.1.dynamic"]
}
,{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.3.3.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.3.3.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.3.3.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.3.3.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.3.3.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.3.3.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":295,
"width":138,
"x":319,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.4.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.4.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.4.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.4.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.4.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.4.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.4.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.4.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.4.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.4.2.1.dynamic",
"canvasObjectID":9,
"hidden":0}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.4.3.1.dynamic",
"canvasObjectID":10,
"hidden":0}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.4.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.4.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.4.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.4.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.4.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.4.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.4.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.4.1.1.dynamic"]
}
,{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.4.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.4.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.4.2.1.dynamic"]
}
,{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.4.3.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.4.3.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.4.3.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":295,
"width":33,
"x":634.5,
"height":49}
,
"text":""}
,{"targetRectangle":{"y":295,
"width":33,
"x":792.5,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.5.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.5.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.5.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.5.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.5.2.1.dynamic",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.5.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.5.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.5.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.5.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.5.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.5.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.5.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.5.1.1.dynamic",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.5.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.5.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.5.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.5.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.5.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.5.1.1.dynamic"]
}
,{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.5.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.5.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.5.2.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":267,
"width":101,
"x":224,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.6.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.6.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.6.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.6.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.6.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.6.2.1.dynamic",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.6.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.6.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.6.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.6.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.6.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.6.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.6.1.1.dynamic",
"canvasObjectID":12,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.6.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.6.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.6.1.1.dynamic"]
}
,{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.6.2.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.6.2.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.6.2.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.6.2.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.6.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.6.2.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":704,
"width":831,
"x":104,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.7.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.7.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.7.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.7.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.7.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.7.2.1.dynamic",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.7.1.1.dynamic",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.7.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.7.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.7.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.7.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.7.12.1.fixed",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.7.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.7.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.25}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.7.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.08333334,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.7.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08333334}
,{"beginTime":0.1666667,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.7.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08333333}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.7.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.25}
]
,
"duration":0.25,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.7.1.1.dynamic"]
}
,{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.7.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.51}
,{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.7.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.51}
]
,
"duration":0.51,
"animationType":"buildOut",
"beginTime":0,
"textures":["s17.7.2.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":125,
"width":113,
"x":466,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s17.8.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s17.8.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,301,-10]
,
"texture":"s17.8.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,49,82]
,
"texture":"s17.8.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,219,262]
,
"texture":"s17.8.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,461,120]
,
"texture":"s17.8.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,370,206]
,
"texture":"s17.8.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,240,147]
,
"texture":"s17.8.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
,{"opacity":1,
"zIndex":8,
"affineTransform":[1,0,0,1,314,290]
,
"texture":"s17.8.9.1.fixed",
"canvasObjectID":8,
"hidden":1}
,{"opacity":1,
"zIndex":9,
"affineTransform":[1,0,0,1,630,290]
,
"texture":"s17.8.10.1.fixed",
"canvasObjectID":9,
"hidden":1}
,{"opacity":1,
"zIndex":10,
"affineTransform":[1,0,0,1,788,290]
,
"texture":"s17.8.11.1.fixed",
"canvasObjectID":10,
"hidden":1}
,{"opacity":1,
"zIndex":11,
"affineTransform":[1,0,0,1,342,485]
,
"texture":"s17.8.1.1.dynamic",
"canvasObjectID":11,
"hidden":1}
,{"opacity":1,
"zIndex":12,
"affineTransform":[1,0,0,1,99,699]
,
"texture":"s17.8.13.1.fixed",
"canvasObjectID":12,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:pop",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s17.8.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.26}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.scale",
"texture":"s17.8.1.1.dynamic",
"to":{"scalar":0.249400794506073}
,
"timingFunction":"linear",
"duration":0.08666667}
,{"beginTime":0.08666667,
"from":{"scalar":0.249400794506073}
,
"action":"transform.scale",
"texture":"s17.8.1.1.dynamic",
"to":{"scalar":1.200000047683716}
,
"timingFunction":"linear",
"duration":0.08666667}
,{"beginTime":0.1733333,
"from":{"scalar":1.200000047683716}
,
"action":"transform.scale",
"texture":"s17.8.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"linear",
"duration":0.08666666}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s17.8.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.26}
]
,
"duration":0.26,
"animationType":"buildIn",
"beginTime":0,
"textures":["s17.8.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":211,
"width":143,
"x":375,
"height":49}
,
"text":""}
]
}
,{"note":"slide-17",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s17.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s17.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s17.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pyparsing"}
,{"targetRectangle":{"y":76,
"width":948,
"x":47,
"height":669}
,
"text":"from pyparsing import *\n\nletters = Regex('[a-zA-Z]+').setName('letters').setDebug()\nbold_toggle = Literal(\"'''\").setName('bold_toggle').setDebug()\nitalic_toggle = Literal(\"''\").setName('italic_toggle').setDebug()\ntext_with_formatting = Forward()\nitalic_span = Forward()\nbold_span = (Group(bold_toggle +\n                   OneOrMore(italic_span | letters) +\n                   bold_toggle).setName('bold_span')\n                               .setDebug())\nitalic_span << (Group(italic_toggle +\n                      OneOrMore(bold_span | letters) +\n                      italic_toggle).setName('italic_span')\n                                    .setDebug())\ntext_with_formatting << OneOrMore(bold_span |\n                                  italic_span |\n                                  letters).setName(\n                            'text_with_formatting').setDebug()\ntext_with_formatting.verbose_stacktrace = True\nprint text_with_formatting.parseString(\"'''bdasl''hide''seek'''\")\n\n[[\"'''\", 'bdasl', [\"''\", 'hide', \"''\"], 'seek', \"'''\"]]"}
,{"targetRectangle":{"y":211,
"width":143,
"x":375,
"height":49}
,
"text":""}
,{"targetRectangle":{"y":490,
"width":45,
"x":346.5,
"height":49}
,
"text":""}
]
}
,{"note":"slide-18",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s18.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s18.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s18.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,136,222]
,
"texture":"s18.1.1.1.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s18.1.1.1.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.1.1.1.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 232.0000, "width": 813.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 208.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s18.1.1.1.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
]
}
,{"note":"slide-18",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s18.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s18.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s18.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,136,222]
,
"texture":"s18.2.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,136,303]
,
"texture":"s18.2.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.2.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s18.2.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s18.2.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.2.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 232.0000, "width": 813.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 208.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s18.2.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"LALR, or LR(1) \nEscape hatch to C\nProven great debug output"}
]
}
,{"note":"slide-18",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s18.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s18.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s18.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,136,222]
,
"texture":"s18.3.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,136,383]
,
"texture":"s18.3.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.3.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s18.3.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s18.3.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s18.3.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 232.0000, "width": 813.0000 },
"viewScale":1,
"animationAuto":false,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 208.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s18.3.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"LALR, or LR(1) \nEscape hatch to C\nProven great debug output"}
]
}
,{"note":"slide-18",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s18.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s18.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s18.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"LALR, or LR(1) \nEscape hatch to C\nProven great debug output"}
]
}
,{"note":"slide-19",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s19.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s19.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s19.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":100,
"width":1032,
"x":-11,
"height":599}
,
"text":"    def t_HR(self, t):\n        r'^----+'\n        # t.value doesn't matter.\n        return t\n\n    def t_NEWLINE(self, t):\n        r'(?:\\r\\n|\\n\\r|\\r|\\n)'\n        return t\n\n    def t_ANY_HTML_ENTITY_HEX(self, t):\n        r'&\\#x(?P<HTML_ENTITY_HEX_NUM>[0-9a-fA-F]+);'\n        t.value = unichr(int(t.lexer.lexmatch.group(\n                         'HTML_ENTITY_HEX_NUM'), 16))\n        t.type = 'TEXT'\n        return t"}
]
}
,{"note":"slide-20",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s20.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s20.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s20.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":160,
"width":964,
"x":45,
"height":484}
,
"text":"def p_internal_link(self, p):\n    \"\"\"internal_link : INTERNAL_LINK texts INTERNAL_LINK_END\n                     | INTERNAL_LINK texts INTERNAL_LINK_END\"\"\"\n    p[0] = Link(p[2])\n\ndef p_texts(self, p):  # Merge consecutive TEXT terminals.\n    \"\"\"texts : texts TEXT\"\"\"\n    p[0] = p[1] + p[2]\n\ndef p_texts_from_brackets(self, p):\n    \"\"\"texts : INTERNAL_LINK\n             | INTERNAL_LINK_END\n             | TEXT\"\"\"\n    # Failed brace matches can be treated as text.\n    p[0] = unicode(p[1])"}
]
}
,{"note":"slide-21",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s21.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s21.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s21.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,250,131]
,
"texture":"s21.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,73,234]
,
"texture":"s21.1.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,27,357]
,
"texture":"s21.1.6.1.fixed",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,485,442]
,
"texture":"s21.1.7.1.fixed",
"canvasObjectID":6,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s21.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s21.1.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s21.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":123,
"width":554.458,
"x":234.8315,
"height":64}
,
"text":"[[Gerbil|the gerbil]]"}
]
}
,{"note":"slide-21",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s21.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s21.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s21.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,250,131]
,
"texture":"s21.2.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,73,234]
,
"texture":"s21.2.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,27,357]
,
"texture":"s21.2.2.1.dynamic",
"canvasObjectID":5,
"hidden":1}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,485,442]
,
"texture":"s21.2.1.1.dynamic",
"canvasObjectID":6,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s21.2.2.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s21.2.2.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"buildIn",
"beginTime":0,
"textures":["s21.2.2.1.dynamic"]
}
,{"effect":"apple:move in",
"actions":[{"beginTime":1,
"from":{"scalar":539}
,
"action":"transform.translation.x",
"texture":"s21.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.75}
,{"beginTime":1,
"from":{"scalar":0}
,
"action":"transform.translation.y",
"texture":"s21.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":0.75}
,{"beginTime":1,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s21.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":0.75}
]
,
"duration":0.75,
"animationType":"buildIn",
"beginTime":1,
"textures":["s21.2.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":123,
"width":554.458,
"x":234.8315,
"height":64}
,
"text":"[[Gerbil|the gerbil]]"}
,{"targetRectangle":{"y":226,
"width":908.4639,
"x":57.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
]
}
,{"note":"slide-21",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s21.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s21.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s21.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,250,131]
,
"texture":"s21.3.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,73,234]
,
"texture":"s21.3.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,27,357]
,
"texture":"s21.3.6.1.fixed",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,485,442]
,
"texture":"s21.3.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"emphasisType":"translationEmphasis",
"beginTime":0,
"actions":[{"action":"translationEmphasis",
"to":{"translationEmphasis":[196,33,0]
}
,
"duration":0.5,
"timingFunction":"easeInEaseOut",
"beginTime":0,
"from":{"translationEmphasis":[0,0,0]
}
}
]
,
"animationType":"actionBuild",
"effect":"apple:emphasis-motion-path",
"canvasObjectID":6,
"duration":0.5}
,{"emphasisType":"rotationEmphasis",
"beginTime":0,
"actions":[{"action":"rotationEmphasis",
"to":{"rotationEmphasis":[73.59036,56.41986,0,0,0,1,-0.8415183]
}
,
"duration":0.5,
"timingFunction":"easeInEaseOut",
"beginTime":0,
"from":{"rotationEmphasis":[73.59036,56.41986,0,0,0,1,0]
}
}
]
,
"animationType":"actionBuild",
"effect":"apple:emphasis-rotation",
"canvasObjectID":6,
"duration":0.5}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":123,
"width":554.458,
"x":234.8315,
"height":64}
,
"text":"[[Gerbil|the gerbil]]"}
,{"targetRectangle":{"y":226,
"width":908.4639,
"x":57.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
,{"targetRectangle":{"y":554,
"width":-135,
"x":631,
"height":-99.99998}
,
"text":""}
]
}
,{"note":"slide-21",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s21.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s21.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s21.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":123,
"width":554.458,
"x":234.8315,
"height":64}
,
"text":"[[Gerbil|the gerbil]]"}
,{"targetRectangle":{"y":226,
"width":908.4639,
"x":57.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
,{"targetRectangle":{"y":554,
"width":-135,
"x":631,
"height":-99.99998}
,
"text":""}
]
}
,{"note":"slide-22",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s22.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s22.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,66,655]
,
"texture":"s22.1.3.1.fixed",
"canvasObjectID":2,
"hidden":1}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,65,654]
,
"texture":"s22.1.4.1.fixed",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s22.1.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,136,223]
,
"texture":"s22.1.6.1.fixed",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,77,594]
,
"texture":"s22.1.1.1.dynamic",
"canvasObjectID":6,
"hidden":1}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,66,656]
,
"texture":"s22.1.8.1.fixed",
"canvasObjectID":7,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s22.1.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s22.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"Escape hatch to C\nProven great debug output\nLALR, or LR(1)"}
]
}
,{"note":"slide-22",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s22.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s22.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,66,655]
,
"texture":"s22.2.3.1.fixed",
"canvasObjectID":2,
"hidden":1}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,65,654]
,
"texture":"s22.2.4.1.fixed",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s22.2.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,136,223]
,
"texture":"s22.2.6.1.fixed",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,77,594]
,
"texture":"s22.2.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,66,656]
,
"texture":"s22.2.1.1.dynamic",
"canvasObjectID":7,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.2.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s22.2.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s22.2.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"Escape hatch to C\nProven great debug output\nLALR, or LR(1)"}
,{"targetRectangle":{"y":586,
"width":908.4639,
"x":61.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
]
}
,{"note":"slide-22",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s22.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s22.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,66,655]
,
"texture":"s22.3.1.1.dynamic",
"canvasObjectID":2,
"hidden":1}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,65,654]
,
"texture":"s22.3.4.1.fixed",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s22.3.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,136,223]
,
"texture":"s22.3.6.1.fixed",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,77,594]
,
"texture":"s22.3.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,66,656]
,
"texture":"s22.3.8.1.fixed",
"canvasObjectID":7,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.3.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s22.3.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s22.3.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"Escape hatch to C\nProven great debug output\nLALR, or LR(1)"}
,{"targetRectangle":{"y":586,
"width":908.4639,
"x":61.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
,{"targetRectangle":{"y":665.7022,
"width":46.61358,
"x":75.70834,
"height":0.0009155273}
,
"text":""}
]
}
,{"note":"slide-22",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s22.4.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s22.4.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,66,655]
,
"texture":"s22.4.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,65,654]
,
"texture":"s22.4.1.1.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,420,-7]
,
"texture":"s22.4.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
,{"opacity":1,
"zIndex":5,
"affineTransform":[1,0,0,1,136,223]
,
"texture":"s22.4.6.1.fixed",
"canvasObjectID":5,
"hidden":0}
,{"opacity":1,
"zIndex":6,
"affineTransform":[1,0,0,1,77,594]
,
"texture":"s22.4.7.1.fixed",
"canvasObjectID":6,
"hidden":0}
,{"opacity":1,
"zIndex":7,
"affineTransform":[1,0,0,1,66,656]
,
"texture":"s22.4.8.1.fixed",
"canvasObjectID":7,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s22.4.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s22.4.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s22.4.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":664.9988,
"width":205.4233,
"x":75,
"height":0.002075195}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"Escape hatch to C\nProven great debug output\nLALR, or LR(1)"}
,{"targetRectangle":{"y":586,
"width":908.4639,
"x":61.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
,{"targetRectangle":{"y":665.7022,
"width":46.61358,
"x":75.70834,
"height":0.0009155273}
,
"text":""}
]
}
,{"note":"slide-22",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s22.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s22.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s22.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":664.9988,
"width":205.4233,
"x":75,
"height":0.002075195}
,
"text":""}
,{"targetRectangle":{"y":663.9996,
"width":242.6356,
"x":74,
"height":0.002502441}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"PLY"}
,{"targetRectangle":{"y":208,
"width":813,
"x":122,
"height":232}
,
"text":"Escape hatch to C\nProven great debug output\nLALR, or LR(1)"}
,{"targetRectangle":{"y":586,
"width":908.4639,
"x":61.82855,
"height":64}
,
"text":"[[Gerbil|the gerbil [[oh never mind"}
,{"targetRectangle":{"y":665.7022,
"width":46.61358,
"x":75.70834,
"height":0.0009155273}
,
"text":""}
]
}
,{"note":"slide-23",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s23.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s23.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,395,-10]
,
"texture":"s23.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,57,121]
,
"texture":"s23.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,125,674]
,
"texture":"s23.1.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s23.1.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s23.1.1.1.dynamic",
"to":{"scalar":1}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s23.1.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pijnu"}
,{"targetRectangle":{"y":116,
"width":1578,
"x":52.5,
"height":260}
,
"text":"allowed_in_link    : (!(R_BRACKET/PIPE) ESC_CHAR)+                  : restore join\rlink_text          : (clean_inline / allowed_in_link)*              : liftValue\rlink_argument      : PIPE link_text                                 : liftValue\rlink_arguments     : link_argument*\rinternal_link      : LINK_BEGIN page_name link_arguments LINK_END   : render_internal_link\roptional_link_text : SPACETAB+ link_text                            : liftValue\rexternal_link      : L_BRACKET url optional_link_text? R_BRACKET    : render_external_link\rlink               : internal_link / external_link\r"}
]
}
,{"note":"slide-23",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s23.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s23.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,395,-10]
,
"texture":"s23.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,57,121]
,
"texture":"s23.2.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,125,674]
,
"texture":"s23.2.5.1.fixed",
"canvasObjectID":4,
"hidden":0}
]
,
"hyperlinks":[{"url":"https://github.com/erikrose/mediawiki-parser",
"targetRectangle":{"y":675,
"width":770,
"x":127.2634,
"height":40}
}
]
,
"eventAnimations":[{"emphasisType":"translationEmphasis",
"beginTime":0,
"actions":[{"action":"translationEmphasis",
"to":{"translationEmphasis":[-369,0,0]
}
,
"duration":2.5,
"timingFunction":"easeInEaseOut",
"beginTime":0,
"from":{"translationEmphasis":[0,0,0]
}
}
]
,
"animationType":"actionBuild",
"effect":"apple:emphasis-motion-path",
"canvasObjectID":3,
"duration":2.5}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pijnu"}
,{"targetRectangle":{"y":116,
"width":1578,
"x":52.5,
"height":260}
,
"text":"allowed_in_link    : (!(R_BRACKET/PIPE) ESC_CHAR)+                  : restore join\rlink_text          : (clean_inline / allowed_in_link)*              : liftValue\rlink_argument      : PIPE link_text                                 : liftValue\rlink_arguments     : link_argument*\rinternal_link      : LINK_BEGIN page_name link_arguments LINK_END   : render_internal_link\roptional_link_text : SPACETAB+ link_text                            : liftValue\rexternal_link      : L_BRACKET url optional_link_text? R_BRACKET    : render_external_link\rlink               : internal_link / external_link\r"}
,{"targetRectangle":{"y":671,
"width":778.0433,
"x":123.2634,
"height":48}
,
"text":"https://github.com/erikrose/mediawiki-parser"}
]
}
,{"note":"slide-23",
"automaticPlay":false,
"hyperlinks":[{"url":"https://github.com/erikrose/mediawiki-parser",
"targetRectangle":{"y":675,
"width":770,
"x":127.2634,
"height":40}
}
]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s23.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s23.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s23.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Pijnu"}
,{"targetRectangle":{"y":116,
"width":1578,
"x":52.5,
"height":260}
,
"text":"allowed_in_link    : (!(R_BRACKET/PIPE) ESC_CHAR)+                  : restore join\rlink_text          : (clean_inline / allowed_in_link)*              : liftValue\rlink_argument      : PIPE link_text                                 : liftValue\rlink_arguments     : link_argument*\rinternal_link      : LINK_BEGIN page_name link_arguments LINK_END   : render_internal_link\roptional_link_text : SPACETAB+ link_text                            : liftValue\rexternal_link      : L_BRACKET url optional_link_text? R_BRACKET    : render_external_link\rlink               : internal_link / external_link\r"}
,{"targetRectangle":{"y":671,
"width":778.0433,
"x":123.2634,
"height":48}
,
"text":"https://github.com/erikrose/mediawiki-parser"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.1.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.1.1.1.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.1.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.1.1.1.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.1.1.1.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.1.1.1.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.2.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.2.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.2.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.2.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,185]
,
"texture":"s24.2.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.2.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.2.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.2.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.2.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.2.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.2.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.3.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.3.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.3.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.3.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,256]
,
"texture":"s24.3.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.3.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.3.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.3.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.3.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.3.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.3.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.4.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.4.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.4.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.4.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,327]
,
"texture":"s24.4.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.4.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.4.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.4.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.4.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.4.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.4.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.5.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.5.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.5.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.5.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,453]
,
"texture":"s24.5.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.5.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.5.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.5.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.5.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.5.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.5.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.6.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.6.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.6.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.6.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,524]
,
"texture":"s24.6.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.6.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.6.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.6.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.6.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.6.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.6.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.7.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.7.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.7.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.7.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,524]
,
"texture":"s24.7.4.2.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.7.1.1.dynamic",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:move in",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.translation.x",
"texture":"s24.7.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":-931}
,
"action":"transform.translation.y",
"texture":"s24.7.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.7.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildIn",
"beginTime":0,
"textures":["s24.7.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.8.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.8.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.8.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.8.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,524]
,
"texture":"s24.8.4.2.fixed",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.8.1.1.dynamic",
"canvasObjectID":4,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"apple:move in",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.translation.x",
"texture":"s24.8.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"transform.translation.y",
"texture":"s24.8.1.1.dynamic",
"to":{"scalar":-931}
,
"timingFunction":"easeInEaseOut",
"duration":1.01}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.8.1.1.dynamic",
"to":{"scalar":0}
,
"timingFunction":"linear",
"duration":1.01}
]
,
"duration":1.01,
"animationType":"buildOut",
"beginTime":0,
"textures":["s24.8.1.1.dynamic"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
,{"targetRectangle":{"y":-18,
"width":940.4639,
"x":55,
"height":858}
,
"text":"def test_lists_vs_dicts():\n    \"\"\"See what's faster at int key lookup: dicts or lists.\"\"\"\n    list_time = timeit('item = l[9000]', 'l = [0] * 10000')\n    dict_time = timeit('item = d[9000]', 'd = dict((x, 0) for x in xrange(10000))')\n\n    # Dicts take about 1.6x as long as lists in Python 2.6 and 2.7.\n    print '%s < %s' % (list_time, dict_time)\n    assert list_time < dict_time\n\n\ndef test_call_vs_inline():\n    \"\"\"How bad is the calling penalty?\"\"\"\n    no_call = timeit('l[0] += 1', 'l = [0]')\n    call = timeit('add(); l[0] += 1', 'l = [0]\\n'\n                                      'def add():\\n'\n                                      '    pass')\n\n    # Calling a function is pretty fast; it takes just 1.2x as long as the\n    # global var access and addition in l[0] += 1.\n    print '%s (no call) < %s (call)' % (no_call, call)\n    assert no_call < call\n\n\ndef test_startswith_vs_regex():\n    \"\"\"Can I beat the speed of regexes by special-casing literals?\"\"\"\n    re_time = timeit(\n        'r.match(t, 19)',\n        'import re\\n'\n        \"r = re.compile('hello')\\n\"\n        \"t = 'this is the finest hello ever'\")\n    startswith_time = timeit(\"t.startswith('hello', 19)\",\n                             \"t = 'this is the finest hello ever'\")\n\n    # Regexes take 2.24x as long as simple string matching.\n    print '%s (startswith) < %s (re)' % (startswith_time, re_time)\n    assert startswith_time < re_time\n"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.9.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.9.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.9.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.9.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,595]
,
"texture":"s24.9.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.9.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.9.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.9.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.9.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.9.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.9.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":0,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s24.10.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,11,25]
,
"texture":"s24.10.2.1.fixed",
"canvasObjectID":1,
"hidden":0}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,231,-10]
,
"texture":"s24.10.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,114]
,
"texture":"s24.10.1.1.static",
"canvasObjectID":3,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,134,666]
,
"texture":"s24.10.1.2.dynamic",
"canvasObjectID":3,
"hidden":1}
,{"opacity":1,
"zIndex":4,
"affineTransform":[1,0,0,1,54,-19]
,
"texture":"s24.10.5.1.fixed",
"canvasObjectID":4,
"hidden":1}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"effect":"none",
"actions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.10.1.1.static",
"timingFunction":"linear",
"duration":0.25,
"to":{"scalar":0}
}
]
,
"duration":0.25,
"animationType":"none",
"textures":["s24.10.1.1.static"]
,
"beginTime":0}
,{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s24.10.1.2.dynamic",
"timingFunction":"easeInEaseOut",
"duration":0.26,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s24.10.1.2.dynamic",
"timingFunction":"linear",
"duration":0.26,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":0.26,
"beginTime":0,
"animationAttributes":{"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"direction":20,
"animationTimingReferent":1,
"naturalSize":{ "height": 615.0000, "width": 813.0000 },
"kBGShowObjectElements":1,
"animationAuto":false,
"viewScale":1,
"transform":[ 1.00000, 0.00000, 0.00000, 1.00000, 122.00000, 102.00000 ],
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0}
}
]
,
"animationType":"buildIn",
"textures":["s24.10.1.2.dynamic"]
,
"effect":"apple:wipe",
"duration":0.26}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"note":"slide-24",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s24.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s24.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s24.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":102,
"width":813,
"x":122,
"height":615}
,
"text":"Fast\nShort\nFrugal RAM use\rMinimalistic, understandable, idiomatic Python code\rReadable, extensible grammars\rComplete test coverage\rSeparation of concerns\rGood error reporting"}
]
}
,{"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s25.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s25.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s25.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s25.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Parsimonious"}
,{"targetRectangle":{"y":117,
"width":883,
"x":76,
"height":648}
,
"text":"peg_grammar = Grammar('''\n    rules = rule+ ws?\n    rule = ws? label _? \"=\" _? rhs _? eol\n    eol = ~r\"[\\r\\n]\"  # TODO: $\n    rhs = poly_term / term\n    poly_term = anded / ored / sequence\n    anded = term and_term+\n    and_term = _ \"&\" another_term\n    ored = term or_term+\n    or_term = _ \"/\" another_term\n    sequence = term another_term+\n    another_term = _ term\n    not_term = \"!\" term  # TODO: Half thought out. Make this work.\n    term = quantified / atom\n    quantified = atom quantifier\n    atom = label / literal / regex\n    regex = \"~\" literal ~\"[ilmsux]*\"i\n    literal = ~\"u?r?\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*\\\"\"is\n    quantifier = ~\"[*+?]\"\n    label = ~\"[a-zA-Z_][a-zA-Z_0-9]*\"\n    _ = ~r\"[ \\t]+\"  # horizontal whitespace\n    ws = ~r\"\\s+\"\n    ''')\n"}
]
}
,{"note":"slide-26",
"automaticPlay":false,
"hyperlinks":[{"url":"http://www.flickr.com/photos/rofi/2097239111/",
"targetRectangle":{"y":304,
"width":732,
"x":130,
"height":43}
}
,{"url":"http://www.flickr.com/photos/rofi/2097239111/",
"targetRectangle":{"y":261,
"width":810,
"x":130,
"height":43}
}
,{"url":"http://www.flickr.com/photos/rofi/2097239111/",
"targetRectangle":{"y":195,
"width":709,
"x":130,
"height":66}
}
,{"url":"http://www.flickr.com/people/rofi/",
"targetRectangle":{"y":152,
"width":298,
"x":454,
"height":43}
}
]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s26.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s26.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s26.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s26.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":25.5,
"width":1007,
"x":12.5,
"height":737}
,
"text":""}
,{"targetRectangle":{"y":-20,
"width":937,
"x":43.51855,
"height":104}
,
"text":"Image Credits"}
,{"targetRectangle":{"y":148,
"width":854,
"x":95,
"height":203}
,
"text":"Lambda backdrop by Roger Ferrer Ibáñez\u2028http://www.flickr.com/photos/rofi/2097239111/\nDancers from http://www.zcool.com.cn/img.html?src=/cover/19/54/1282031999890.jpg via freepik.com "}
]
}
,{"note":"slide-27",
"automaticPlay":1,
"eventInitialStates":[{"opacity":1,
"zIndex":-1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.background",
"hidden":0}
,{"opacity":1,
"zIndex":0,
"affineTransform":[1,0,0,1,-103,-88]
,
"texture":"s27.1.1.1.fixed",
"canvasObjectID":0,
"hidden":0}
,{"opacity":1,
"zIndex":1,
"affineTransform":[1,0,0,1,4,-32]
,
"texture":"s27.1.1.1.dynamic",
"canvasObjectID":1,
"hidden":1}
,{"opacity":1,
"zIndex":2,
"affineTransform":[1,0,0,1,349,76]
,
"texture":"s27.1.3.1.fixed",
"canvasObjectID":2,
"hidden":0}
,{"opacity":1,
"zIndex":3,
"affineTransform":[1,0,0,1,533,77]
,
"texture":"s27.1.4.1.fixed",
"canvasObjectID":3,
"hidden":0}
]
,
"hyperlinks":[]
,
"eventAnimations":[{"noPluginActions":[{"beginTime":0,
"from":{"scalar":0}
,
"action":"opacity",
"texture":"s27.1.1.1.dynamic",
"timingFunction":"easeInEaseOut",
"duration":2.51,
"to":{"scalar":1}
}
,{"beginTime":0,
"from":{"scalar":0}
,
"action":"hidden",
"texture":"s27.1.1.1.dynamic",
"timingFunction":"linear",
"duration":2.51,
"to":{"scalar":0}
}
]
,
"beginTime":0,
"pluginActions":[{"action":"pluginAction",
"duration":2.51,
"beginTime":0,
"animationAttributes":{"animationDuration":2.5,
"animationStartOffset":0,
"animationDelayAutmaticAfter":0.5,
"animationDelayAutomaticWith":0,
"animationEndOffset":0,
"animationInterchunkDelay":0,
"animationTimingReferent":1,
"naturalSize":{ "height": 1050.0000, "width": 355.2891 },
"viewScale":1,
"animationAuto":true,
"transform":[ 0.93036, -0.36664, 0.36664, 0.93036, -97.96515, -103.26938 ],
"BGBuildDurationProperty":2.5,
"animationInterchunkAuto":false,
"animationDelay":0,
"animationType":1,
"angle":0.3753963}
}
]
,
"animationType":"buildIn",
"textures":["s27.1.1.1.dynamic"]
,
"effect":"com.apple.iWork.Keynote.KLNFlame",
"duration":2.51}
]
,
"textRegions":[{"targetRectangle":{"y":77,
"width":660,
"x":350,
"height":284}
,
"text":"       ErikRose\nerik@votizen.com\ngithub.com/erikrose/mediawiki-parser/blob/master/parsers.rst"}
]
}
,{"note":"slide-27",
"automaticPlay":false,
"hyperlinks":[]
,
"eventInitialStates":[{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.b",
"hidden":0}
,{"opacity":1,
"affineTransform":[1,0,0,1,0,0]
,
"texture":"s27.a",
"hidden":0}
]
,
"eventAnimations":[{"effect":"apple:dissolve",
"actions":[{"beginTime":0,
"from":{"scalar":1}
,
"action":"opacity",
"texture":"s27.a",
"to":{"scalar":0}
,
"timingFunction":"easeInEaseOut",
"duration":1}
]
,
"duration":1,
"animationType":"transition",
"beginTime":0,
"textures":["s27.a"]
}
]
,
"textRegions":[{"targetRectangle":{"y":-103.2694,
"width":1071.618,
"x":-97.96515,
"height":767.7057}
,
"text":"?"}
,{"targetRectangle":{"y":77,
"width":660,
"x":350,
"height":284}
,
"text":"       ErikRose\nerik@votizen.com\ngithub.com/erikrose/mediawiki-parser/blob/master/parsers.rst"}
]
}
]
,
"loopSlideshow":0,
"showMode":0,
"majorVersion":0,
"notes":{"slide-15":"Some work done on that. BNF.\n\nSo I thought:\nI will translate this for some parsing lib, and I will have myself a parser.\n\nStarted with PyParsing: canonical parsing lib. But before we dive into libs, I need to warn you…",
"slide-19":"scans a namespace\nfinds the regexes. mashes them together. ordered by line #\napplies big regex to input stream\n\nWe end up having broken down the input text into tokens. This is called tokenization or lexing. Most algos do this.\n\n(can use a class instead of module)\n",
"slide-4":"support.mozilla.org\nwiki\nstrange legacy reasons: MW",
"slide-22":"Remember LR(1) thing from earlier?\n\nlittle did I know, limited lookahead\n\nSo you can see the current token and the next, but you can forget about making any decisions based on whether the pipe is there.\n\nIn fact, to get all the way to the end of an internal link construct and guarantee it was, indeed, an internal link, we’d need a lookahead of 4, and no LR parser offers that: the internal lookup tables would be ginormous.",
"slide-12":"…2300 lines of additional logic.\n\nOriginal in PHP. David Cramer port. Still $.\n\nReally hard to understand.\nBuggy (even MW changes lang all the time)\nHard to extend\n∆ one thing in that rat’s nest, & everything else comes crashing down.\n",
"slide-26":"Thanks to everybody who let me reuse their images in my slides.",
"slide-5":"Listed as talk for novices. Most ppl & parsing: just strings → trees.\nBut it’s fundamental to everything that goes on around us every day.",
"slide-16":"[Maybe move this to end of talk. Segue into parsimonious design decisions. Omit if out of time.]\ndocstrings\ndiscovery (find bits of grammar definition by name, like unittest)\noperators (redefined)\n\nWhy?\nConciseness.\nFamiliarity (like BNF).\nMaybe the type of people who are interested in parsing are interested in languages in general and so like to play around.\nMost likely: easier. Could throw grammar in strings.\nAnyway, with that warning, PyParsing",
"slide-6":"▼\t❑\tA hidden gem of a field\n\t•\t❑\tEverything that comes out of our mouth has to be parsed back into the multidimensional structs in somebody else's head\n\n\t•\t❑\tFirst step toward letting computers operate as peers in our human discourse\n\nyou’re parsing right now\nnot just text",
"slide-23":"So, it was time to go shopping again.\nBy this time, GSoC. Shiny new grad student: Peter Potrowl\n\nDone some research: needed PEG. Sweble, Rats.\n[whazzat? HOw’s PEG work?]\n\nChoice between PyParsing again & pijnu.\n\nLiked: BNF. Great for developing the grammar. Got it working! Makes a parse tree, then outputs text, html, or raw tree. github\nDidn’t: no tests, slow. 3s/page. (author didn’t optimize) weird (not on PyPI, bizarre formatting) and…\n\ncoupled to presentation.\nLook to the right.\n\nGrammar not really extensible",
"slide-13":"And we wanted to extend it.\n\nWant to have our pages change dynamically depending on browser version & OS",
"slide-27":"burning questions?\n\nMore time? parsimonious",
"slide-7":"musical phrases music that make up a composition",
"slide-17":"First thing: hard to read. Let’s step through\n\nliteral, oneOrMore, operators\ngroup (get parse tree rather than flat)\noutput\n\nUnfortunate compromises:\nsetname\nforward, <<\n\ndebugging hard: recursive tracebacks\n[15:30]",
"slide-20":"Then, does something similar for BNF-like parse rules, which describe how to shape the tokens into trees.\n\nBut it’s the insistence on upfront tokenization that kills us…",
"slide-1":"Welcome to Parsing Horrible Things! I’m going to show you how to avoid all the mistakes I made while trying to parse the MW syntax.\n\nAlong the way, I’ll explain enough of parsing theory that you can shop for a parsing lib for your own project without painting yourself into a corner.",
"slide-10":"dink dink\n\nWalk tree. Could print to a terminal instead\n\nRepresentation agnostic\n\nGateway drug:\nonce you’ve turned serialized gibberish into tree, you can do anything. Move into…\n• programming language design\n• compilation\n• natural lang processing\n\nUnfortunately, greek chars. Me: little math, only Greek char is that lambda in the background.\n",
"slide-8":"pieces of choreo make up a dance\n\nParsing is anything that pulls structure out of a linear representation.\n\nHow does it know how? Well, u give description…",
"slide-14":"{for} directive\n\nGood luck, right?\n\nWrite a proper parser.\n\nFirst thing to think about: Can I express this lang in a formal way?",
"slide-24":"fast To go fast, packrat. memory(big). 170MB for a 93-line page.\nfrugal RAM\nshort not 3000 lines\nunderstandable\nreadable, extensible grammars\ntests\nseparation of tree building and formatting\nerror reporting hold my hand. tty magic",
"slide-2":"Before we get into that\nshout out\nWe’re going to fix American democracy. It should be simple, right?\n\nBut when I submitted this talk…",
"slide-9":"a part of Python’s grammar\n\nEBNF (man pages, learning programming langs)\n\nYou can conclude: context-free\n\nWhy not regex? nesting. When nesting, use parser.",
"slide-18":"Python lex yacc\nLR(1) : O(text), independent of grammar size\nC\ngreat debug",
"slide-21":"MW’s internal links start with [[,\nso I was gonna call [[ the INTERNAL_LINK token.\n\nTrouble is, sometime that’s not what [[ means.\n\n2nd line\nThen tokenizer wrong\nunless big lookahead in tokenizer regex. Then unmaintainable: lexer and parser both have to know about structure. & be kept in sync. DRY. (My goal was to be *more* understandable.)",
"slide-11":"MW is never turned into a parse tree. In the original Klingon\nStraight into HTML\n41 regexes.\n\nAnd in case that wasn’t enough…",
"slide-3":"Mozilla."}
,
"creator":"Apple Keynote 5.1.1",
"author":"",
"comment":"",
"pageCount":69,
"scalefactor480":0.3310547,
"slideCount":27}
